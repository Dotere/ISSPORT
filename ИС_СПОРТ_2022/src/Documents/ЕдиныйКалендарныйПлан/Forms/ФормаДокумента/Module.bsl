&НаКлиенте
Процедура ЕКППередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Оповещение = Новый ОписаниеОповещения("ОповещениеЗакрытия", ЭтотОбъект);
	ОткрытьФорму("Документ.ЕдиныйКалендарныйПлан.Форма.ФормаДобавления", , , , , , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеЗакрытияНаСервере(Результат, ДополнительныеПараметры);	
	
КонецПроцедуры	
	
&НаСервере
Процедура ОповещениеЗакрытияНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	Объект.ЕКП.Удалить(Объект.Екп.Количество()-1);
	Если НЕ Результат = Неопределено Тогда
		Параметр = новый Структура;
		Параметр.Вставить("Соревнование",Результат.Соревнование);
		Параметр.Вставить("ВидСпорта",Результат.ВидСпорта);
		Параметры2 = Новый Структура;
		Параметры2.Вставить("НомерСоревнования",Результат.НомерСоревнования);
		//Если Объект.ЕКП.НайтиСтроки(Параметры2).Количество() = 0 Тогда
			Если Объект.ЕКП.НайтиСтроки(Параметр).Количество() = 0 Тогда
				Объект.ЕКП.Добавить();
				Строка = Объект.ЕКП[Объект.Екп.Количество()-1];
				Строка.ВидСпорта = Результат.ВидСпорта;
				Строка.НаименованиеОрганизаторов = Результат.НаименованиеОрганизаторов;
				Строка.Финансирование = Результат.Финансирование;
				Строка.МестоПроведения = Результат.МестоПроведения;
				Строка.ДатаНачала = Результат.ДатаНачала;
				Строка.ДатаОкончания = Результат.ДатаОкончания;
				Строка.КоличествоУчастников = Результат.КоличествоУчастников;
				Строка.КоличествоТренеров = Результат.КоличествоТренеров;
				Строка.Соревнование = Результат.Соревнование;
				Строка.НомерСоревнования = Результат.НомерСоревнования;
				Строка.Город = Результат.Город;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Нельзя создавать одинаковые соревнования.");
			КонецЕсли;
		//Иначе
		//	ОбщегоНазначения.СообщитьПользователю("Соревнование с указанным номером ЕКП уже существует");
		//КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗакрытияИзменений(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеЗакрытияИзмененийНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры	

&НаСервере	
Процедура ОповещениеЗакрытияИзмененийНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Параметр = новый Структура;
		Параметр.Вставить("Соревнование",Результат.Соревнование);
		Параметр.Вставить("ВидСпорта",Результат.ВидСпорта);
		Параметр2 = новый Структура;
		Параметр2.Вставить("Соревнование",Результат.Соревнование);
		Параметр2.Вставить("ВидСпорта",Результат.ВидСпорта);
		Параметр2.Вставить("НомерСтроки",Результат.НомерСтроки);
		Строка = Объект.ЕКП[Результат.НомерСтроки-1];
		Если Не Объект.ЕКП.НайтиСтроки(Параметр2).Количество() = 0  Тогда
			Строка.ВидСпорта = Результат.ВидСпорта;
			Строка.НаименованиеОрганизаторов = Результат.НаименованиеОрганизаторов;
			Строка.Финансирование = Результат.Финансирование;
			Строка.МестоПроведения = Результат.МестоПроведения;
			Строка.ДатаНачала = Результат.ДатаНачала;
			Строка.ДатаОкончания = Результат.ДатаОкончания;
			Строка.КоличествоУчастников = Результат.КоличествоУчастников;
			Строка.КоличествоТренеров = Результат.КоличествоТренеров;
			Строка.Соревнование = Результат.Соревнование;
			Строка.НомерСоревнования = Результат.НомерСоревнования;
			Строка.Город = Результат.Город;
		ИначеЕсли Объект.ЕКП.НайтиСтроки(Параметр).Количество() = 0 Тогда
			Строка.ВидСпорта = Результат.ВидСпорта;
			Строка.НаименованиеОрганизаторов = Результат.НаименованиеОрганизаторов;
			Строка.Финансирование = Результат.Финансирование;
			Строка.МестоПроведения = Результат.МестоПроведения;
			Строка.ДатаНачала = Результат.ДатаНачала;
			Строка.ДатаОкончания = Результат.ДатаОкончания;
			Строка.КоличествоУчастников = Результат.КоличествоУчастников;
			Строка.КоличествоТренеров = Результат.КоличествоТренеров;
			Строка.Соревнование = Результат.Соревнование;
			Строка.НомерСоревнования = Результат.НомерСоревнования;
			Строка.Город = Результат.Город;
			Иначе
			ОбщегоНазначения.СообщитьПользователю("Изменения не вступили в силу, так как имеются одинаковые соревнования.");
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЕКПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Данные = Элементы.ЕКП.ТекущиеДанные;
	Параметр = новый Структура;
	Параметр.Вставить("Соревнование",Данные.Соревнование);
	Параметр.Вставить("ВидСпорта",Данные.ВидСпорта);
	Параметр.Вставить("НаименованиеОрганизаторов",Данные.НаименованиеОрганизаторов);
	Параметр.Вставить("Финансирование",Данные.Финансирование);
	Параметр.Вставить("МестоПроведения",Данные.МестоПроведения);
	Параметр.Вставить("ДатаНачала",Данные.ДатаНачала);
	Параметр.Вставить("ДатаОкончания",Данные.ДатаОкончания);
	Параметр.Вставить("КоличествоУчастников",Данные.КоличествоУчастников);
	Параметр.Вставить("КоличествоТренеров",Данные.КоличествоТренеров);
	Параметр.Вставить("НомерСтроки",Данные.НомерСтроки);
	Параметр.Вставить("НомерСоревнования",Данные.НомерСоревнования);
	Параметр.Вставить("Город",Данные.Город);
	Оповещение = Новый ОписаниеОповещения("ОповещениеЗакрытияИзменений", ЭтотОбъект);
	ОткрытьФорму("Документ.ЕдиныйКалендарныйПлан.Форма.ФормаДобавления",Параметр , , , , , Оповещение);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// {Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	// {Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	Если РольДоступна("ПолныеПрава") Тогда
		 Элементы.Ответственный.Доступность = Истина;
	Иначе 	 
		 Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
	// }Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	// }Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	
	Если ПараметрыСеанса.ТекущаяОрганизация.Пустая() Тогда
		Элементы.Организация.Видимость = Истина;
	Иначе
		Объект.Организация = ПараметрыСеанса.ТекущаяОрганизация; 
		Элементы.Организация.Видимость = Ложь;
		
	КонецЕсли;
	
	// {Рарус kotana #IN-17514 -Некорректно заполняется учебный год 2021.06.21
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        УправлениеУчебнымГодомСсылка = УчетСпортсменовСервер.ПолучитьДокументТекущегоУчебногоГода();
    	Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
        
    Иначе
        
        УчетСпортсменовСервер.ЗаполнитьДокументУчебныйГод(ЭтотОбъект, Объект.УчебныйГод, Объект.Организация);	
        
    КонецЕсли; 
	// }Рарус kotana #IN-17514 -Некорректно заполняется учебный год 2021.06.21
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаПроведениеСоревнования(Команда)
	Если Элементы.ЕКП.ВыделенныеСтроки.Количество() <> 0 Тогда
		ТекущиеДанные = Элементы.ЕКП.ТекущиеДанные;
		Параметр = новый структура;
		Параметр.Вставить("Cоревнование",ТекущиеДанные.Соревнование);
		Параметр.Вставить("Организация",Объект.Организация);
		Параметр.Вставить("ВидСпорта",ТекущиеДанные.ВидСпорта);
		Параметр.Вставить("УчебныйГод",Объект.УчебныйГод);
		ОткрытьФорму("Документ.ЗаявкаНаПроведениеСоревнования.Форма.ФормаДокумента", Параметр);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура Соревнование(Команда)
	Если Элементы.ЕКП.ВыделенныеСтроки.Количество() <> 0 Тогда
		ТекущиеДанные = Элементы.ЕКП.ТекущиеДанные;
		Параметр = новый структура;
		Параметр.Вставить("Cоревнование",ТекущиеДанные.Соревнование);
		Параметр.Вставить("Организация",Объект.Организация);
		Параметр.Вставить("ВидСпорта",ТекущиеДанные.ВидСпорта);
		Параметр.Вставить("МестоПроведения",ТекущиеДанные.МестоПроведения);
		Параметр.Вставить("ДатаНачалаСоревнования",ТекущиеДанные.ДатаНачала);
		Параметр.Вставить("ДатаОкончанияСоревнования",ТекущиеДанные.ДатаОкончания);
		Параметр.Вставить("УчебныйГод",Объект.УчебныйГод);
		ОткрытьФорму("Документ.Соревнование.Форма.ФормаДокумента", Параметр);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПротоколСоревнования(Команда)
	Если Элементы.ЕКП.ВыделенныеСтроки.Количество() <> 0 Тогда
		ТекущиеДанные = Элементы.ЕКП.ТекущиеДанные;
		Параметр = новый структура;
		Параметр.Вставить("Cоревнование",ТекущиеДанные.Соревнование);
		Параметр.Вставить("Организация",Объект.Организация);
		Параметр.Вставить("ВидСпорта",ТекущиеДанные.ВидСпорта);
		Параметр.Вставить("МестоПроведения",ТекущиеДанные.МестоПроведения);
		Параметр.Вставить("ДатаНачалаСоревнования",ТекущиеДанные.ДатаНачала);
		Параметр.Вставить("ДатаОкончанияСоревнования",ТекущиеДанные.ДатаОкончания);
		Параметр.Вставить("ОрганизаторСоревнования",ТекущиеДанные.НаименованиеОрганизаторов);
		Параметр.Вставить("УчебныйГод",Объект.УчебныйГод);
		ОткрытьФорму("Документ.ПротоколСоревнования.Форма.ФормаДокумента", Параметр);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыездСпортсменов(Команда)
	Если Элементы.ЕКП.ВыделенныеСтроки.Количество() <> 0 Тогда
		ТекущиеДанные = Элементы.ЕКП.ТекущиеДанные;
		Параметр = новый структура;
		Параметр.Вставить("Cоревнование",ТекущиеДанные.Соревнование);
		Параметр.Вставить("Организация",Объект.Организация);
		Параметр.Вставить("ВидСпорта",ТекущиеДанные.ВидСпорта);
		Параметр.Вставить("МестоПроведения",ТекущиеДанные.МестоПроведения);
		Параметр.Вставить("НомерСоревнования",ТекущиеДанные.НомерСоревнования);
		Параметр.Вставить("ДатаВыезда",ТекущиеДанные.ДатаНачала);
		Параметр.Вставить("ДатаВозвращения",ТекущиеДанные.ДатаОкончания);
		Параметр.Вставить("Город",ТекущиеДанные.Город);
		Параметр.Вставить("Финансирование",ТекущиеДанные.Финансирование);
		Параметр.Вставить("Основание","Согласно Единого календарного плана межрегиональных, всероссийских и международных физкультурных мероприятий и спортивных мероприятий на "+ ГодЕКП() + " год Минспорта России");
		ОткрытьФорму("Документ.ВыездСпортсменовНаМероприятие.Форма.ФормаДокумента", Параметр);
	КонецЕсли
КонецПроцедуры

&НаСервере
Функция ГодЕКП()
	Возврат Формат(Объект.УчебныйГод.ДатаНачала,"ДФ=гггг");
КонецФункции

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура УчебныйГодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодОткрытие(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодОткрытие(УправлениеУчебнымГодомСсылка,СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УчебныйГодНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	УправлениеУчебнымГодомСсылка = Результат;
    ПолучитьУчебныйГодСсылка();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьУчебныйГодСсылка()
	Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
КонецПроцедуры	
