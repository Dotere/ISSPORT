
#Область ОбработчикиСобытийНаФорме

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// {Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	// {Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	Если РольДоступна("ПолныеПрава") Тогда
		 Элементы.Ответственный.Доступность = Истина;
	Иначе 	 
		 Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
	// }Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	// }Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	
	// {Рарус dotere #16299 -Получение параметров 2021.05.14
	Если Параметры.Свойство("Cоревнование") Тогда
		Объект.Соревнование = Параметры.Cоревнование;
		Объект.Организация = Параметры.Организация;
		Объект.ВидСпорта = Параметры.ВидСпорта;
		Объект.МестоПроведения = Параметры.МестоПроведения;
		Объект.ДатаНачалаСоревнования = Параметры.ДатаНачалаСоревнования;
		Объект.ДатаОкончанияСоревнования = Параметры.ДатаОкончанияСоревнования;
		Объект.УчебныйГод = Параметры.УчебныйГод;
	КонецЕсли;
	// }Рарус dotere #16299 -Получение параметров 2021.05.14
	
	Если ЗначениеЗаполнено(Объект.Соревнование) Тогда
		
		ЗаполнитьДанныеПоСоревнованиюНаСервере();
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
		Объект.ТипПодсчетаРезультата = Элементы.ТипПодсчетаРезультата.СписокВыбора[0].Значение;
		Объект.ТипРезультата = Перечисления.ТипыРезультатов.Время;
		
		УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
		УправлениеУчебнымГодомСсылка = УчетСпортсменовСервер.ПолучитьДокументТекущегоУчебногоГода();
	    Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
	Иначе
		УчетСпортсменовСервер.ЗаполнитьДокументУчебныйГод(ЭтотОбъект, Объект.УчебныйГод, Объект.Организация);
	КонецЕсли;
		
	Если Объект.СоставУчастников.Количество()>0 Тогда
		ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
	КонецЕсли;
	
	УстановитьДоступностьНаСервере();	
		
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ДополнительныеПараметры.ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		// {Рарус kotana #7847 2020.07.24
		ЗаполнитьДеревоНаФорме();
		// }Рарус kotana #7847 2020.07.24
	КонецЕсли;
	
	Если НЕ УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).СтрахованиеСпортсменовОрганизация Тогда
		Элементы.СоставУчастниковСтаховойПолис.Видимость 					= Ложь;
		Элементы.СоставУчастниковСтаховойПолисКонтекстноеМеню.Видимость 	= Ложь;
	КонецЕсли;
	
	Если НЕ УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда 	
		Элементы.СоставУчастниковМеждународнаяВозрастнаяГруппа.Видимость    = Ложь;
		Элементы.ГруппаЖеребьевка.Видимость 								= Ложь;
	КонецЕсли;
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	
	// {Рарус adilas #13392 -Номер документа 2021.02.12
	Если Пользователи.РолиДоступны("АдминистраторСистемы, ПолныеПрава") Тогда
		Элементы.Номер.Доступность = Истина;
		Элементы.Номер.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	// }Рарус adilas #13392 -Номер документа 2021.02.12
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыгрузкаДанныхВСистемуХронометража" Тогда
		СформироватьФайлЗавершение();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, СоревнованиеОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УставновитьЗаголовок();
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.УсправлениеУчебнымГодом.Форма.ФормаВыбора") И ВыбранноеЗначение <> Неопределено Тогда
		Объект.УчебныйГод = ВыбранноеЗначение.УчебныйГод;
	КонецЕсли;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Соревнование.Форма.ФормаВыбора") И ВыбранноеЗначение <> Неопределено Тогда
		ЗаполнитьДанныеПоСоревнованиюНаСервере();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
Процедура СоревнованиеПриИзменении(Элемент)
	УставновитьЗаголовок();
	ЗаполнитьДанныеПоСоревнованиюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.СоставУчастников.Количество()= 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("УчебныйГодПриИзмененииЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть 'Спортсмены' будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	Иначе
		
		УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоревнованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.СоставУчастников.Количество()= 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("СоревнованиеНачалоВыбораЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть 'Спортсмены' будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСоздание(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодСоздание(ЭтаФорма, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодОткрытие(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодОткрытие(УправлениеУчебнымГодомСсылка,СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ЗаполнитьПоЗаявкамДополнительно(Команда)
	
	Если НЕ ЭтотОбъект.ПроверитьЗаполнение()Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.СоставУчастников.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоЗаявкамДополнительноЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоЗаявкамДополнительноНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСпортсменовДополнительно(Команда)
	
	СписокОтборов = Новый Структура;
	СписокОтборов.Вставить("УчебныйГод", Объект.УчебныйГод);
	СписокОтборов.Вставить("ВидСпорта", Объект.ВидСпорта);
	СписокОтборов.Вставить("Соревнование", Объект.Соревнование);
	
	ПараметрыФормы = Новый Структура("СписокОтборов, ДатаДокумента",СписокОтборов, Объект.ДатаНачалаСоревнования);
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьСпортсменовДополнительноЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораПоЗаявкам", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСоревнования(Команда)
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		ТекстВопроса = "";
		Если НЕ Объект.Проведен Тогда
			ТекстВопроса = "Документ не проведен. Провести документ?";
		Иначе
			ТекстВопроса = "Документ был изменен. Провести документ?";
		КонецЕсли;	
		
		Оповещение = Новый ОписаниеОповещения("ПротоколСоревнованияПроведение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
	ПротоколСоревнованияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайл(Команда)
	
	Отказ = Ложь;
	
	Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Проведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не проведен! Выгрузка невозможна! 
		|Проведите документ.");
		Отказ = Истина;
	ИначеЕсли Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан! Выгрузка невозможна! 
		|Запишите документ.");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументСоревнование, Выгрузка", Объект.Ссылка, Истина);
	ОткрытьФорму("Обработка.ВыгрузкаЗагрузкаДанныхСоревнования.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьЗаявкойИзФайла(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не проведен! Выгрузка невозможна! 
		|Проведите документ.");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДополнитьЗаявкойИзФайлаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ВыгрузкаЗагрузкаДанныхСоревнования.Форма.Форма", Новый Структура("ДокументСоревнование",Объект.Ссылка), ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// {Рарус kotana #7847 2020.07.24
// 
&НаКлиенте
Процедура ЗаполнитьЖеребьевку(Команда)
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда 	
		ВозрастныеГруппыУказаны = ПроверитьЗаполнениеВозрастныеГруппы();
	
		Если НЕ ВозрастныеГруппыУказаны Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены возрастные группы!",,"ВозрастныеГруппы","Объект.ВозрастныеГруппы");
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.УчебныйГод) Тогда
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен учебный год!",,"УчебныйГод","Объект.УчебныйГод");
				Возврат;
		
		КонецЕсли;
	КонецЕсли;
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	
	Если НЕ Объект.Жеребьевка.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЖеребьевкуЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЖеребьевкуПродолжить();
	
КонецПроцедуры
// }Рарус kotana #7847 2020.07.24
#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей

&НаКлиенте
Процедура СоставУчастниковСпортсменПриИзменении(Элемент)
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	ТекДанные.GUIDУчастника = ?(ЗначениеЗаполнено(ТекДанные.Спортсмен), ТекДанные.Спортсмен.УникальныйИдентификатор(),"");
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		ЗаполнитьДополнительныеДанныеНаФорме(ТекДанные.НомерСтроки-1);
	Иначе
		ЗаполнитьДополнительныеДанныеНаФорме(ТекДанные.НомерСтроки-1, Ложь);
	КонецЕсли;
	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	
КонецПроцедуры

// {Рарус adilas #18823 -Спортивные дисциплины 2021.07.29
&НаКлиенте
Процедура СоставУчастниковДисциплинаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СпортивнаяДисциплинаПоРееструОткрыть();
	
КонецПроцедуры
// }Рарус adilas #18823 -Спортивные дисциплины 2021.07.29

&НаКлиенте
Процедура СоставУчастниковДопускОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроведениеСоревнованийФормыКлиент.ЭлементФормыОткрытие(ЭтотОбъект, СтандартнаяОбработка, "ДопускРегистратор", "СоставУчастниковДопускОткрытиеОтвет");
		
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковСтаховойПолисОткрытие(Элемент, СтандартнаяОбработка)
	
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).СтрахованиеСпортсменовОрганизация Тогда
		ПроведениеСоревнованийФормыКлиент.ЭлементФормыОткрытие(ЭтотОбъект, СтандартнаяОбработка, "СтраховойПолисРегистратор", "СоставУчастниковСтаховойПолисОткрытиеОтвет");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЖюриГлавныйСудьяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставЖюри.ТекущиеДанные;
	Для Каждого СтрокаЖюри Из Объект.СоставЖюри Цикл
		Если СтрокаЖюри.Судья = ТекущиеДанные.Судья Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЖюри.ГлавныйСудья = Ложь;
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	РезультатОбновления = УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
	Возврат РезультатОбновления;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

&НаКлиенте
Процедура ПротоколСоревнованияПроведение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДокументНаСервере();
		Если Объект.Проведен Тогда
			ПротоколСоревнованияНаКлиенте();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокументНаСервере()
	ЭтотОбъект.Записать();
КонецПроцедуры	

&НаКлиенте
Процедура ПротоколСоревнованияНаКлиенте()
	
	МассивУчастников = ПолучитьМассивУчастников();
	
	Если МассивУчастников.Количество() = 2 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПротоколСоревнованияНаКлиентеЗавершение",
		ЭтотОбъект,
		Новый Структура("МассивУчастников", МассивУчастников));	
		
		ПоказатьВопрос(Оповещение,
		"Создать протокол с разделением на юношей и девушек?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПротоколСоревнования.Форма.ФормаДокумента", Новый Структура("ДокументОснование", Объект.Ссылка));
	
КонецПроцедуры
	
&НаСервере
Функция ПолучитьМассивУчастников()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставУчастников.Спортсмен КАК Спортсмен
	               |ИЗ
	               |	Документ.Соревнование.СоставУчастников КАК СоставУчастников
	               |ГДЕ
	               |	СоставУчастников.Ссылка = &Ссылка
	               |	И СоставУчастников.Спортсмен.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоставУчастников.Спортсмен КАК Спортсмен
	               |ИЗ
	               |	Документ.Соревнование.СоставУчастников КАК СоставУчастников
	               |ГДЕ
	               |	СоставУчастников.Ссылка = &Ссылка
	               |	И СоставУчастников.Спортсмен.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)";
    МассивРезультат = Новый Массив;
	Пакет = Запрос.ВыполнитьПакет();
	тзДевушки = Пакет[0].Выгрузить().ВыгрузитьКолонку("Спортсмен");
	Если НЕ тзДевушки.Количество() = 0 Тогда
		МассивРезультат.Добавить(Новый Структура("Пол, СоставУчастников", Перечисления.ПолФизическогоЛица.Женский,тзДевушки)); 
	КонецЕсли;
	тзЮноши = Пакет[1].Выгрузить().ВыгрузитьКолонку("Спортсмен");
	Если НЕ тзЮноши.Количество() = 0 Тогда
		МассивРезультат.Добавить(Новый Структура("Пол, СоставУчастников", Перечисления.ПолФизическогоЛица.Мужской,тзЮноши)); 
	КонецЕсли;
	
	Возврат МассивРезультат
	
КонецФункции	

&НаКлиенте
Процедура ПротоколСоревнованияНаКлиентеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Документ.ПротоколСоревнования.Форма.ФормаДокумента",
		   Новый Структура("ДокументОснование, СоставУчастников, Пол", Объект.Ссылка,ДопПараметры.МассивУчастников[0].СоставУчастников, ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"))
		   ,
		   ,Истина);
		   
		ОткрытьФорму("Документ.ПротоколСоревнования.Форма.ФормаДокумента",
		   Новый Структура("ДокументОснование, СоставУчастников, Пол", Объект.Ссылка,ДопПараметры.МассивУчастников[1].СоставУчастников, ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"))
		   ,
		   ,Истина);   
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ОткрытьФорму("Документ.ПротоколСоревнования.Форма.ФормаДокумента", Новый Структура("ДокументОснование", Объект.Ссылка));
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти	

&НаКлиенте
Процедура СформироватьФайлЗавершение()
	
	Объект.ВыгруженВСистемуХронометража = Истина;
	ЭтотОбъект.Записать();
	УстановитьДоступностьНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступностьНаСервере()
	
	РеквизитДоступен = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ИзменениеВыгруженныхВСистемуХронометражаДокументов"); 
	Если Объект.ВыгруженВСистемуХронометража И Не РеквизитДоступен Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ВыгруженВСистемуХронометража.Доступность = РеквизитДоступен;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеНаФорме(НомерСтроки = Неопределено, ЗаполнятьВозрастнуюГруппу = Истина, МассивСтрокДляЗаполнения = Неопределено)
	
	СтруктураПараметровЗапроса = Новый Структура("СоставУчастников, УчебныйГод, ДатаНачалаСоревнования, ВидСпорта, Организация", 
	     ПроведениеСоревнованийФормыСервер.ПроиндексироватьТаблицуДокумента(Объект,"СоставУчастников"), Объект.УчебныйГод, Объект.ДатаНачалаСоревнования, Объект.ВидСпорта, Объект.Организация);
		 
	Выборка = ПроведениеСоревнованийСлужебныйСервер.ЗаполнитьДополнительныеДанныеНаФорме(СтруктураПараметровЗапроса,НомерСтроки);
	
	ПроверятьНаСтроки = ?(МассивСтрокДляЗаполнения = Неопределено, Ложь, Истина);
		
	Пока Выборка.Следующий() Цикл
		
		Если ПроверятьНаСтроки Тогда
			Если МассивСтрокДляЗаполнения.Найти(Выборка.Индекс) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
				строкаОбъект = Объект.СоставУчастников[Выборка.Индекс];
				ЗаполнитьЗначенияСвойств(строкаОбъект,Выборка,,?(ЗаполнятьВозрастнуюГруппу,"","МеждународнаяВозрастнаяГруппа"));
			// {Рарус dotere #16607 -Проверка на спортсмена из другого учереждения 2021.07.23
			Если Выборка.Спортсмен.СтатусСпортсмена <> Перечисления.СтатусыСпортсменов.СпортсменДругогоСпортивногоУчреждения Тогда

				Если Выборка.Допуск = "ДОПУЩЕН" Тогда
					строкаОбъект.Допуск = Выборка.Допуск + " (действует до " + Формат(Выборка.ДействуетДо,"ДЛФ=Д") + ")";
				ИначеЕсли Выборка.Допуск = "НЕ ДОПУЩЕН" И Выборка.ДействуетДо <= КонецДня(Объект.ДатаНачалаСоревнования) И Выборка.ДействуетДо <> Дата(1,1,1) Тогда
					строкаОбъект.Допуск = "ПРОСРОЧЕН" + " (действует до " + Формат(Выборка.ДействуетДо,"ДЛФ=Д") + ")";
				КонецЕсли;
				// {Рарус adilas #11071 -Ведение страховых полисов спортсмнов 2020.11.18
				Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).СтрахованиеСпортсменовОрганизация Тогда
					   // {Рарус dotere #22112 -Выводит только страховую компанию и номер полиса 2021.11.10
					Если Выборка.НомерСтраховогоПолиса = "без №-" Тогда
						НомерПолиса = "не указан";
					Иначе
						НомерПолиса = СокрЛП(Выборка.НомерСтраховогоПолиса);
					КонецЕсли;
					Если Выборка.СтраховойПолисРегистратор = Документы.СтраховойПолисСпортсмена.ПустаяСсылка() Тогда
						строкаОбъект.СтраховойПолис = "НЕ ВВЕДЕН";
					ИначеЕсли Выборка.ДатаОкончания <= Объект.ДатаНачалаСоревнования Тогда
												строкаОбъект.СтраховойПолис = "ПРОСРОЧЕН " + СокрЛП(Выборка.СтраховаяКомпания) + "; № " + НомерПолиса;
					Иначе
						строкаОбъект.СтраховойПолис = СокрЛП(Выборка.СтраховаяКомпания) + "; № " + НомерПолиса;   
						// }Рарус dotere #22112 -Выводит только страховую компанию и номер полиса 2021.11.10
					КонецЕсли;
				КонецЕсли;
			// }Рарус adilas #11071 -Ведение страховых полисов спортсмнов 2020.11.18
		Иначе
			строкаОбъект.Допуск = "";
		КонецЕсли;
			// }Рарус dotere #16607 -Проверка на спортсмена из другого учереждения 2021.07.23
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УставновитьЗаголовок()
	// {Рарус dotere #20454 -Переименование заголовка 2021.09.17
	ЭтаФорма.Заголовок = "Проводимое соревнование " + ВРег(Объект.Соревнование) + " " + ?(Найти(НРег(Объект.УчебныйГод),"УчебныйГод") = 0 , " учебный год ", "") + ВРег(Объект.УчебныйГод);
	// }Рарус dotere #20454 -Переименование заголовка 2021.09.17

КонецПроцедуры	

&НаКлиенте
Процедура УчебныйГодПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличнуюЧастьНаСервере();
		УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоревнованиеНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличнуюЧастьНаСервере();
		ОткрытьФорму("Справочник.Соревнование.ФормаВыбора",,Элементы.Соревнование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличнуюЧастьНаСервере()
	Объект.СоставУчастников.Очистить();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоСоревнованиюНаСервере()
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда 	
		СоревнованиеОбъектФорма = Объект.Соревнование.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(СоревнованиеОбъектФорма, "СоревнованиеОбъект");
		
		Для Каждого стрВозрастнаяГруппа Из Объект.Соревнование.МеждународныеВозрастныеГруппы Цикл
			Элементы.СоставУчастниковМеждународнаяВозрастнаяГруппа.СписокВыбора.Добавить(стрВозрастнаяГруппа.МеждународнаяВозрастнаяГруппа, стрВозрастнаяГруппа.МеждународнаяВозрастнаяГруппа);
		КонецЦикла;
	КонецЕсли;
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18	
		
КонецПроцедуры	

&НаКлиенте
Процедура ПодобратьСпортсменовДополнительноЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого структураДанных Из Результат Цикл
		строкаСоставУчастников = Объект.СоставУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(строкаСоставУчастников,структураДанных);
		строкаСоставУчастников.GUIDУчастника = строкаСоставУчастников.Спортсмен.УникальныйИдентификатор();
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДополнитьЗаявкойИзФайлаЗавершение(Результат, ДопПараметры) Экспорт

		
КонецПроцедуры	

#Область РаботаСДеревомЗначения

&НаКлиенте
Процедура ЗаполнитьПоЗаявкамДополнительноЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЗаявкамДополнительноНаСервере();
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаявкамДополнительноНаСервере(МассивЗаявок = Неопределено)
	
	Если НЕ МассивЗаявок = Неопределено Тогда
		ОбъектыСоданныеExel = ПоместитьВоВременноеХранилище(МассивЗаявок,Новый УникальныйИдентификатор());		 
	Иначе
		Объект.СоставУчастников.Очистить();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента"         , КонецДня(Объект.ДатаНачалаСоревнования));
	Запрос.УстановитьПараметр("УчебныйГод"            , Объект.УчебныйГод);
	Запрос.УстановитьПараметр("ВидСпорта"             , Объект.ВидСпорта);
	Запрос.УстановитьПараметр("Соревнование"          , Объект.Соревнование);
	Запрос.УстановитьПараметр("ТекущийДокумент"       , Объект.Ссылка);
	Запрос.УстановитьПараметр("СписокВозрастныхГрупп" , Объект.Соревнование.МеждународныеВозрастныеГруппы.ВыгрузитьКолонку("МеждународнаяВозрастнаяГруппа"));
	Запрос.УстановитьПараметр("МассивЗаявок"          , МассивЗаявок);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчастникиСоревнований.Спортсмен КАК Спортсмен,
	               |	УчастникиСоревнований.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
				   |	УчастникиСоревнований.Команда КАК Команда
	               |ПОМЕСТИТЬ ВТ_СписокЗарегестрированныхНаСоревнование
	               |ИЗ
	               |	РегистрСведений.УчастникиСоревнований.СрезПоследних(
	               |			&ДатаДокумента,
	               |				УчебныйГод = &УчебныйГод И ВидСпорта = &ВидСпорта
	               |				И Соревнование = &Соревнование
				   // {Рарус adilas #11701 -Формирование соревнования 2021.01.29
	               |				%3
				   // }Рарус adilas #11701 -Формирование соревнования 2021.01.29
	               |				И Регистратор <> &ТекущийДокумент) КАК УчастникиСоревнований
	               |;                         
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявкиНаПроведениеСоревнования.Спортсмен КАК Спортсмен,
				   |	ЗаявкиНаПроведениеСоревнования.Тренер КАК Тренер,
	               |	ЗаявкиНаПроведениеСоревнования.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
				   |	ЗаявкиНаПроведениеСоревнования.Команда КАК Команда,
	               |	ЗаявкиНаПроведениеСоревнования.Спортсмен.ФизическоеЛицо.Пол КАК Пол,
				   // {Рарус adilas #18019 -Дисциплины 2021.07.07
				   |	ЗаявкиНаПроведениеСоревнования.Дисциплина КАК Дисциплина
				   // }Рарус adilas #18019 -Дисциплины 2021.07.07
	               |ИЗ
	               |	РегистрСведений.ЗаявкиНаПроведениеСоревнования.СрезПоследних(
	               |			&ДатаДокумента,
	               |			УчебныйГод = &УчебныйГод И ВидСпорта = &ВидСпорта
	               |				И Соревнование = &Соревнование
	               |				 %1 %2
	               |				И НЕ (Спортсмен, Команда) В
	               |						(ВЫБРАТЬ
	               |							ВТ_СписокЗарегестрированныхНаСоревнование.Спортсмен,
				   |                            ВТ_СписокЗарегестрированныхНаСоревнование.Команда
	               |						ИЗ
	               |							ВТ_СписокЗарегестрированныхНаСоревнование КАК ВТ_СписокЗарегестрированныхНаСоревнование)) КАК ЗаявкиНаПроведениеСоревнования";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ?(МассивЗаявок = Неопределено, "", " И Регистратор В (&МассивЗаявок) "));
	// {Рарус adilas #11701 -Формирование соревнования 2021.01.29
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ?(МассивЗаявок = Неопределено И УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация, " И МеждународнаяВозрастнаяГруппа В (&СписокВозрастныхГрупп)", ""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%3", ?(УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация, " И МеждународнаяВозрастнаяГруппа В (&СписокВозрастныхГрупп)", ""));
	// }Рарус adilas #11701 -Формирование соревнования 2021.01.29

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаСпортсмен = Объект.СоставУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСпортсмен,Выборка);
		СтрокаСпортсмен.GUIDУчастника = Выборка.Спортсмен.УникальныйИдентификатор();
	КонецЦикла;
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		ЗаполнитьДополнительныеДанныеНаФорме();	
	Иначе
		ЗаполнитьДополнительныеДанныеНаФорме(, Ложь);
	КонецЕсли;	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция ПолучитьПолФизическогоЛица(Спортсмен);
	
	Возврат Спортсмен.ФизическоеЛицо.Пол
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СоставУчастниковДопускОткрытиеОтвет(Результат, ДопПараметры) Экспорт
	
	ДопускРегистратор = ДопПараметры.ДопускРегистратор;
	Спортсмен         = ДопПараметры.Спортсмен;
	НомерСтроки       = ДопПараметры.НомерСтроки;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоказатьЗначение(,ДопускРегистратор);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Оповещение = Новый ОписаниеОповещения("СоставУчастниковДопускОткрытиеОтветЗавершение",ЭтотОбъект, Новый Структура("НомерСтроки",НомерСтроки));
		ОткрытьФорму("Документ.ДопускиУчастниковКСпортивнымСоревнованиям.Форма.ФормаДокумента", Новый Структура("Спортсмен",Спортсмен),,,,,Оповещение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковДопускОткрытиеОтветЗавершение(Результат, ДопПараметры) Экспорт
	
    // {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО().ВозрастныеГруппыОрганизация Тогда
    	ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1);
	Иначе
		ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1, Ложь);
	КонецЕсли;
	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25	
	
КонецПроцедуры	

&НаКлиенте
Процедура СоставУчастниковСтаховойПолисОткрытиеОтвет(Результат, ДопПараметры) Экспорт
	
	// {Рарус adilas #11071 -Ведение страховых полисов спортсмнов 2020.11.18
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО().СтрахованиеСпортсменовОрганизация Тогда
		СтраховойПолисРегистратор = ДопПараметры.СтраховойПолисРегистратор;
		Спортсмен                 = ДопПараметры.Спортсмен;
		НомерСтроки               = ДопПараметры.НомерСтроки;
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			ПоказатьЗначение(,СтраховойПолисРегистратор);
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			Оповещение = Новый ОписаниеОповещения("СоставУчастниковСтаховойПолисОткрытиеОтветЗавершение",ЭтотОбъект, Новый Структура("НомерСтроки",НомерСтроки));
			ОткрытьФорму("Документ.СтраховойПолисСпортсмена.Форма.ФормаДокумента", Новый Структура("Спортсмен",Спортсмен),,,,,Оповещение);
		КонецЕсли;
	КонецЕсли;
	// }Рарус adilas #11071 -Ведение страховых полисов спортсмнов 2020.11.18

КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковСтаховойПолисОткрытиеОтветЗавершение(Результат, ДопПараметры) Экспорт
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО().ВозрастныеГруппыОрганизация Тогда
    	ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1);
	Иначе
		ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1, Ложь);
	КонецЕсли;
	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСозданиеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
	   Объект.УчебныйГод = Результат.УчебныйГодСсылка;
	   УправлениеУчебнымГодомСсылка = Результат.УчебныйГодОбъект;
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	УправлениеУчебнымГодомСсылка = Результат;
    ПолучитьУчебныйГодСсылка();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьУчебныйГодСсылка()
	Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
КонецПроцедуры
// {Рарус dotere #11903 -Выставление подсчета 2021.06.07
&НаКлиенте
Процедура УстановитьВидимостьДоступность()

	Элементы.ТипПодсчетаРезультата.Доступность = Объект.КоличествоПараметров>0;
	Если Объект.КоличествоПараметров > 0 И (Объект.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Булево") ИЛИ Объект.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Число"))  Тогда
		Объект.ТипПодсчетаРезультата = ПредопределенноеЗначение("Перечисление.ТипПодсчетаРезультата.МаксимальноеЗначение");
	ИначеЕсли Объект.КоличествоПараметров > 0 И Объект.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Время") Тогда
		Объект.ТипПодсчетаРезультата = ПредопределенноеЗначение("Перечисление.ТипПодсчетаРезультата.МинимальноеЗначение");
	КонецЕсли;
	
КонецПроцедуры
// }Рарус dotere #11903 -Выставление подсчета 2021.06.07

// {Рарус adilas #18823 -Спортивные дисциплины 2021.07.29
&НаКлиенте
Процедура СпортивнаяДисциплинаПоРееструОткрыть()

	ПараметрыФормыВыбора = Новый Структура;
	
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("Владелец", Объект.ВидСпорта);
	
	Обработчик = Новый ОписаниеОповещения(
		"ПослеВыбораДисциплины", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.СпортивныеДисциплины.ФормаВыбора", ПараметрыФормыВыбора, , , , , Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДисциплины(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.СоставУчастников.ТекущиеДанные;
		ТекущиеДанные.Дисциплина = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПоВидуСпортаНаСервере(Владелец) Экспорт 
	
	Владелец = Объект.ВидСпорта.ВидСпортаПоРеестру;
	
КонецПроцедуры
// }Рарус adilas #18823 -Спортивные дисциплины 2021.07.29

#КонецОбласти

// {Рарус kotana #7847 2020.07.24
//
#Область ЖеребьевкаОбработчикиСобытий

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийПослеУдаления(Элемент)
	
	ВыполнитьПережеребьевку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ВыполнитьПережеребьевку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущаяВозрастнаяГруппа = "";
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Родитель = ТекДанные.ПолучитьРодителя(); 
		Если Родитель = Неопределено Тогда
			ТекущаяВозрастнаяГруппа = ТекДанные.МеждународныеВозрастныеГруппы;
		Иначе
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийПриИзменении(Элемент)
	
	ВыполнитьПережеребьевку();
	
	Для каждого Уроверь из ЖеребьевкаДеревоЗначений.ПолучитьЭлементы() цикл
		Элементы.ЖеребьевкаДеревоЗначений.Развернуть(Уроверь.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ЖеребьевкаСлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьЖеребьевкуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Жеребьевка.Очистить();
		ЖеребьевкаДеревоЗначений.ПолучитьЭлементы().Очистить();
		ЗаполнитьЖеребьевкуПродолжить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеВозрастныеГруппы()
	
	ЗаполненыГруппы = (Объект.Соревнование.МеждународныеВозрастныеГруппы.Количество()>0);
	Возврат ЗаполненыГруппы;
	
КонецФункции

#Область ВычислениеНомеровПозицийЭлементовДереваЖеребьевки
	
&НаСервере
Процедура ЗаполнитьЖеребьевкуПродолжить()
	
	тзВозрастныеГруппы = Объект.Соревнование.МеждународныеВозрастныеГруппы.Выгрузить();
	тзВозрастныеГруппы.Колонки.Добавить("ДатаРожденияНачало" , Новый ОписаниеТипов("Дата"));
	тзВозрастныеГруппы.Колонки.Добавить("Пол"                , Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	тзВозрастныеГруппы.Колонки.Добавить("ПолПредставление"   , Новый ОписаниеТипов("Строка"));
	
	Для Каждого строкаВозрастнаяГруппа_1 Из тзВозрастныеГруппы Цикл
		ГодРожденияНачало = Год(Объект.УчебныйГод.ДатаНачала) - строкаВозрастнаяГруппа_1.МеждународнаяВозрастнаяГруппа.ВозрастОт;
		ДатаРожденияНачало = Дата(ГодРожденияНачало,01,01);
		строкаВозрастнаяГруппа_1.ДатаРожденияНачало = ДатаРожденияНачало;
		строкаВозрастнаяГруппа_1.Пол                = Перечисления.ПолФизическогоЛица.Мужской;
		строкаВозрастнаяГруппа_1.ПолПредставление   = "Юноши";
	КонецЦикла;
	
	Для Каждого строкаВозрастнаяГруппа Из Объект.Соревнование.МеждународныеВозрастныеГруппы Цикл
		строкаВозрастнаяГруппа_2                    = тзВозрастныеГруппы.Добавить();
		строкаВозрастнаяГруппа_2.МеждународнаяВозрастнаяГруппа   = строкаВозрастнаяГруппа.МеждународнаяВозрастнаяГруппа;
		ГодРожденияНачало = Год(Объект.УчебныйГод.ДатаНачала) - строкаВозрастнаяГруппа_2.МеждународнаяВозрастнаяГруппа.ВозрастОт;
		ДатаРожденияНачало = Дата(ГодРожденияНачало,01,01);
		строкаВозрастнаяГруппа_2.ДатаРожденияНачало = ДатаРожденияНачало;
		строкаВозрастнаяГруппа_2.Пол                = Перечисления.ПолФизическогоЛица.Женский;
		строкаВозрастнаяГруппа_2.ПолПредставление   = "Девушки";
	КонецЦикла;
	
	тзВозрастныеГруппы.Сортировать("ДатаРожденияНачало Возр");
	
	ТекущаяВозрастнаяГруппа = Неопределено;
	Для Индекс = 0 По тзВозрастныеГруппы.Количество()-1 Цикл
		строкаЖеребьевка = Объект.Жеребьевка.Добавить();
		ЗаполнитьЗначенияСвойств(строкаЖеребьевка,тзВозрастныеГруппы[Индекс]);
		строкаЖеребьевка.НомерПозицииВГруппе = Индекс + 1;
	КонецЦикла;
	
	ЗаполнитьДеревоНаФорме();
	
	ПроставитьСтартовыеНомера();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПережеребьевку()
	
	НомерПозицииВГруппе = 1;
	
	ДеревоЗначений = РеквизитФормыВЗначение("ЖеребьевкаДеревоЗначений");
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Для Каждого Строки Из СтрокаДерева.Строки Цикл
			Строки.НомерПозицииВГруппе = НомерПозицииВГруппе;
			НомерПозицииВГруппе = НомерПозицииВГруппе + 1;
		КонецЦикла;	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ЖеребьевкаДеревоЗначений");
	
	ОбновитьТаблицуЖеребьевкиПоДеревуЗначений();
	
	ПроставитьСтартовыеНомера();
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеДереваЗначенийЖеребьевки
	
&НаСервере
Процедура ЗаполнитьДеревоНаФорме()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ЖеребьевкаДеревоЗначений");
	
	тзВозрастныеГруппы = Объект.Жеребьевка.Выгрузить();
	тзВозрастныеГруппы.Свернуть("МеждународнаяВозрастнаяГруппа");
	
	Для Каждого стрВозрастнаяГруппа Из тзВозрастныеГруппы Цикл
	    Строки = ДеревоЗначений.Строки.Добавить();
		Строки.МеждународнаяВозрастнаяГруппа = стрВозрастнаяГруппа.МеждународнаяВозрастнаяГруппа;
		массивСтрок = Объект.Жеребьевка.НайтиСтроки(Новый Структура("МеждународнаяВозрастнаяГруппа",стрВозрастнаяГруппа.МеждународнаяВозрастнаяГруппа));
		Для Каждого стрМассив Из массивСтрок Цикл
			строка = Строки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(строка,стрМассив);
		КонецЦикла;	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ЖеребьевкаДеревоЗначений");
	
КонецПроцедуры	

#КонецОбласти

#Область ВычислениеСтартовыхНомеровУчастников

&НаСервере
Процедура ПроставитьСтартовыеНомера()
	
	ТЗЖеребевка = Объект.Жеребьевка.Выгрузить();
	ТЗЖеребевка.Сортировать("НомерПозицииВГруппе Возр");
	
	ТЗУчастников = Объект.СоставУчастников.Выгрузить();
	ТЗУчастников.Колонки.Добавить("Пол");
	
	Для каждого СтрокаУ Из ТЗУчастников Цикл
	
		СтрокаУ.Пол = СтрокаУ.Спортсмен.ФизическоеЛицо.Пол;
	
	КонецЦикла; 
	
	МассивНомеровЖеребьевки = Новый Массив;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Итератор = 1;
	
	Для каждого СтрокаЖеребьевки Из ТЗЖеребевка Цикл
		
		ОтборСтрокГруппаПол = Новый Структура; 
		ОтборСтрокГруппаПол.Вставить("МеждународнаяВозрастнаяГруппа",СтрокаЖеребьевки.МеждународнаяВозрастнаяГруппа);
		ОтборСтрокГруппаПол.Вставить("Пол",СтрокаЖеребьевки.Пол);
		
		ОтобранныеСтрокиСпортсменов =  ТЗУчастников.НайтиСтроки(ОтборСтрокГруппаПол);
		НайденоСтрок = ОтобранныеСтрокиСпортсменов.Количество();
		
		Если НайденоСтрок = 0 Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ВерхняяГраницаГенератора = Итератор+НайденоСтрок-1;
		
		Для каждого НайденнаяСтрока Из ОтобранныеСтрокиСпортсменов Цикл
			
			НовыйНомер  = ГСЧ.СлучайноеЧисло(Итератор,ВерхняяГраницаГенератора);
			
			УжеБылНомер = МассивНомеровЖеребьевки.Найти(НовыйНомер);
			
			Пока УжеБылНомер <> Неопределено Цикл
				
				НовыйНомер  = ГСЧ.СлучайноеЧисло(Итератор,ВерхняяГраницаГенератора);
				УжеБылНомер = МассивНомеровЖеребьевки.Найти(НовыйНомер);
				
			КонецЦикла;
			
			НайденнаяСтрока.СтартовыйНомер = НовыйНомер;
			
			МассивНомеровЖеребьевки.Добавить(НовыйНомер);
			
		КонецЦикла; 
		
		Итератор = ВерхняяГраницаГенератора + ?(ДваСвободныхНомераПослеКаждойГруппы,2,0) +1; //2 запасных номера
	
	КонецЦикла; 
	
	Объект.СоставУчастников.Загрузить(ТЗУчастников);
		
	Сообщить("Стартовые номера участников установлены");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТаблицыЗначенийЖеребьевки
	 
&НаСервере
Процедура ОбновитьТаблицуЖеребьевкиПоДеревуЗначений()
	
	ТЗЖеребьевки = Объект.Жеребьевка.Выгрузить();
	ТЗЖеребьевки.Очистить();
	
	ДЖеребьевки = РеквизитФормыВЗначение("ЖеребьевкаДеревоЗначений");
	
	УчетСпортсменовОбщегоНазначенияКлиентСервер.ПреобразоватьВТЗРекурсия(ДЖеребьевки,ТЗЖеребьевки);
		
	Объект.Жеребьевка.Загрузить(ТЗЖеребьевки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРезультатаПриИзменении(Элемент)
	УстановитьТипПодсчетаРезультата();
	// {Рарус dotere #11903 -Выставление подсчета 2021.06.07
	УстановитьВидимостьДоступность();
	// }Рарус dotere #11903 -Выставление подсчета 2021.06.07
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипПодсчетаРезультата()
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти 
// }Рарус kotana #7847 2020.07.24
