#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// {Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	// {Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	Если РольДоступна("ПолныеПрава") Тогда
		 Элементы.Ответственный.Доступность = Истина;
	Иначе 	 
		 Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
	// }Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	// }Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	
	СформироватьСтруктуруНормативовНаФорме();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
		
		УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
		УправлениеУчебнымГодомСсылка = УчетСпортсменовСервер.ПолучитьДокументТекущегоУчебногоГода();
	    Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда
		ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
		УчетСпортсменовСервер.ЗаполнитьДокументУчебныйГод(ЭтотОбъект, Объект.УчебныйГод, Объект.Организация);
	Иначе
		Если Параметры.Свойство("ТипСоревнования") Тогда
			Объект.ТипСоревнования = Параметры.ТипСоревнования;
			Элементы.ТипСоревнования.ТолькоПросмотр = Истина;
		КонецЕсли;
		УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
		УчетСпортсменовСервер.ЗаполнитьДокументУчебныйГод(ЭтотОбъект, Объект.УчебныйГод, Объект.Организация);
	КонецЕсли;
	
	// {Рарус adilas #13392 -Номер документа 2021.02.12
	Если Пользователи.РолиДоступны("АдминистраторСистемы, ПолныеПрава") Тогда
		Элементы.Номер.Доступность = Истина;
		Элементы.Номер.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	// }Рарус adilas #13392 -Номер документа 2021.02.12
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Нормативы.Форма.ФормаВыбора" Тогда
	    ДобавитьНормативВГотовуюТаблицуНаФорму(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// {Рарус adilas #Возрастные группы в соревновании -11071 2020.12.09
	// Уведомления о страховании							
	ВыполнитьПроверкуПередПроведением();
	
	// }Рарус adilas #Возрастные группы в соревновании -11071 2020.12.09
	
	Если НЕ ПроверитьЗаполнение()Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиСтруктуруНормативовВТаблицуДокумента(Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ПроводитьБезПроверкиНаЗавленных Тогда
		ПроверитьУчастниковПередЗаписью(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.12.09
&НаСервере
Процедура ВыполнитьПроверкуПередПроведением() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСпортсменов"     , СоставУчастниковНаФорме.Выгрузить());
	Запрос.УстановитьПараметр("ДатаДокумент"           , Объект.Дата);
	Запрос.УстановитьПараметр("ВидСпорта"              , Объект.ВидСпорта);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТаблицаСпортсменов.Спортсмен КАК Спортсмен,
	                |	ТаблицаСпортсменов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	                |ПОМЕСТИТЬ ВТ_ТаблицаСпортсменов
	                |ИЗ
	                |	&ТаблицаСпортсменов КАК ТаблицаСпортсменов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	РегистрацияСтраховыхПолисовСпортсменов.Спортсмен КАК Спортсмен
	                |ПОМЕСТИТЬ ВТ_СпортменыСПолисом
	                |ИЗ
	                |	РегистрСведений.РегистрацияСтраховыхПолисовСпортсменов КАК РегистрацияСтраховыхПолисовСпортсменов
	                |ГДЕ
	                |	РегистрацияСтраховыхПолисовСпортсменов.ДатаНачала <= &ДатаДокумент
	                |	И РегистрацияСтраховыхПолисовСпортсменов.ДатаОкончания >= &ДатаДокумент
	                |	И РегистрацияСтраховыхПолисовСпортсменов.Спортсмен В
	                |			(ВЫБРАТЬ
	                |				ВТ_ТаблицаСпортсменов.Спортсмен
	                |			ИЗ
	                |				ВТ_ТаблицаСпортсменов)
	                |	И РегистрацияСтраховыхПолисовСпортсменов.ВидСпорта = &ВидСпорта
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ТаблицаСпортсменов.Спортсмен КАК Спортсмен
	                |ИЗ
	                |	ВТ_ТаблицаСпортсменов КАК ВТ_ТаблицаСпортсменов
	                |ГДЕ
	                |	НЕ ВТ_ТаблицаСпортсменов.Спортсмен В
	                |				(ВЫБРАТЬ
	                |					ВТ_СпортменыСПолисом.Спортсмен
	                |				ИЗ
	                |					ВТ_СпортменыСПолисом)";					
			
	Результат = Запрос.ВыполнитьПакет();
		
		
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).СтрахованиеСпортсменовОрганизация Тогда
		тзСпортсменыБезПолиса = Результат[2].Выгрузить();
		Если НЕ тзСпортсменыБезПолиса.Количество() = 0 Тогда
			Для Каждого строкаСпортсмен Из тзСпортсменыБезПолиса Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У спортсмена %1 отсутствует или просрочен страховой полис.'"),
				строкаСпортсмен.Спортсмен);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.12.09

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура УчебныйГодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодОткрытие(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодОткрытие(УправлениеУчебнымГодомСсылка,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСоздание(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодСоздание(ЭтаФорма, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипСоревнованияПриИзменении(Элемент)
	
	 УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ СоставУчастниковНаФорме.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Заполнить протокол по документу-основанию?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
	Иначе
		
		ДокументОснованиеНачалоВыбораОткрытьФормуВыбораСоревнования();
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастейНаФорме

&НаКлиенте
Процедура СоставУчастниковПриИзменении(Элемент)
	
	ПроведениеСоревнованийФормыКлиент.ПронумероватьТаблицуНаФорме(СоставУчастниковНаФорме);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковНаФормеСпортсменПриИзменении(Элемент)
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	ЗаполнитьДополнительныеДанныеНаФорме((ТекДанные.НомерСтроки-1),Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковезультатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	
	Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
	
	ТекДанные["Выбор_" + Гуид] = Истина;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные["Норматив_" + Гуид]) Тогда
		массивСтрока_ = ТаблицаРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиЗаявленногоНорматива",СтрЗаменить(Гуид,"_","-")));
		ТекДанные["Норматив_" + Гуид] = массивСтрока_[0].Норматив;
		ТекДанные["ТипРезультата_" + Гуид] = ПолучитьТипРезультата(массивСтрока_[0].Норматив);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид]) Тогда
		ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид] = СтрЗаменить(Гуид,"_","")+"_"+ СокрЛП(Новый УникальныйИдентификатор());
	КонецЕсли;	
		
	ВнестиРезультатыПопытокПоНормативу(ТекДанные, Гуид);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковВыборПриИзменении(Элемент)
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	
	Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
		
	Если ТекДанные["Выбор_" + Гуид] И НЕ ЗначениеЗаполнено(ТекДанные["Норматив_" + Гуид]) Тогда
		УстановитьЗначенияРеквизитовНормативаПриИзменении(ТекДанные, Гуид);
	Иначе
		ТекДанные["Норматив_" + Гуид] = "";
		ТекДанные["ТипРезультата_" + Гуид] = "";
		массивСтрокПопыток = ПопыткиНаФорме.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива",ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид]));
		Для Каждого СтрокаПопытка Из массивСтрокПопыток Цикл
			ПопыткиНаФорме.Удалить(СтрокаПопытка);
		КонецЦикла;
		ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид] = "";
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СоставУчастниковРезультатОчистка(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	
	Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
	
	массивСтрокПопыток = ПопыткиНаФорме.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива",ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид]));
	Для Каждого СтрокаПопытка Из массивСтрокПопыток Цикл
		ПопыткиНаФорме.Удалить(СтрокаПопытка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаДобавитьНорматив(Команда) Экспорт
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Нормативы.ФормаВыбора",ПараметрыПодбора,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьНорматив(Команда) Экспорт
	
	КомандаУдалитьНормативНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьМестаИБаллы(Команда)
	
	Элементы.СоставУчастниковПересчитатьМестаИБаллы.Доступность = Ложь;
	
	Состояние("Выполняется подсчет результатов....");
	
	ПересчитатьМестаИБаллыНаСервере();
	Элементы.СоставУчастниковПересчитатьМестаИБаллы.Доступность = Истина;
	
	Состояние("Подсчет результатов выполнен.");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыделитьВсе(Команда) Экспорт
	
	ПроведениеСоревнованийФормыКлиент.ВыделитьВсехУчастниковНаФорме(ЭтотОбъект, "ТаблицаРазбора", "УникальныйИдентификаторСтрокиЗаявленногоНорматива");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВсе(Команда) Экспорт
	
	ПроведениеСоревнованийФормыКлиент.УбратьВыделениеВсехУчастниковНаФорме(ЭтотОбъект, "ТаблицаРазбора", "УникальныйИдентификаторСтрокиЗаявленногоНорматива");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеСтруктурыРеквизитовНаФорме

&НаСервере
Процедура СформироватьСтруктуруНормативовНаФорме(ЗаполнениеПоКоманде = Ложь)
	
	таблицаДляРазбора = Объект.ЗаявленныеНормативы.Выгрузить();
	Для Каждого СтрокаНорматив Из таблицаДляРазбора Цикл
		СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива, "-", "_");
	КонецЦикла;	
	
	СоставУчастников = Объект.СоставУчастников.Выгрузить();
	СоставУчастников.Свернуть("Спортсмен, МеждународнаяВозрастнаяГруппа");
	СоставУчастниковНаФорме.Загрузить(СоставУчастников);
	
	Для Индекс = 0 По ЭтотОбъект.СоставУчастниковНаФорме.Количество()-1 Цикл
		СоставУчастниковНаФорме[Индекс].НомерСтроки = Индекс+1;
	КонецЦикла;
	
	массивТипов = Новый Массив;
	массивТипов.Добавить(Тип("Число"));
	массивТипов.Добавить(Тип("Строка"));
	
	НовыеРеквизиты = Новый Массив;	
	Для Каждого СтрокаНорматив Из таблицаДляРазбора Цикл
		гуид = СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива;
		ДобавитьРеквизитыФормыПоЗначениюНорматива(НовыеРеквизиты, гуид, массивТипов);
		СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива = гуид;
	КонецЦикла;
	
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	Для Каждого СтрокаНорматив Из таблицаДляРазбора Цикл
		
		ВыделятьЦветом = НЕ ВыделятьЦветом; 
		
		ГруппаНорматив                          = Элементы.Добавить("Группа" + СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ГруппаФормы"), Элементы.ГруппаНормативы);	
        ГруппаНорматив.Заголовок                = СокрЛП(СтрокаНорматив.Норматив);
		ГруппаНорматив.ОтображатьВШапке         = Истина;
		ГруппаНорматив.Вид                      = ВидГруппыФормы.ГруппаКолонок;
		ГруппаНорматив.Группировка              = ГруппировкаКолонок.Горизонтальная;
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		ГруппаНорматив.ШрифтЗаголовка           = ШрифтыСтиля.ОбычныйШрифт13;
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	   
	    ДобавитьКолонкиПоЗначениюНорматива(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива, ГруппаНорматив, ВыделятьЦветом);
			
	КонецЦикла;
	
	Если НЕ ЗаполнениеПоКоманде Тогда
		
		КомандаДобавитьНорматив                     = Команды.Добавить("ДобавитьНорматив");
		КомандаДобавитьНорматив.Заголовок           = "Добавить норматив";
		КомандаДобавитьНорматив.Действие            = "КомандаДобавитьНорматив";
		КомандаДобавитьНорматив.Картинка            = БиблиотекаКартинок.ДобавитьСтраницу;
		КомандаДобавитьНорматив.Отображение         = ОтображениеКнопки.КартинкаИТекст;
		
		КомандаУдалитьНорматив                      = Команды.Добавить("УдалитьНорматив");
		КомандаУдалитьНорматив.Заголовок            = "Удалить норматив";
		КомандаУдалитьНорматив.Действие             = "КомандаУдалитьНорматив";
		КомандаУдалитьНорматив.Картинка             = БиблиотекаКартинок.ВнешняяКомпонентаНеДоступна;
		КомандаУдалитьНорматив.Отображение          = ОтображениеКнопки.КартинкаИТекст;
		
		КомандаВыделитьВсех                         = Команды.Добавить("ВыделитьВсе");
		КомандаВыделитьВсех.Заголовок               = "Выделить все";
		КомандаВыделитьВсех.Действие                = "КомандаВыделитьВсе";
		КомандаВыделитьВсех.Картинка                = БиблиотекаКартинок.УстановитьФлажки;
		КомандаВыделитьВсех.Отображение             = ОтображениеКнопки.Картинка;
		
		КомандаУдалитьВсех                          = Команды.Добавить("УдалитьВсе");
		КомандаУдалитьВсех.Заголовок                = "Удалить все";
		КомандаУдалитьВсех.Действие                 = "КомандаУдалитьВсе";
		КомандаУдалитьВсех.Картинка                 = БиблиотекаКартинок.СнятьФлажки;
		КомандаУдалитьВсех.Отображение              = ОтображениеКнопки.Картинка;
		
		КнопкаДобавитьНорматив                      = Элементы.Добавить("ДобавитьНорматив", Тип("КнопкаФормы"),Элементы.СоставУчастниковКоманднаяПанель);
		КнопкаДобавитьНорматив.ИмяКоманды           = "ДобавитьНорматив";
		КнопкаДобавитьНорматив.Вид                  = ВидКнопкиФормы.КнопкаКоманднойПанели;
		
		КнопкаВыделитьВсех                          = Элементы.Добавить("ВыделитьВсе", Тип("КнопкаФормы"),Элементы.ГруппаВыделитьУдалитьВсе);
		КнопкаВыделитьВсех.ИмяКоманды               = "ВыделитьВсе";
		КнопкаВыделитьВсех.Вид                      = ВидКнопкиФормы.КнопкаКоманднойПанели;
		
		КнопкаУдалитьВсех                           = Элементы.Добавить("УдалитьВсе", Тип("КнопкаФормы"),Элементы.ГруппаВыделитьУдалитьВсе);
		КнопкаУдалитьВсех.ИмяКоманды                = "УдалитьВсе";
		КнопкаУдалитьВсех.Вид                       = ВидКнопкиФормы.КнопкаКоманднойПанели;
		
		КнопкаДобавитьНормативКнтМеню               = Элементы.Добавить("СоставУчастниковКонтекстноеМенюДобавитьНорматив", Тип("КнопкаФормы"), Элементы.СоставУчастниковКонтекстноеМеню);
		КнопкаДобавитьНормативКнтМеню.ИмяКоманды    = "ДобавитьНорматив";
		
		КнопкаУдалитьНормативКнтМеню                = Элементы.Добавить("СоставУчастниковКонтекстноеМенюУдалитьНорматив", Тип("КнопкаФормы"), Элементы.СоставУчастниковКонтекстноеМеню);
		КнопкаУдалитьНормативКнтМеню.ИмяКоманды     = "УдалитьНорматив";
		
	КонецЕсли;
	
	ЗаполнитьПолученнуюСтруктураИзОбъекта(таблицаДляРазбора);
	
	ТаблицаРазбора.Загрузить(таблицаДляРазбора);
	Для Каждого СтрокаНорматив Из ТаблицаРазбора Цикл
		СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива, "_", "-");
	КонецЦикла;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиПоЗначениюНорматива(УникальныйИдентификаторСтрокиЗаявленногоНорматива, ГруппаНорматив, ВыделятьЦветом) 
	   
	ДобавитьЭлемент("СоставУчастниковНорматив_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, "СоставУчастниковНаФорме." + "Норматив_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Ложь, ВыделятьЦветом);
	
	ДобавитьЭлемент("СоставУчастниковВыбор_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеФлажка, 
	  "СоставУчастниковНаФорме." + "Выбор_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, 
	  Истина,
	  ВыделятьЦветом, 
	  Ложь,
	  Новый Структура("ИмяСобытия,НаименованиеПроцедуры","ПриИзменении", "СоставУчастниковВыборПриИзменении"));
	
	ДобавитьЭлемент("СоставУчастниковРезультатЧисло_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, "СоставУчастниковНаФорме." + "РезультатЧисло_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Ложь, ВыделятьЦветом);
	
	ДобавитьЭлемент("СоставУчастниковРезультатБулево_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеФлажка, "СоставУчастниковНаФорме." + "РезультатБулево_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Ложь, ВыделятьЦветом);
		
	ДобавитьЭлемент("СоставУчастниковРезультат_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, 
	   "СоставУчастниковНаФорме." + "Результат_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, 
	   Истина, 
	   ВыделятьЦветом,
	   Истина,
	   Новый Структура("ИмяСобытия,НаименованиеПроцедуры","НачалоВыбора", "СоставУчастниковезультатНачалоВыбора"),
	   Ложь);
	
	ДобавитьЭлемент("СоставУчастниковОчки_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, 
	   "СоставУчастниковНаФорме." + "Очки_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, 
	   ?(Объект.ТипСоревнования = Перечисления.ТипыСдачиНормативов.Соревнование, Истина, Ложь), 
	   ВыделятьЦветом,,,,
	   Истина);
	
	ДобавитьЭлемент("СоставУчастниковБаллы_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, 
	   "СоставУчастниковНаФорме." + "Баллы_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, 
	   ?(Объект.ТипСоревнования = Перечисления.ТипыСдачиНормативов.Норматив, Истина, Ложь), 
	   ВыделятьЦветом,,,,
	   Истина);
	
	ДобавитьЭлемент("СоставУчастниковМесто_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, 
	   "СоставУчастниковНаФорме." + "Место_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, 
	   ?(Объект.ТипСоревнования = Перечисления.ТипыСдачиНормативов.Соревнование, Истина, Ложь), 
	   ВыделятьЦветом,,,,
	   Истина);
	   
	ДобавитьЭлемент("СоставУчастниковТренер_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, "СоставУчастниковНаФорме." + "Тренер_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Истина, ВыделятьЦветом);   
		
	ДобавитьЭлемент("СоставУчастниковТипРезультата_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеФлажка, "СоставУчастниковНаФорме." + "ТипРезультата_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Ложь, ВыделятьЦветом);
	
	ДобавитьЭлемент("СоставУчастниковУникальныйИдентификаторСтрокиНорматива_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, Тип("ПолеФормы"), ГруппаНорматив,
	    ВидПоляФормы.ПолеВвода,
		"СоставУчастниковНаФорме." + "УникальныйИдентификаторСтрокиНорматива_" + УникальныйИдентификаторСтрокиЗаявленногоНорматива, 
		Ложь, 
		ВыделятьЦветом);
	  
КонецПроцедуры	

&НаСервере
Процедура ДобавитьРеквизитыФормыПоЗначениюНорматива(НовыеРеквизиты, гуид, массивТипов)
	
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Норматив_" + гуид               , Новый ОписаниеТипов("СправочникСсылка.Нормативы")               , "СоставУчастниковНаФорме"        , "Норматив"                               , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Тренер_" + гуид                 , Новый ОписаниеТипов("СправочникСсылка.Тренеры")                 , "СоставУчастниковНаФорме"        , "Тренер"                                 , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("ТипРезультата_" + гуид          , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРезультатов")       , "СоставУчастниковНаФорме"        , "ТипыРезультатов"                        , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Выбор_" + гуид                  , Новый ОписаниеТипов("Булево")                                   , "СоставУчастниковНаФорме"        , "Используется"                           , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("РезультатЧисло_" + гуид         , Новый ОписаниеТипов("Число")                                    , "СоставУчастниковНаФорме"        , "РезультатЧисло"                         , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("РезультатБулево_" + гуид        , Новый ОписаниеТипов("Булево")                                   , "СоставУчастниковНаФорме"        , "РезультатБулево"                        , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Результат_" + гуид              , Новый ОписаниеТипов(массивТипов)                                , "СоставУчастниковНаФорме"        , "Результат"                              , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Очки_" + гуид                   , Новый ОписаниеТипов("Число")                                    , "СоставУчастниковНаФорме"        , "Очки"                                   , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Баллы_" + гуид                  , Новый ОписаниеТипов("Число")                                    , "СоставУчастниковНаФорме"        , "Балл"                                   , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Место_" + гуид                  , Новый ОписаниеТипов("Число")                                    , "СоставУчастниковНаФорме"        , "Место"                                  , Истина));
	
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("УникальныйИдентификаторСтрокиНорматива_" + гуид  , Новый ОписаниеТипов("Строка")  , "СоставУчастниковНаФорме"        , "УникальныйИдентификаторСтрокиНорматива" , Истина));
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПолученнуюСтруктураИзОбъекта(ТаблицаНормативов)
	
	ТаблицаПопытокДляЗапроса = Новый ТаблицаЗначений;
	ТаблицаПопытокДляЗапроса.Колонки.Добавить("Гуид", Новый ОписаниеТипов("Строка"));
	ТаблицаПопытокДляЗапроса.Колонки.Добавить("УникальныйИдентификаторСтрокиНорматива", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаНорматив Из ТаблицаНормативов Цикл
		массивСтрокСоставУчастников = Объект.СоставУчастников.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиЗаявленногоНорматива", СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива,"_","-")));
		
		Гуид = СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива;
		ТипРезультата = СтрокаНорматив.Норматив.ТипРезультата;
		
		Для Каждого СтрокаСоставУчастников Из массивСтрокСоставУчастников Цикл
			массивСтрокТаблицаСоставаУчастников = СоставУчастниковНаФорме.НайтиСтроки(Новый Структура("Спортсмен,МеждународнаяВозрастнаяГруппа",СтрокаСоставУчастников.Спортсмен, СтрокаСоставУчастников.МеждународнаяВозрастнаяГруппа));
			
			Для Каждого строкаТаблицаСоставаУчастников Из массивСтрокТаблицаСоставаУчастников Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаСоставУчастников.УникальныйИдентификаторСтрокиНорматива)Тогда
					СтрокаСоставУчастников.УникальныйИдентификаторСтрокиНорматива = СокрЛП(Новый УникальныйИдентификатор());
				КонецЕсли;	
				
				строкаТаблицаСоставаУчастников["УникальныйИдентификаторСтрокиНорматива_" + Гуид] = СтрЗаменить(Гуид,"_","")+"_"+СтрокаСоставУчастников.УникальныйИдентификаторСтрокиНорматива;
				
				Если ЗначениеЗаполнено(СтрокаСоставУчастников.Норматив) Тогда
					
					строкаТаблицаСоставаУчастников["Норматив_" + Гуид] = СтрокаНорматив.Норматив;
					строкаТаблицаСоставаУчастников["Выбор_" + Гуид] = Истина;
					
					строкаПопытокДляЗапроса = ТаблицаПопытокДляЗапроса.Добавить();
					строкаПопытокДляЗапроса.Гуид   = Гуид;
					строкаПопытокДляЗапроса.УникальныйИдентификаторСтрокиНорматива = СтрокаСоставУчастников.УникальныйИдентификаторСтрокиНорматива;
					
				КонецЕсли;
				
				строкаТаблицаСоставаУчастников.СтартовыйНомер             = СтрокаСоставУчастников.СтартовыйНомер;
				строкаТаблицаСоставаУчастников["Тренер_" + Гуид]          = СтрокаСоставУчастников.Тренер;
				строкаТаблицаСоставаУчастников["ТипРезультата_" + Гуид]   = ТипРезультата;
				строкаТаблицаСоставаУчастников["РезультатБулево_" + Гуид] = СтрокаСоставУчастников.РезультатБулево;
				строкаТаблицаСоставаУчастников["Место_" + Гуид]           = СтрокаСоставУчастников.Место;
				строкаТаблицаСоставаУчастников["Очки_" + Гуид]            = СтрокаСоставУчастников.Очки;
				строкаТаблицаСоставаУчастников["Баллы_" + Гуид]           = СтрокаСоставУчастников.Баллы;
				строкаТаблицаСоставаУчастников["РезультатЧисло_" + Гуид]  = Формат(СтрокаСоставУчастников.РезультатЧисло, "ЧН=0");
				Если ТипРезультата = Перечисления.ТипыРезультатов.Булево Тогда
					строкаТаблицаСоставаУчастников["Результат_" + Гуид]   = ?(СтрокаСоставУчастников.РезультатБулево, "Выполнил", "Не выполнил");
				ИначеЕсли ТипРезультата = Перечисления.ТипыРезультатов.Время Тогда
					строкаТаблицаСоставаУчастников["Результат_" + Гуид]   = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(СтрокаСоставУчастников.РезультатЧисло);
				Иначе
					строкаТаблицаСоставаУчастников["Результат_" + Гуид]   = Формат(СтрокаСоставУчастников.РезультатЧисло, "ЧН=0");;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЦикла;
		
	Если ТаблицаПопытокДляЗапроса.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("таблицаНаФорме", ТаблицаПопытокДляЗапроса);
		Запрос.УстановитьПараметр("ТаблицаПопытокДокумента", Объект.Попытки.Выгрузить());
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		ТекстОбщий  = "";
		// {Рарус adilas #- -Sonar 2021.06.29
		УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
		  ТекстОбщий,
		  Новый Структура("Гуид,УникальныйИдентификаторСтрокиНорматива"),
		  "ВТ_ТаблицаДляЗапроса",
		  "таблицаНаФорме");
		
		ТекстОбщий = ТекстОбщий + Символы.ПС + ";" + Символы.ПС;
		// {Рарус adilas #- -Sonar 2021.06.29
		УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
		  ТекстОбщий,
		  Новый Структура("НомерПопытки,УникальныйИдентификаторСтрокиНорматива,СостояниеПопытки,РезультатЧисло,РезультатБулево"),
		  "ВТ_Попытки",
		  "ТаблицаПопытокДокумента");
				
		Запрос.Текст =  ТекстОбщий + "
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ВТ_ТаблицаДляЗапроса.Гуид КАК Гуид,
		                |	ВТ_ТаблицаДляЗапроса.УникальныйИдентификаторСтрокиНорматива КАК УникальныйИдентификаторСтрокиНорматива,
		                |	ВТ_Попытки.НомерПопытки КАК НомерПопытки,
						|	ВТ_Попытки.РезультатЧисло КАК РезультатЧисло,
						|	ВТ_Попытки.РезультатБулево КАК РезультатБулево,
		                |	ВТ_Попытки.СостояниеПопытки КАК СостояниеПопытки
		                |ИЗ
		                |	ВТ_ТаблицаДляЗапроса КАК ВТ_ТаблицаДляЗапроса
		                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Попытки КАК ВТ_Попытки
		                |		ПО ((ВЫРАЗИТЬ(ВТ_ТаблицаДляЗапроса.УникальныйИдентификаторСтрокиНорматива КАК СТРОКА(36))) = (ВЫРАЗИТЬ(ВТ_Попытки.УникальныйИдентификаторСтрокиНорматива КАК СТРОКА(36))))
		                |ГДЕ
		                |	ВЫРАЗИТЬ(ВТ_ТаблицаДляЗапроса.УникальныйИдентификаторСтрокиНорматива КАК Строка(36)) <> ВЫРАЗИТЬ(&ПустаяСтрока КАК Строка(36))";
		
		ВыборкаПопытки = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПопытки.Следующий() Цикл
			
			строкаПопыткаНаФорме = ПопыткиНаФорме.Добавить();
			ЗаполнитьЗначенияСвойств(строкаПопыткаНаФорме,ВыборкаПопытки);
			строкаПопыткаНаФорме.УникальныйИдентификаторСтрокиНорматива = СтрЗаменить(ВыборкаПопытки.Гуид,"_","")+"_"+ВыборкаПопытки.УникальныйИдентификаторСтрокиНорматива;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВсеКолонкиНормативовНаФорме()
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого строкаНорматив Из ТаблицаРазбора Цикл
		
		УникальныйИдентификаторНорматива = СтрЗаменить(строкаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива,"-","_");
			
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Выбор_"           + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Норматив_"        + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Тренер_"          + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатБулево_" + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатЧисло_"  + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Результат_"       + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Место_"           + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Очки_"            + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Баллы_"           + УникальныйИдентификаторНорматива);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.ТипРезультата_"   + УникальныйИдентификаторНорматива);
		
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.УникальныйИдентификаторСтрокиНорматива_"   + УникальныйИдентификаторНорматива);
		
		Элементы.Удалить(Элементы["СоставУчастниковНорматив_"             + УникальныйИдентификаторНорматива]);
		Элементы.Удалить(Элементы["СоставУчастниковВыбор_"                + УникальныйИдентификаторНорматива]);
		Элементы.Удалить(Элементы["Группа"                                + УникальныйИдентификаторНорматива]);
			
	КонецЦикла;
	
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
	ПопыткиНаФорме.Очистить();
	СоставУчастниковНаФорме.Очистить();
	ТаблицаРазбора.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормированиеНормативов

&НаСервере
Процедура ДобавитьНормативВГотовуюТаблицуНаФорму(ВыбранныеНормативы) Экспорт
	
	таблицаДобавленныхНормативов = ТаблицаРазбора.Выгрузить();
	таблицаДобавленныхНормативов.Очистить();
	                                                        
	массивТипов = Новый Массив;
	массивТипов.Добавить(Тип("Число"));
	массивТипов.Добавить(Тип("Строка"));
	
	НовыеРеквизиты = Новый Массив;	
	Для Каждого Норматив Из ВыбранныеНормативы Цикл
		
		УникальныйИдентификаторНорматива = СокрЛП(Новый УникальныйИдентификатор());
		ДобавитьРеквизитыФормыПоЗначениюНорматива(НовыеРеквизиты, СтрЗаменить(УникальныйИдентификаторНорматива,"-","_"), массивТипов);
		
		строкаДобавленныхНормативов = таблицаДобавленныхНормативов.Добавить();
		строкаДобавленныхНормативов.Норматив = Норматив;
		строкаДобавленныхНормативов.УникальныйИдентификаторСтрокиЗаявленногоНорматива = УникальныйИдентификаторНорматива;
		
		строкаДляРазбора = ТаблицаРазбора.Добавить();
		ЗаполнитьЗначенияСвойств(строкаДляРазбора,строкаДобавленныхНормативов);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	Для Каждого СтрокаНорматив Из таблицаДобавленныхНормативов Цикл
		
		ВыделятьЦветом = НЕ ВыделятьЦветом;
		
		Гуид = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива,"-","_");
		
		ГруппаНорматив                          = Элементы.Добавить("Группа" + Гуид, Тип("ГруппаФормы"), Элементы.ГруппаНормативы);	
        ГруппаНорматив.Заголовок                = Строка(СтрокаНорматив.Норматив);
		ГруппаНорматив.ОтображатьВШапке         = Истина;
		ГруппаНорматив.Вид                      = ВидГруппыФормы.ГруппаКолонок;
		ГруппаНорматив.Группировка              = ГруппировкаКолонок.Горизонтальная;
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		ГруппаНорматив.ШрифтЗаголовка           = ШрифтыСтиля.ОбычныйШрифт13;
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		ДобавитьКолонкиПоЗначениюНорматива(Гуид, ГруппаНорматив, ВыделятьЦветом);
		
	КонецЦикла;
	
	ЗаполнитьПолученнуюСтруктураИзОбъекта(таблицаДобавленныхНормативов);	
	
КонецПроцедуры

&НаСервере
Процедура КомандаУдалитьНормативНаСервере()
	
	ТекущийЭлемент = ЭтотОбъект.Элементы.СоставУчастников.ТекущийЭлемент;
	
	Если Найти(ТекущийЭлемент.Имя, "_") = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран норматив для удаления.
		|Выделите колонку с нормативом, которую необходимо удалить и повторите команду.");
		Возврат;
		
	Иначе
		
		Гуид = Сред(ТекущийЭлемент.Имя,Найти(ТекущийЭлемент.Имя,"_")+1);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Выбор_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Норматив_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.ТипРезультата_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатЧисло_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатБулево_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Результат_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Очки_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Баллы_" + Гуид);
		МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Место_" + Гуид);
		
		ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
		
		Для Каждого ПодчиненныйЭлемент Из Элементы["Группа" + Гуид].ПодчиненныеЭлементы Цикл
			УдалитьЭлемент(ПодчиненныйЭлемент.Имя);
		КонецЦикла;	
		
		УдалитьЭлемент("Группа" + Гуид);
		
		массивСтрокДляУдаления = ТаблицаРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиЗаявленногоНорматива",гуид));
		Для Каждого строкаДляУдаления Из массивСтрокДляУдаления Цикл
			ЭтотОбъект.ТаблицаРазбора.Удалить(строкаДляУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияРеквизитовНормативовПриИзменении

&НаКлиенте
Процедура УстановитьЗначенияРеквизитовНормативаПриИзменении(ТекДанные, Гуид)
	
	массивСтрока_ = ТаблицаРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиЗаявленногоНорматива",СтрЗаменить(Гуид,"_","-")));
	ТекДанные["Норматив_" + Гуид] = массивСтрока_[0].Норматив;
	ТекДанные["ТипРезультата_" + Гуид] = ПолучитьТипРезультата(массивСтрока_[0].Норматив);
	
	Если НЕ ЗначениеЗаполнено(ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид]) Тогда
		ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид] = СтрЗаменить(Гуид,"_","")+"_"+ СокрЛП(Новый УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиПопытокПоГуиду(УникальныйИдентификаторСтрокиНорматива)
	
	строкиТаблицыПопытокДляЗамены = ПопыткиНаФорме.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива", УникальныйИдентификаторСтрокиНорматива));
	Для Каждого строкаТаблицыПопытокДлязамены Из строкиТаблицыПопытокДляЗамены Цикл
		ПопыткиНаФорме.Удалить(строкаТаблицыПопытокДляЗамены);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьТипРезультата(Норматив)
	Возврат Норматив.ТипРезультата
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ОтображатьБаллы = ?(Объект.ТипСоревнования = ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Норматив"), Истина, Ложь);
	ОтображатьОчки  = ?(Объект.ТипСоревнования = ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Соревнование"), Истина, Ложь);
	
	Для Каждого СтрокаНорматив Из ТаблицаРазбора Цикл
		Гуид = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива,"-","_");
		Элементы["СоставУчастниковОчки_"+Гуид].Видимость  = ОтображатьОчки;
		Элементы["СоставУчастниковМесто_"+Гуид].Видимость = ОтображатьОчки;
		Элементы["СоставУчастниковБаллы_"+Гуид].Видимость = ОтображатьБаллы;
	КонецЦикла;
	
	ПроведениеСоревнованийФормыКлиент.СформироватьЗаголовокФормыДокумента(ЭтотОбъект, "ПротоколОФПСдачаНормативов");
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьЭлемент(ИмяЭлемента)
	
	Элементы.Удалить(Элементы[ИмяЭлемента]);
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьЭлемент(ИмяЭлемента, ТипЭлемента, Родитель, Вид, ПутьКДанным, Видимость, ВыделятьЦветом, Заголовок = Истина, Действие = Неопределено, ДоступноРедактирование = Истина, ПредставлениеНуля = Ложь)
	
	НовыйЭлементНорматив                    = Элементы.Добавить(ИмяЭлемента, ТипЭлемента, Родитель); 
    НовыйЭлементНорматив.Вид                = Вид; 
    НовыйЭлементНорматив.ПутьКДанным        = ПутьКДанным;
    НовыйЭлементНорматив.Видимость          = Видимость;
	Если ВыделятьЦветом Тогда
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		НовыйЭлементНорматив.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
		НовыйЭлементНорматив.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	КонецЕсли;
	Если НЕ Заголовок Тогда
		НовыйЭлементНорматив.Заголовок = " ";
	КонецЕсли;
	Если НЕ Действие = Неопределено Тогда
		НовыйЭлементНорматив.УстановитьДействие(Действие.ИмяСобытия, Действие.НаименованиеПроцедуры);
	КонецЕсли;
	Если НЕ ДоступноРедактирование Тогда
		НовыйЭлементНорматив.РедактированиеТекста = Ложь;
		НовыйЭлементНорматив.КнопкаОчистки = Истина;
		НовыйЭлементНорматив.УстановитьДействие("Очистка", "СоставУчастниковРезультатОчистка");
	КонецЕсли;
	Если ПредставлениеНуля Тогда
		НовыйЭлементНорматив.Формат = "ЧН=0";
	КонецЕсли;	
	
КонецПроцедуры

#Область ОбработкаДанныхНаФорме

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеНаФорме(НомерСтроки = Неопределено, ЗаполнятьДопДанные = Истина, МассивСтрокДляЗаполнения = Неопределено)
	
	СтруктураПараметровЗапроса = Новый Структура("СоставУчастников, УчебныйГод, ДатаПроведения, ВидСпорта, Организация", 
	     ПроведениеСоревнованийФормыСервер.ПроиндексироватьТаблицуДокумента(ЭтотОбъект,"СоставУчастниковНаФорме"), Объект.УчебныйГод, Объект.Дата, Объект.ВидСпорта, Объект.Организация);
		 
	Выборка = ПроведениеСоревнованийСлужебныйСервер.ЗаполнитьДополнительныеДанныеНаФорме(СтруктураПараметровЗапроса,НомерСтроки);
	
	ПроверятьНаСтроки = ?(МассивСтрокДляЗаполнения = Неопределено, Ложь, Истина);
		
	Пока Выборка.Следующий() Цикл
		
		Если ПроверятьНаСтроки Тогда
			Если МассивСтрокДляЗаполнения.Найти(Выборка.Индекс) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СоставУчастниковНаФорме[Выборка.Индекс],Выборка,,?(НЕ ЗаполнятьДопДанные, "МеждународнаяВозрастнаяГруппа",""));
		
		Если ЗаполнятьДопДанные Тогда
			Для Каждого СтрокаНорматив Из ТаблицаРазбора Цикл
				СоставУчастниковНаФорме[Выборка.Индекс]["Тренер_" + СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива] = Выборка.Тренер; 
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСтруктуруНормативовВТаблицуДокумента(Отказ, ПараметрыЗаписи)
	
	Объект.СоставУчастников.Очистить();
	Объект.ЗаявленныеНормативы.Очистить();
	Объект.Попытки.Очистить();
	
	Для Каждого СтрокаНорматив Из ТаблицаРазбора Цикл
		
		Гуид = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива,"-","_");
		
		Для Каждого СтрокаСоставУчастниковНаФорме Из СоставУчастниковНаФорме Цикл
			строкаСоставУчастников = Объект.СоставУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСоставУчастников,СтрокаСоставУчастниковНаФорме);
			строкаСоставУчастников.УникальныйИдентификаторСтрокиНорматива = Сред(СтрокаСоставУчастниковНаФорме["УникальныйИдентификаторСтрокиНорматива_"+Гуид],Найти(СтрокаСоставУчастниковНаФорме["УникальныйИдентификаторСтрокиНорматива_"+Гуид],"_")+1);
			Если СтрокаСоставУчастниковНаФорме["Выбор_" + Гуид] Тогда
				строкаСоставУчастников.Норматив = СтрокаНорматив.Норматив;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(строкаСоставУчастников,СтрокаСоставУчастниковНаФорме);
			строкаСоставУчастников.УникальныйИдентификаторСтрокиЗаявленногоНорматива = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива,"_","-");
			строкаСоставУчастников.Тренер = СтрокаСоставУчастниковНаФорме["Тренер_" + Гуид];
			строкаСоставУчастников.РезультатЧисло = СтрокаСоставУчастниковНаФорме["РезультатЧисло_" + Гуид];
			строкаСоставУчастников.РезультатБулево = СтрокаСоставУчастниковНаФорме["РезультатБулево_" + Гуид];
			строкаСоставУчастников.Место = СтрокаСоставУчастниковНаФорме["Место_" + Гуид];
			строкаСоставУчастников.Баллы = СтрокаСоставУчастниковНаФорме["Баллы_" + Гуид];
			строкаСоставУчастников.Очки = СтрокаСоставУчастниковНаФорме["Очки_" + Гуид];
		КонецЦикла;
		
		строкаЗаявленныйНорматив = Объект.ЗаявленныеНормативы.Добавить();
		ЗаполнитьЗначенияСвойств(строкаЗаявленныйНорматив,СтрокаНорматив);
		строкаЗаявленныйНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива,"_","-");
		
	КонецЦикла;
	
	Для Каждого СтрокаПопыткаНаФорме Из ПопыткиНаФорме Цикл
		Если СтрокаПопыткаНаФорме.НомерПопытки = 0 И (НЕ СтрокаПопыткаНаФорме.РезультатБулево ИЛИ СтрокаПопыткаНаФорме.РезультатЧисло = 0) Тогда
			Продолжить;
		КонецЕсли;	
		строкаПопытка = Объект.Попытки.Добавить();
		ЗаполнитьЗначенияСвойств(строкаПопытка,СтрокаПопыткаНаФорме);
		ПозицияГуида = Найти(СтрокаПопыткаНаФорме.УникальныйИдентификаторСтрокиНорматива,"_")+1;
		строкаПопытка.УникальныйИдентификаторСтрокиНорматива = Сред(СтрокаПопыткаНаФорме.УникальныйИдентификаторСтрокиНорматива,ПозицияГуида);
	КонецЦикла;	
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Запрос = Новый Запрос;
		
		Текст  = "";
		// {Рарус adilas #- -Sonar 2021.06.29
		УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
		   Текст,
		   Новый Структура("Спортсмен,МеждународнаяВозрастнаяГруппа,Норматив,Тренер"),
		   "ВТ_ТаблицаДокумента",
		   "ТаблицаДокумента");
		   
		Запрос.УстановитьПараметр("ТаблицаДокумента", Объект.СоставУчастников.Выгрузить());   
		
		Запрос.Текст = Текст + "
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаДокумента.Спортсмен КАК Спортсмен,
		               |	ВТ_ТаблицаДокумента.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		               |	ВТ_ТаблицаДокумента.Норматив КАК Норматив,
					   |	ВТ_ТаблицаДокумента.Тренер КАК Тренер,
		               |	СУММА(1) КАК КоличествоСтрок
		               |ПОМЕСТИТЬ ВТ_ДанныеДокументаПоКоличествуСтрок
		               |ИЗ
		               |	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ТаблицаДокумента.Спортсмен,
		               |	ВТ_ТаблицаДокумента.МеждународнаяВозрастнаяГруппа,
		               |	ВТ_ТаблицаДокумента.Норматив,
					   |	ВТ_ТаблицаДокумента.Тренер
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеДокументаПоКоличествуСтрок.Спортсмен КАК Спортсмен,
		               |	ВТ_ДанныеДокументаПоКоличествуСтрок.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		               |	ВТ_ДанныеДокументаПоКоличествуСтрок.Норматив КАК Норматив,
					   |	ВТ_ДанныеДокументаПоКоличествуСтрок.Тренер КАК Тренер,
		               |	ВТ_ДанныеДокументаПоКоличествуСтрок.КоличествоСтрок КАК КоличествоСтрок
		               |ИЗ
		               |	ВТ_ДанныеДокументаПоКоличествуСтрок КАК ВТ_ДанныеДокументаПоКоличествуСтрок
		               |ГДЕ
		               |	ВТ_ДанныеДокументаПоКоличествуСтрок.КоличествоСтрок > 1
					   |    И ВТ_ДанныеДокументаПоКоличествуСтрок.Норматив <> ЗНАЧЕНИЕ(Справочник.Нормативы.ПустаяСсылка)";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Отказ = Истина;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Спортсмен %1 с международной возрастной группой %2, тренер %3 указан %4 раз(а) в нормативе %5! 
					      |Необходимо исправить.'"),
					Выборка.Спортсмен,
					Выборка.МеждународнаяВозрастнаяГруппа,
					Выборка.Тренер,
					Выборка.КоличествоСтрок,
					Выборка.Норматив);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
				
			КонецЦикла;	
			
		Иначе
			Возврат
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ПроверкаНаФормеПередПроведением

&НаКлиенте
Процедура ПроверитьУчастниковПередЗаписью(Отказ)
	
	СформироватьМассивЗаявленныхСпортсменовПоНормативам(Отказ);
	
	Если НЕ Отказ Тогда
		Возврат
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьУчастниковПередЗаписьюЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Найдены спортсмены, не числящиеся в участниках.
		|Продолжить проведение?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчастниковПередЗаписьюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДокументПринудительно();
	Иначе
		Возврат
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументПринудительно()
	
	ПроводитьБезПроверкиНаЗавленных = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМассивЗаявленныхСпортсменовПоНормативам(Отказ)
	
	таблицаЗавленныхВДокументеСпортсменов = ПроведениеСоревнованийФормыСервер.СформироватьТаблицуЗаявленныхСпортсменовПоНормативам(ЭтотОбъект, "ТаблицаРазбора", "УникальныйИдентификаторСтрокиЗаявленногоНорматива");
	
	Запрос = Новый Запрос;
	
	Текст  = "";
	// {Рарус adilas #- -Sonar 2021.06.29
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
	   Текст,
	   Новый Структура("Индекс, Спортсмен, МеждународнаяВозрастнаяГруппа, Норматив, Тренер"),
	   "ВТ_ДанныеНаФорме",
	   "ТаблицаДокумента");
	   
	Запрос.УстановитьПараметр("ТаблицаДокумента"  , таблицаЗавленныхВДокументеСпортсменов);
	Запрос.УстановитьПараметр("Дата"              , Объект.Дата);
	Запрос.УстановитьПараметр("ВидСпорта"         , Объект.ВидСпорта);
	Запрос.УстановитьПараметр("Организация"       , Объект.Организация);
	Запрос.УстановитьПараметр("УчебныйГод"        , Объект.УчебныйГод);
	Запрос.УстановитьПараметр("ТипСоревнования"   , Объект.ТипСоревнования);
	
	Запрос.Текст = Текст + "
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ЗаявкиНаОФП.Спортсмен КАК Спортсмен,
	                |	ЗаявкиНаОФП.Норматив КАК Норматив,
	                |	ЗаявкиНаОФП.Тренер КАК Тренер,
	                |	ЗаявкиНаОФП.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	                |ПОМЕСТИТЬ ВТ_ЗаявленныеСпортсменыНаПериод
	                |ИЗ
	                |	РегистрСведений.УчастникиСоревнованийОФПСдачаНормативов.СрезПоследних(
	                |			&Дата,
	                |			ВидСпорта = &ВидСпорта
	                |				И Организация = &Организация
	                |				И УчебныйГод = &УчебныйГод
	                |				И ТипСоревнования = &ТипСоревнования) КАК ЗаявкиНаОФП
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ДанныеНаФорме.Индекс КАК Индекс,
					|   ВТ_ДанныеНаФорме.Норматив КАК Норматив,
					|   ВТ_ДанныеНаФорме.Тренер КАК Тренер
	                |ИЗ
	                |	ВТ_ДанныеНаФорме КАК ВТ_ДанныеНаФорме
					|ГДЕ
	                |	НЕ(ВТ_ДанныеНаФорме.Спортсмен, ВТ_ДанныеНаФорме.Норматив, ВТ_ДанныеНаФорме.МеждународнаяВозрастнаяГруппа, ВТ_ДанныеНаФорме.Тренер) В
	                |				(ВЫБРАТЬ
	                |					ВТ_ЗаявленныеСпортсменыНаПериод.Спортсмен,
	                |					ВТ_ЗаявленныеСпортсменыНаПериод.Норматив,
					|					ВТ_ЗаявленныеСпортсменыНаПериод.МеждународнаяВозрастнаяГруппа,
	                |					ВТ_ЗаявленныеСпортсменыНаПериод.Тренер
	                |				ИЗ
	                |					ВТ_ЗаявленныеСпортсменыНаПериод)
					|СГРУППИРОВАТЬ ПО
					|   ВТ_ДанныеНаФорме.Индекс,
					|   ВТ_ДанныеНаФорме.Норматив,
					|   ВТ_ДанныеНаФорме.Тренер";
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;	
	Иначе
		
		Отказ = Истина;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			строкаСоставУчастников = СоставУчастниковНаФорме[Выборка.Индекс];
			
			Если ЗначениеЗаполнено(Выборка.Тренер)Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				  НСтр("ru = 'Тренер %1 не заявлял спортсмена %2 в участники.
				       |Норматив %3.
				       |Международная возрастная группа %4.'"),
				  Выборка.Тренер,
				  строкаСоставУчастников.Спортсмен,
				  Выборка.Норматив,
				  строкаСоставУчастников.МеждународнаяВозрастнаяГруппа);
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				   НСтр("ru = 'Спортсмен %1 не заявлен в участники.
				        |Норматив %2.
				        |Международная возрастная группа %3.'"),
				   строкаСоставУчастников.Спортсмен,
				   Выборка.Норматив,
				   строкаСоставУчастников.МеждународнаяВозрастнаяГруппа);
				
			КонецЕсли;
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"СоставУчастниковНаФорме[" + СокрЛП((Выборка.Индекс)) +"].Спортсмен");
			
		КонецЦикла;
		
	КонецЕсли
	
КонецПроцедуры	

#КонецОбласти

#Область ПересчетМест

&НаСервере
Процедура ПересчитатьМестаИБаллыНаСервере()
	
	Отказ = Ложь;
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПеренестиСтруктуруНормативовВТаблицуДокумента(Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСоставУчастников Из Объект.СоставУчастников Цикл
		СтрокаСоставУчастников.Баллы = 0;
		СтрокаСоставУчастников.Очки  = 0;
		СтрокаСоставУчастников.Место = 0;
	КонецЦикла;
	
	ТаблицаДляРасчета = ПроведениеСоревнованийФормыСервер.ПроиндексироватьТаблицуДокумента(Объект,"СоставУчастников");
	
	ТекстЗапроса = "";
	// {Рарус adilas #- -Sonar 2021.06.29
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
	ТекстЗапроса, 
	Новый Структура("Индекс, Спортсмен, МеждународнаяВозрастнаяГруппа, Норматив, Место, Баллы, Очки, РезультатБулево, РезультатЧисло"),
	"ВТ_СоставУчастников",
	"СоставУчастников");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоставУчастников",ТаблицаДляРасчета); 
	Запрос.Текст = ТекстЗапроса + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СоставУчастников.Индекс КАК Индекс,
	               |	ВТ_СоставУчастников.Спортсмен КАК Спортсмен,
	               |	ВТ_СоставУчастников.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
	               |	ВТ_СоставУчастников.Норматив КАК Норматив,
	               |	ВТ_СоставУчастников.Место КАК Место,
	               |	ВТ_СоставУчастников.Баллы КАК Баллы,
	               |	ВТ_СоставУчастников.Очки КАК Очки,
	               |	ВТ_СоставУчастников.РезультатБулево КАК РезультатБулево,
				   |	ВТ_СоставУчастников.РезультатЧисло КАК РезультатЧисло,
	               |	ФизическиеЛица.Пол КАК Пол,
	               |	Нормативы.ТипРезультата КАК ТипРезультата
				   |ПОМЕСТИТЬ ВТ_ПодготовленнаяТаблица
	               |ИЗ
	               |	ВТ_СоставУчастников КАК ВТ_СоставУчастников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО ВТ_СоставУчастников.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Нормативы КАК Нормативы
	               |		ПО ВТ_СоставУчастников.Норматив = Нормативы.Ссылка
				   |ГДЕ ВТ_СоставУчастников.Норматив <> ЗНАЧЕНИЕ(Справочник.Нормативы.ПустаяСсылка)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ОценкиПрохожденияНормативов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
				   |	ОценкиПрохожденияНормативов.Пол КАК Пол,
				   |	ОценкиПрохожденияНормативов.Норматив КАК Норматив,
				   |	МАКСИМУМ(ВЫБОР
				   |			КОГДА ОценкиПрохожденияНормативов.ТипПодсчетаРезультата = ЗНАЧЕНИЕ(перечисление.типподсчетарезультата.пустаяссылка)
				   |				ТОГДА ЗНАЧЕНИЕ(перечисление.типподсчетарезультата.минимальноезначение)
				   |			ИНАЧЕ ОценкиПрохожденияНормативов.ТипПодсчетаРезультата
				   |		КОНЕЦ) КАК ТипПодсчетаРезультата
				   |ПОМЕСТИТЬ ВТ_ТипыПодсчетаРезультата
				   |ИЗ
				   |	РегистрСведений.ОценкиПрохожденияНормативов КАК ОценкиПрохожденияНормативов
				   |ГДЕ
				   |	(ОценкиПрохожденияНормативов.МеждународнаяВозрастнаяГруппа, ОценкиПрохожденияНормативов.Пол, ОценкиПрохожденияНормативов.Норматив) В
				   |			(ВЫБРАТЬ
				   |				ВТ_ПодготовленнаяТаблица.МеждународнаяВозрастнаяГруппа,
				   |				ВТ_ПодготовленнаяТаблица.Пол,
				   |				ВТ_ПодготовленнаяТаблица.Норматив
				   |			ИЗ
				   |				ВТ_ПодготовленнаяТаблица)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ОценкиПрохожденияНормативов.МеждународнаяВозрастнаяГруппа,
				   |	ОценкиПрохожденияНормативов.Пол,
				   |	ОценкиПрохожденияНормативов.Норматив
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |   ВТ_ПодготовленнаяТаблица.Индекс КАК Индекс,
				   |   ВТ_ПодготовленнаяТаблица.Спортсмен КАК Спортсмен,
				   |   ВТ_ПодготовленнаяТаблица.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
				   |   ВТ_ПодготовленнаяТаблица.Норматив КАК Норматив,
				   |   ВТ_ПодготовленнаяТаблица.Место КАК Место,
				   |   ВТ_ПодготовленнаяТаблица.Баллы КАК Баллы,
				   |   ВТ_ПодготовленнаяТаблица.Очки КАК Очки,
				   |   ВТ_ПодготовленнаяТаблица.РезультатБулево КАК РезультатБулево,
				   |   ВТ_ПодготовленнаяТаблица.РезультатЧисло КАК РезультатЧисло,
				   |   ВТ_ПодготовленнаяТаблица.Пол КАК Пол,
				   |   ВТ_ПодготовленнаяТаблица.ТипРезультата КАК ТипРезультата,
				   |   ЕСТЬNULL(ВТ_ТипыПодсчетаРезультата.ТипПодсчетаРезультата, ЗНАЧЕНИЕ(Перечисление.ТипПодсчетаРезультата.МинимальноеЗначение)) КАК ТипПодсчетаРезультата
				   |ИЗ
				   |   ВТ_ПодготовленнаяТаблица КАК ВТ_ПодготовленнаяТаблица
				   |   ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыПодсчетаРезультата КАК ВТ_ТипыПодсчетаРезультата
				   |   ПО ВТ_ПодготовленнаяТаблица.Норматив = ВТ_ТипыПодсчетаРезультата.Норматив
				   |   И ВТ_ПодготовленнаяТаблица.Пол = ВТ_ТипыПодсчетаРезультата.Пол
				   |   И ВТ_ПодготовленнаяТаблица.МеждународнаяВозрастнаяГруппа = ВТ_ТипыПодсчетаРезультата.МеждународнаяВозрастнаяГруппа";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СоставУчастников", Запрос.Выполнить().Выгрузить());
	ПараметрыПроцедуры.Вставить("ТипСоревнования" , Объект.ТипСоревнования);
	
	ОФППодсчетРезультатовВыполненияНормативовСервер.ПересчитатьМестаИБаллыНаСервере(ПараметрыПроцедуры);
	
	расчитаннаяТаблица = ПараметрыПроцедуры.СоставУчастников;	
	
	Для Каждого строкаРасчитаннаяТаблица Из расчитаннаяТаблица Цикл
		ЗаполнитьЗначенияСвойств(Объект.СоставУчастников[строкаРасчитаннаяТаблица.Индекс],строкаРасчитаннаяТаблица,"Место,Очки,Баллы"); 
	КонецЦикла;
	
	УдалитьВсеКолонкиНормативовНаФорме();
	СформироватьСтруктуруНормативовНаФорме(Истина);
	ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаУчебногоГода

&НаКлиенте
Процедура УчебныйГодПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СоставУчастников.Очистить();
		Объект.Попытки.Очистить();
		УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСозданиеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
	   Объект.УчебныйГод = Результат.УчебныйГодСсылка;
	   УправлениеУчебнымГодомСсылка = Результат.УчебныйГодОбъект;
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	УправлениеУчебнымГодомСсылка = Результат;
    ПолучитьУчебныйГодСсылка();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьУчебныйГодСсылка()
	Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНаОснованиеСоревнования

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ДокументОснованиеНачалоВыбораОткрытьФормуВыбораСоревнования();
		
	Иначе
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораОткрытьФормуВыбораСоревнования()
	
	Оповещение = Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораПродолжить", ЭтотОбъект);
	
	ПараметрыОтбора = Новый Структура("УчебныйГод, Организация, ВидСпорта, ТипСоревнования");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	
	ОткрытьФорму("Документ.СоревнованиеОФПСдачаНормативов.ФормаВыбора", ПараметрыОтбора, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораПродолжить(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		Объект.ДокументОснование = Результат;
		ДокументОснованиеНачалоВыбораПродолжитьНаСервере();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ДокументОснованиеНачалоВыбораПродолжитьНаСервере()
	
	УдалитьВсеКолонкиНормативовНаФорме();
	
	Объект.СоставУчастников.Очистить();
	Объект.ЗаявленныеНормативы.Очистить();
	Объект.Попытки.Очистить();
	
	Объект_ = РеквизитФормыВЗначение("Объект");
	Объект_.ЗаполнитьПротоколНаОснованиеДокумента(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Объект_,"Объект");
	
	СформироватьСтруктуруНормативовНаФорме(Истина);
	
	ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
	
КонецПроцедуры	

#КонецОбласти

#Область ЗаполнениеРезультатовПопыток

&НаКлиенте
Процедура ВнестиРезультатыПопытокПоНормативу(ТекДанные, Гуид)
	
	массивПопыток = Новый Массив;
	
	структураПоискаУникальногоИдентификатораПопытки = Новый Структура("УникальныйИдентификаторСтрокиНорматива", ТекДанные["УникальныйИдентификаторСтрокиНорматива_" + Гуид]);
	
	массивСтрокПопыток = ПопыткиНаФорме.НайтиСтроки(структураПоискаУникальногоИдентификатораПопытки);
	
	Для Каждого строкаПопытка Из массивСтрокПопыток Цикл
		ДобавитьЗначениеВМассивПопыток(массивПопыток,строкаПопытка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("Норматив, Пол, МеждународнаяВозрастнаяГруппа, ТипРезультата, МассивПопыток",
	   ТекДанные["Норматив_"+Гуид],
	   ТекДанные.Пол,
	   ТекДанные.МеждународнаяВозрастнаяГруппа,
	   ТекДанные["ТипРезультата_"+Гуид], 
	   массивПопыток);
	   
	структураПоискаУникальногоИдентификатораПопытки.Вставить("УникальныйИдентификаторСтрокиНорматива", ТекДанные["УникальныйИдентификаторСтрокиНорматива_" + Гуид]); 
	структураПоискаУникальногоИдентификатораПопытки.Вставить("ТипРезультатов"                        , ТекДанные["ТипРезультата_" + Гуид]);
	структураПоискаУникальногоИдентификатораПопытки.Вставить("ТекСтрока"                             , ТекДанные);
	структураПоискаУникальногоИдентификатораПопытки.Вставить("Гуид"                                  , Гуид);
	
	Оповещение = Новый ОписаниеОповещения("ВнестиРезультатыПопытокЗавершение", ЭтотОбъект, структураПоискаУникальногоИдентификатораПопытки);
	
	ОткрытьФорму("Документ.ПротоколОФПСдачаНормативов.Форма.ФормаВводаРезультатовПопыток", 
	ПараметрыФормы,
	ЭтаФорма,,,,
	Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗначениеВМассивПопыток(массивПопыток,строкаПопытка)
	
	структураПопытки = Новый Структура("НомерПопытки, РезультатЧисло, РезультатСтрока, РезультатБулево, СостояниеПопытки");
	ЗаполнитьЗначенияСвойств(структураПопытки, строкаПопытка);
	массивПопыток.Добавить(структураПопытки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнестиРезультатыПопытокЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат  = Неопределено Тогда
		Возврат
	ИначеЕсли Результат.Попытки.Количество() = 0 Тогда
		УдалитьСтрокиПопытокПоГуиду(ДопПараметры.УникальныйИдентификаторСтрокиНорматива);	
	Иначе
		
		Гуид = ДопПараметры.Гуид;
		
		УдалитьСтрокиПопытокПоГуиду(ДопПараметры.УникальныйИдентификаторСтрокиНорматива);
		
		max = Ложь;
		min = Ложь;
		sum = ложь;
		Если Результат.ТипПодсчетаРезультата = ПредопределенноеЗначение("Перечисление.ТипПодсчетаРезультата.МаксимальноеЗначение")Тогда
			max = Истина;
		ИначеЕсли Результат.ТипПодсчетаРезультата = ПредопределенноеЗначение("Перечисление.ТипПодсчетаРезультата.МинимальноеЗначение")Тогда
			min = Истина;
		Иначе
			sum = Истина;
		КонецЕсли;
		
		Булево = Ложь;
		Число  = Ложь;
		Время = Ложь;
		Если ДопПараметры.ТипРезультатов = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Булево") Тогда
			Булево = Истина;
		ИначеЕсли ДопПараметры.ТипРезультатов = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Время") Тогда
			Время = Истина;
		Иначе
			Число = Истина;
		КонецЕсли;
		
		ЛучшаяПопытка = 0;
		суммаМилСек   = 0;
		Выполнил      = Ложь;
		Для Индекс = 0 По Результат.Попытки.Количество()-1 Цикл
			СтрокаРезультат = Результат.Попытки[Индекс]; 
			строкаПопытка = ПопыткиНаФорме.Добавить();
			строкаПопытка.УникальныйИдентификаторСтрокиНорматива = ДопПараметры.УникальныйИдентификаторСтрокиНорматива;;
			ЗаполнитьЗначенияСвойств(строкаПопытка,СтрокаРезультат);
			Если Булево Тогда
				Если Выполнил = Истина И строкаПопытка.РезультатБулево = Ложь Тогда
					Выполнил = Истина;
				ИначеЕсли (Выполнил = Ложь И строкаПопытка.РезультатБулево = Истина) ИЛИ (Выполнил = Истина И строкаПопытка.РезультатБулево = Истина) Тогда
					Выполнил = Истина;
				Иначе
					Выполнил = Ложь;
				КонецЕсли;
				ДопПараметры.ТекСтрока["РезультатБулево_"+Гуид] = Выполнил;
				ДопПараметры.ТекСтрока["Результат_"+Гуид]       = ?(Выполнил, "Выполнил", "Не выполнил");
			Иначе
				Если max Тогда
					Если строкаПопытка.РезультатЧисло > ЛучшаяПопытка И (СтрокаРезультат.УчитыватьВПодсчетеРезультата ИЛИ НЕ ЗначениеЗаполнено(СтрокаРезультат.Состояние)) Тогда
						ЛучшаяПопытка = строкаПопытка.РезультатЧисло;
					КонецЕсли;	
					ДопПараметры.ТекСтрока["РезультатЧисло_"+Гуид] = ЛучшаяПопытка;
				ИначеЕсли min Тогда
					Если Индекс = 0 Или ЛучшаяПопытка > строкаПопытка.РезультатЧисло И строкаПопытка.РезультатЧисло <> 0 И 
					 (СтрокаРезультат.УчитыватьВПодсчетеРезультата ИЛИ НЕ ЗначениеЗаполнено(СтрокаРезультат.Состояние))  Тогда
						ЛучшаяПопытка = строкаПопытка.РезультатЧисло;
					КонецЕсли;	
					ДопПараметры.ТекСтрока["РезультатЧисло_"+Гуид] = ЛучшаяПопытка;
				Иначе
					Если СтрокаРезультат.УчитыватьВПодсчетеРезультата ИЛИ НЕ ЗначениеЗаполнено(СтрокаРезультат.Состояние) Тогда
						суммаМилСек = суммаМилСек + строкаПопытка.РезультатЧисло;
					КонецЕсли;
					ДопПараметры.ТекСтрока["РезультатЧисло_"+Гуид] = суммаМилСек;
					ДопПараметры.ТекСтрока["Результат_"+Гуид]      = суммаМилСек;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Если Время Тогда
			ДопПараметры.ТекСтрока["Результат_"+Гуид] = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(ДопПараметры.ТекСтрока["РезультатЧисло_"+Гуид]);
		ИначеЕсли Булево Тогда
			ДопПараметры.ТекСтрока["РезультатБулево_"+Гуид] = Выполнил;
			ДопПараметры.ТекСтрока["Результат_"+Гуид]       = ?(Выполнил, "Выполнил", "Не выполнил");
		Иначе	
			ДопПараметры.ТекСтрока["Результат_"+Гуид] = ?(ДопПараметры.ТекСтрока["РезультатЧисло_"+Гуид] = 0, Формат(ДопПараметры.ТекСтрока["РезультатЧисло_"+Гуид],"ЧН=0"), ДопПараметры.ТекСтрока["РезультатЧисло_"+Гуид]);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
















