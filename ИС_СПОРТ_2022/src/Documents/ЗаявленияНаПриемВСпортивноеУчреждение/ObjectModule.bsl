// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
         Возврат;
    КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	УчетСпортсменовСервер.ЗаполнитьРеквизит(ЭтотОбъект, "Ответственный", ПараметрыСеанса.ТекущийПользователь);
    
    Если Не ЗначениеЗаполнено(ОписаниеЗаявления) Тогда
    
    	СформироватьОписаниеЗаявления();
    
	КонецЕсли;
	
	// {Рарус adilas #18200 -Тестирование релиза Альфа СПОРТ 1.0.0.3. Заявление на прием в спорт. учреждение 2021.07.08
	СформироватьСогласиеНаОБработкуПДн();
    // }Рарус adilas #18200 -Тестирование релиза Альфа СПОРТ 1.0.0.3. Заявление на прием в спорт. учреждение 2021.07.08
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//пока закомментим
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ДатаРождения", Спортсмен.ФизическоеЛицо.ДатаРождения);
	//Запрос.УстановитьПараметр("ТекущаяДата" , ТекущаяДатаСеанса());
	//Запрос.Текст = "ВЫБРАТЬ РАЗНОСТЬДАТ(&ДатаРождения, &ТекущаяДата, ГОД) КАК Возраст";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Выборка.Следующий();
	//Если Выборка.Возраст <18 И Родитель = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
	//	Отказ = Истина;
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru = 'Возраст спортсмена %1. Необходимо указать совершеннолетнего заявителя.'"),
	//	Выборка.Возраст);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,"Объект.Родитель");
	//КонецЕсли;	
	
	// {Рарус dotere #22050 -Проверка на зачисление в другие виды спорта 2021.11.01
	ВыполнитьПроверкуПередПроведением(Отказ);
	// }Рарус dotere #22050 -Проверка на зачисление в другие виды спорта 2021.11.01
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	ПроведениеСервер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "СоставУчащихсяСпортивногоУчреждения");
	ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "ПредоставленныеДокументыСпортсменов");

	Движения.Записать();

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	Движения.Записать();

	ПроведениеСервер.ВыполнитьКонтрольРезультатовОтменыПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// {Рарус dotere #22050 -Проверка на зачисление в другие виды спорта 2021.11.01
Процедура ВыполнитьПроверкуПередПроведением(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗаявления", ДатаЗаявления);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен КАК Спортсмен,
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта КАК ВидСпорта
		|ИЗ
		|	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
		|ГДЕ
		|	(СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения < &ДатаЗаявления)
		|	И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = &Спортсмен
		|	И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен,
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		Отказ = Истина;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Спортсмен %1 уже зачислен(а) на вид спорта %2'"),
				ВыборкаДетальныеЗаписи.Спортсмен,ВыборкаДетальныеЗаписи.ВидСпорта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли

	
КонецПроцедуры
// }Рарус dotere #22050 -Проверка на зачисление в другие виды спорта 2021.11.01
// {Рарус adilas #18200 -Тестирование релиза Альфа СПОРТ 1.0.0.3. Заявление на прием в спорт. учреждение 2021.07.08
Процедура СформироватьСогласиеНаОБработкуПДн()
	
	Если СогласиеНаОбработкуПерсональныхДанныхПолучено Тогда 	
		
		ОбратботкаРезультатаВыбораСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбратботкаРезультатаВыбораСервер()
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласияНаОбработкуПерсональныхДанныхСрезПоследних.Регистратор.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных.СрезПоследних(
	|			,
	|			ТИПЗНАЧЕНИЯ(Регистратор) = ТИП(Документ.СогласиеНаОбработкуПерсональныхДанных)
	|				И Субъект = &Субъект
	|				И Организация = &Организация
	|				И Действует = ИСТИНА
	|				И Регистратор.ПометкаУдаления = ЛОЖЬ) КАК СогласияНаОбработкуПерсональныхДанныхСрезПоследних";
	
	Запрос.УстановитьПараметр("Субъект", 		Спортсмен);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументСогласиеНаОбработкуПерсональныхДанных = ВыборкаДетальныеЗаписи.Ссылка;
			СогласиеНаОбработкуПерсональныхДанныхПолучено = Истина;
			
		КонецЦикла;
		
	Иначе
		
		// Паспортные данные спортсмена
		ДанныеСубъектаСпортсмен = ЗащитаПерсональныхДанных.ОписаниеДанныхСубъекта();		
		ДанныеСубъектаСпортсмен.Субъект = Спортсмен.ФизическоеЛицо;
		
		ЗащитаПерсональныхДанныхПереопределяемый.ДополнитьДанныеСубъектовПерсональныхДанных(ДанныеСубъектаСпортсмен, ДатаЗаявления);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Паспортные данные спортсмена родителя
		ДанныеСубъектаЗаконногоПредставителя = ЗащитаПерсональныхДанных.ОписаниеДанныхСубъекта();		
		ДанныеСубъектаЗаконногоПредставителя.Субъект = Родитель.ФизическоеЛицо;
		
		ЗащитаПерсональныхДанныхПереопределяемый.ДополнитьДанныеСубъектовПерсональныхДанных(ДанныеСубъектаЗаконногоПредставителя, ДатаЗаявления);
		
		// Создаем новый документ согласия на обрабтку персональных данных;
		СогласиеНаОбработкуПерсональныхДанных = Документы.СогласиеНаОбработкуПерсональныхДанных.СоздатьДокумент();
		СогласиеНаОбработкуПерсональныхДанных.Дата 										= Дата;
		СогласиеНаОбработкуПерсональныхДанных.Субъект 									= Спортсмен;
		СогласиеНаОбработкуПерсональныхДанных.СубъектЗаконныйПредставитель 				= Родитель;
		СогласиеНаОбработкуПерсональныхДанных.Организация                   			= Организация;
		СогласиеНаОбработкуПерсональныхДанных.ДатаПолучения                             = ДатаЗаявления;
		СогласиеНаОбработкуПерсональныхДанных.ПаспортныеДанные                       	= ДанныеСубъектаСпортсмен.ПаспортныеДанные;
		СогласиеНаОбработкуПерсональныхДанных.ФИОСубъекта                               = ДанныеСубъектаСпортсмен.ФИО;
		СогласиеНаОбработкуПерсональныхДанных.АдресСубъекта                             = ДанныеСубъектаСпортсмен.Адрес;
		СогласиеНаОбработкуПерсональныхДанных.ПаспортныеДанныеЗаконногоПредставителя 	= ДанныеСубъектаЗаконногоПредставителя.ПаспортныеДанные;
		СогласиеНаОбработкуПерсональныхДанных.ФИОСубъектаЗаконногоПредставителя         = ДанныеСубъектаЗаконногоПредставителя.ФИО;
		СогласиеНаОбработкуПерсональныхДанных.АдресСубъектаЗаконногоПредставителя       = ДанныеСубъектаЗаконногоПредставителя.Адрес;
		СогласиеНаОбработкуПерсональныхДанных.Ответственный                             = Ответственный;
		СогласиеНаОбработкуПерсональныхДанных.Комментарий                               = Комментарий;
		
		СогласиеНаОбработкуПерсональныхДанных.Записать(РежимЗаписиДокумента.Проведение);
		
		ДокументСогласиеНаОбработкуПерсональныхДанных = СогласиеНаОбработкуПерсональныхДанных.Ссылка;
		СогласиеНаОбработкуПерсональныхДанныхПолучено = Истина;
		
	КонецЕсли;
		
КонецПроцедуры
// }Рарус adilas #18200 -Тестирование релиза Альфа СПОРТ 1.0.0.3. Заявление на прием в спорт. учреждение 2021.07.08

Процедура СформироватьОписаниеЗаявления()

	    ОписаниеЗаявления = Строка(Спортсмен)+" ("+НРег(Строка(ВидСпорта))+")"+?(ЗначениеЗаполнено(Родитель)," Родитель: "+Строка(Родитель),"");

КонецПроцедуры

Процедура РаспаковатьЗаявление(РеквизитОбъект) Экспорт
    
    СтруктураЗаполнения = РеквизитОбъект.ЧерновикЗаявления.Получить(); 
    
    Если СтруктураЗаполнения <> Неопределено Тогда
        
        Если НЕ ЗначениеЗаполнено(РеквизитОбъект.Спортсмен) Тогда
            
            НФлИмя = Трег(СокрЛП(СтруктураЗаполнения.ИмяСпортсмена));
            НФлФамилия = Трег(СокрЛП(СтруктураЗаполнения.ФамилияСпортсмена));
            НФлОтчество = Трег(СокрЛП(СтруктураЗаполнения.ОтчествоСпортсмена));
            ФЛНайдено = НайтиФизлицо(НФлФамилия,НФлИмя,НФлОтчество,СтруктураЗаполнения.ДатаРождения);
            
            Если НЕ ЗначениеЗаполнено(ФЛНайдено)  Тогда 
                НовоеФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
                НовоеФизлицо.ДатаРождения = СтруктураЗаполнения.ДатаРождения;
                НовоеФизлицо.ГодРождения = Год(НовоеФизлицо.ДатаРождения);
                НовоеФизлицо.Имя = НФлИмя;
                НовоеФизлицо.Отчество = НФлОтчество;
                НовоеФизлицо.Фамилия = НФлФамилия;
                НовоеФизлицо.Наименование = НовоеФизлицо.Фамилия+" "+НовоеФизлицо.Имя+" "+НовоеФизлицо.Отчество;
                НовоеФизлицо.Записать();
                СсылкаНовоеФизлицо = НовоеФизлицо.Ссылка;
                
            Иначе
                
                СсылкаНовоеФизлицо = ФЛНайдено;
                
            КонецЕсли;
            
            СсылкаВидСпорта = Справочники.ВидыСпорта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаполнения.ВидСпортаУИД));
            СпортсменНайден = НайтиСпортсмена(СсылкаНовоеФизлицо,РеквизитОбъект);
            
            Если НЕ ЗначениеЗаполнено(СпортсменНайден) Тогда
                
                НовыйСпортсмен = Справочники.Спортсмены.СоздатьЭлемент();
                НовыйСпортсмен.СтатусСпортсмена = Перечисления.СтатусыСпортсменов.Спортсмен;
                НовыйСпортсмен.Наименование = НовоеФизлицо.Наименование;
                НовыйСпортсмен.ФизическоеЛицо = СсылкаНовоеФизлицо;
                НовыйСпортсмен.Записать();
                СсылкаНовыйСпортсмен = НовыйСпортсмен.Ссылка;
                
                МенеджерЗаписиДокументы = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
                МенеджерЗаписиДокументы.Период = ТекущаяДатаСеанса();
                МенеджерЗаписиДокументы.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц[СтруктураЗаполнения.ВидДокумента];
                МенеджерЗаписиДокументы.ФизическоеЛицо = НовоеФизлицо.Ссылка;
                МенеджерЗаписиДокументы.Серия = СтруктураЗаполнения.СвидетельствоПаспортСерия;
                МенеджерЗаписиДокументы.Номер = СтруктураЗаполнения.СвидетельствоПаспортНомер;
                МенеджерЗаписиДокументы.КемВыдан = СтруктураЗаполнения.СвидетельствоПаспортКемВыдан;
                МенеджерЗаписиДокументы.КодПодразделения = СтруктураЗаполнения.СвидетельствоПаспортКодПодразделения;
                МенеджерЗаписиДокументы.ДатаВыдачи = СтруктураЗаполнения.СвидетельствоПаспортДатаВыдачи;
                МенеджерЗаписиДокументы.СрокДействия = СтруктураЗаполнения.СвидетельствоПаспортСрокДействия;
                МенеджерЗаписиДокументы.Записать();
                
            Иначе
                
                СсылкаНовыйСпортсмен = СпортсменНайден;
            КонецЕсли;
            
            РеквизитОбъект.Спортсмен = СсылкаНовыйСпортсмен;
            
        Иначе
            
            СсылкаНовыйСпортсмен = РеквизитОбъект.Спортсмен;
            
        КонецЕсли;
        
        //Если НЕ СтруктураЗаполнения.РодительСпортсмена <> Неопределено Тогда
            
            //СтруктураЗаполненияРодитель = СтруктураЗаполнения.РодительСпортсмена;

            Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаполнения.УИДРодителя));
            НовоеФизлицоРодитель = Справочники.ФизическиеЛица.СоздатьЭлемент();
            НовоеФизлицоРодитель.Имя = Трег(СокрЛП(СтруктураЗаполнения.ИмяРодителя));
            НовоеФизлицоРодитель.Отчество = Трег(СокрЛП(СтруктураЗаполнения.ОтчествоРодителя));
            НовоеФизлицоРодитель.Фамилия = Трег(СокрЛП(СтруктураЗаполнения.ФамилияРодителя));
            НовоеФизлицоРодитель.Наименование = НовоеФизлицоРодитель.Фамилия+" "+НовоеФизлицоРодитель.Имя+" "+НовоеФизлицоРодитель.Отчество;
            НовоеФизлицоРодитель.Записать();
            
             МенеджерЗаписиДокументы = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
                МенеджерЗаписиДокументы.Период = ТекущаяДатаСеанса();
                МенеджерЗаписиДокументы.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортГражданинаРФ;
                МенеджерЗаписиДокументы.ФизическоеЛицо = НовоеФизлицоРодитель.Ссылка;
                МенеджерЗаписиДокументы.Серия = СтруктураЗаполнения.СвидетельствоПаспортСерия;
                МенеджерЗаписиДокументы.Номер = СтруктураЗаполнения.СвидетельствоПаспортНомер;
                МенеджерЗаписиДокументы.КемВыдан = СтруктураЗаполнения.СвидетельствоПаспортКемВыдан;
                МенеджерЗаписиДокументы.КодПодразделения = СтруктураЗаполнения.СвидетельствоПаспортКодПодразделения;
                МенеджерЗаписиДокументы.ДатаВыдачи = СтруктураЗаполнения.СвидетельствоПаспортДатаВыдачи;
                МенеджерЗаписиДокументы.СрокДействия = СтруктураЗаполнения.СвидетельствоПаспортСрокДействия;
                МенеджерЗаписиДокументы.Записать();

            НовыйРодитель = Справочники.РодителиЗаконныеПредставителиСпортсменов.СоздатьЭлемент();
            НовыйРодитель.Наименование = НовоеФизлицоРодитель.Наименование;
            НовыйРодитель.ФизическоеЛицо = НовоеФизлицоРодитель.Ссылка;
            НовыйРодитель.Владелец = СсылкаНовыйСпортсмен;
            НовыйРодитель.Записать();
            
            МенеджерЗаписиСоставСемьи = РегистрыСведений.СоставыСемейСпортсменов.СоздатьМенеджерЗаписи();
            МенеджерЗаписиСоставСемьи.Спортсмен = НовыйСпортсмен.Ссылка;
            МенеджерЗаписиСоставСемьи.Родитель = НовыйРодитель.Ссылка;
            МенеджерЗаписиСоставСемьи.СтепеньРодства = Справочники.СтепениРодстваФизическихЛиц.Мать;
            
            РеквизитОбъект.Родитель = НовыйРодитель.Ссылка;
            
        //КонецЕсли;
        
        РеквизитОбъект.ВидСпорта = СсылкаВидСпорта;
        РеквизитОбъект.ДатаЗаявления = СтруктураЗаполнения.ДатаЗаявления;
        РеквизитОбъект.СогласиеНаОбработкуПерсональныхДанныхПолучено = Истина;
        
    КонецЕсли;

КонецПроцедуры 

Функция НайтиФизлицо(Фамилия, Имя, Отчество, ДатаРождения)

    ВозвращаемоеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   ФизическиеЛица.Ссылка КАК Ссылка
    |ИЗ
    |   Справочник.ФизическиеЛица КАК ФизическиеЛица
    |ГДЕ
    |   ФизическиеЛица.Фамилия = &Фамилия
    |   И ФизическиеЛица.Имя = &Имя
    |   И ФизическиеЛица.Отчество = &Отчество
    |   И ФизическиеЛица.ДатаРождения = &ДатаРождения
    |   И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ";
    
    Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
    Запрос.УстановитьПараметр("Имя", Имя);
    Запрос.УстановитьПараметр("Отчество", Отчество);
    Запрос.УстановитьПараметр("Фамилия", Фамилия);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            ВозвращаемоеЗначение = ВыборкаДетальныеЗаписи.Ссылка;
        КонецЦикла;
        
    КонецЕсли; 
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции // ПроверитьФизлицо()

Функция НайтиСпортсмена(СсылкаФизлицо,РеквизитОбъект)

    ВозвращаемоеЗначение = Справочники.Спортсмены.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен
    |ИЗ
    |   РегистрСведений.СоответствияФизическихЛицИОрганизаций КАК СоответствияФизическихЛицИОрганизаций
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спортсмены КАК Спортсмены
    |           ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(&ДатаЗаявления, ) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
    |           ПО Спортсмены.Ссылка = ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен
    |       ПО СоответствияФизическихЛицИОрганизаций.ФизическоеЛицо = Спортсмены.ФизическоеЛицо
    |ГДЕ
    |   СоответствияФизическихЛицИОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
    |   И СоответствияФизическихЛицИОрганизаций.Организация = &Организация
    |   И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта = &ВидСпорта";
    
    Запрос.УстановитьПараметр("ВидСпорта", РеквизитОбъект.ВидСпорта);
    Запрос.УстановитьПараметр("ДатаЗаявления", РеквизитОбъект.ДатаЗаявления);
    Запрос.УстановитьПараметр("Организация", РеквизитОбъект.Организация);
    Запрос.УстановитьПараметр("ФизическоеЛицо", СсылкаФизлицо);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            ВозвращаемоеЗначение = ВыборкаДетальныеЗаписи.Спортсмен;
        КонецЦикла;
        
    КонецЕсли; 
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции // НайтиСпортсмена()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли