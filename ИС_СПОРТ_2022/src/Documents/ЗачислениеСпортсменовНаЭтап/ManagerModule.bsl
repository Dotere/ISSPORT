#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"      		, ДокументСсылка);
	// {Рарус adilas #10048 -Реквизиты дат для документов 2020.10.09
	Запрос.УстановитьПараметр("Период"      		, ДокументСсылка.ДатаЗачисления);
	// }Рарус adilas #10048 -Реквизиты дат для документов 2020.10.09
	Запрос.УстановитьПараметр("Организация" 		, ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("Тренер"      		, ДокументСсылка.Тренер);
	Запрос.УстановитьПараметр("ВидСпорта"   	    , ДокументСсылка.ВидСпорта);
	Запрос.УстановитьПараметр("Этап"        	    , ДокументСсылка.Этап);
	// {Рарус adilas #10266 -Спортивная программа в движениях 2020.10.16
	Запрос.УстановитьПараметр("СпортивнаяПрограмма" , ДокументСсылка.СпортивнаяПрограмма);
	// }Рарус adilas #10266 -Спортивная программа в движениях 2020.10.16
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	""ЭтапыСпортивнойПодготовкиСпортсменов"" КАК ИмяРегистра_,
	                |	&Период КАК Период,
	                |	&Организация КАК Организация,
	                |	&ВидСпорта КАК ВидСпорта,
	                |	&Этап КАК Этап,
	                |	Спортсмены.Спортсмен КАК Спортсмен,
	                |	&Тренер КАК Тренер,
	                |	&СпортивнаяПрограмма КАК СпортивнаяПрограмма
	                |ИЗ
	                |	Документ.ЗачислениеСпортсменовНаЭтап.Спортсмены КАК Спортсмены
	                |ГДЕ
	                |	Спортсмены.Ссылка = &Ссылка";
	
	
	ТаблицаЭтапыСпортивнойПодготовкиСпортсменов = Запрос.Выполнить().Выгрузить();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаЭтапыСпортивнойПодготовкиСпортсменов" , ТаблицаЭтапыСпортивнойПодготовкиСпортсменов);
	
    ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
КонецПроцедуры	

Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт
	
	Если Ложь Тогда
		Объект = Документы.ЗачислениеСпортсменовНаЭтап.СоздатьДокумент();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольПередПроведением(Объект, Отказ) Экспорт
	
	Если Ложь Тогда
		Объект = Документы.ЗачислениеСпортсменовНаЭтап.СоздатьДокумент();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольРезультатовОтменыПроведения(Объект, Отказ) Экспорт
	
	Если Ложь Тогда
		Объект = Документы.ЗачислениеСпортсменовНаЭтап.СоздатьДокумент();
	КонецЕсли;
	
КонецПроцедуры

// {Рарус adilas #16630 -Печатная форма Приказа на присвоение разряда 2021.06.10
#Область ПечатьWord

// Подготавливает данные объекта к выводу на печать.
// 
// Параметры:
//  Согласия - Массив - ссылки на документы, для которых запрашиваются данные для печати;
//  МассивИменМакетов - Массив - имена макетов (Строка), в которые подставляются данные для печати.
//
// Возвращаемое значение:
//  Соответствие - коллекция ссылок на объекты и их данные:
//   * Ключ - ЛюбаяСсылка - ссылка на объект информационной базы;
//   * Значение - Структура - макет и данные:
//    ** Ключ - Строка - имя макета,
//    ** Значение - Структура - данные объекта.
//
Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	// Создание функции подготовки данных для печати.
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка,ИмяМакета));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	                                                             
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "ПФ_DOC_ПриказОЗачисленииСпортсменовНаЭтап" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Документы.ЗачислениеСпортсменовНаЭтап.ПолучитьМакет("ПФ_DOC_ПриказОЗачисленииСпортсменовНаЭтап"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента(ИмяМакета));
	КонецЦикла;

	Возврат Новый Структура("Данные, Макеты",
											ДанныеПоВсемОбъектам,
											Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
											
КонецФункции

Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента(ИмяМакета)
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбластьШапка"        			, "Общая"); // Описание областей в вордовском документе
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбластьВидСпорта"        		, "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбластьШапкаТаблицы"        	, "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбластьСтрокаТаблицыСпортсмены", "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбластьТренер"        			, "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбластьПодвал"     			, "Общая");
	
	Возврат ОписаниеОбластей;
	
КонецФункции

Функция ПолучитьДанныеОбъекта(ОбъектыПечати, ИмяМакета) Экспорт
	Если ИмяМакета = "ПФ_DOC_ПриказОЗачисленииСпортсменовНаЭтап" Тогда
		Возврат ПолучитьДанныеОбъектаПриказ(ОбъектыПечати);
	КонецЕсли;
КонецФункции

Функция ПолучитьДанныеОбъектаПриказ(ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗачислениеСпортсменовНаЭтап.Ссылка КАК Ссылка,
		|	ЗачислениеСпортсменовНаЭтап.ДатаЗачисления КАК ДатаЗачисления,
		|	ЗачислениеСпортсменовНаЭтап.ВидСпорта КАК ВидСпорта
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Документ.ЗачислениеСпортсменовНаЭтап КАК ЗачислениеСпортсменовНаЭтап
		|ГДЕ
		|	ЗачислениеСпортсменовНаЭтап.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Данные.Ссылка КАК Ссылка,
		|	ЗачислениеСпортсменовНаЭтапСпортсмены.Спортсмен КАК Спортсмен,
		|	ВТ_Данные.ДатаЗачисления КАК ДатаЗачисления,
		|	ВТ_Данные.ВидСпорта КАК ВидСпорта
		|ПОМЕСТИТЬ ВТ_ТаблицаДляИтогов
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗачислениеСпортсменовНаЭтап.Спортсмены КАК ЗачислениеСпортсменовНаЭтапСпортсмены
		|		ПО ВТ_Данные.Ссылка = ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
		|	МАКСИМУМ(ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПрисвоения) КАК ДатаПрисвоения,
		|	МАКСИМУМ(ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПодтверждения) КАК ДатаПодтверждения,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд
		|ПОМЕСТИТЬ ВТ_Разряды
		|ИЗ
		|	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(, ) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
		|ГДЕ
		|	(ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен, ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта) В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаДляИтогов.Спортсмен,
		|				ВТ_ТаблицаДляИтогов.ВидСпорта
		|			ИЗ
		|				ВТ_ТаблицаДляИтогов КАК ВТ_ТаблицаДляИтогов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТаблицаДляИтогов.Ссылка КАК Ссылка,
		|	ВТ_ТаблицаДляИтогов.Спортсмен КАК Спортсмен,
		|	ЕСТЬNULL(ВТ_Разряды.Разряд, ""б/р"") КАК Разряд,
		|	ФизическиеЛица.ГодРождения КАК ГодРождения
		|ИЗ
		|	ВТ_ТаблицаДляИтогов КАК ВТ_ТаблицаДляИтогов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Разряды КАК ВТ_Разряды
		|		ПО ВТ_ТаблицаДляИтогов.Спортсмен = ВТ_Разряды.Спортсмен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ВТ_ТаблицаДляИтогов.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|ИТОГИ ПО
		|	Ссылка,
		|	ВТ_ТаблицаДляИтогов.Ссылка.ВидСпорта КАК ВидСпорта,
		|	ВТ_ТаблицаДляИтогов.Ссылка.Этап КАК Этап";
	
	Запрос.УстановитьПараметр("СписокДокументов", ОбъектыПечати);
	
	МассивДокументов = Новый Массив;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСсылка.Следующий() Цикл
			
			СтруктураДокумента = Новый Структура;
			
			СтруктураШапка = Новый Структура;
			СтруктураШапка.Вставить("ПолноеНаименование", ВРег(ВыборкаСсылка.Ссылка.Организация.ПолноеНаименование));
			СтруктураШапка.Вставить("НомерДокумента", ВыборкаСсылка.Ссылка.НомерДокумента);
			СтруктураШапка.Вставить("ДатаЗачисления", Формат(ВыборкаСсылка.Ссылка.ДатаЗачисления, "ДЛФ=D"));
			СтруктураДокумента.Вставить("ОбластьШапка", СтруктураШапка);
			
			МассивВидовСпорта = Новый Массив;
			
			ВыборкаВидСпорта = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидСпорта.Следующий() Цикл
				
				СтруктураВидСпорта = Новый Структура;
				Если ЗначениеЗаполнено(ВыборкаВидСпорта.Ссылка.ВидСпорта.Родитель) Тогда 
					СтруктураВидСпорта.Вставить("ВидСпорта", ВРег(ВыборкаВидСпорта.Ссылка.ВидСпорта.Родитель));
				Иначе
					СтруктураВидСпорта.Вставить("ВидСпорта", ВРег(ВыборкаВидСпорта.Ссылка.ВидСпорта));
				КонецЕсли;
			
				СтруктураОбластиСоревнование = Новый Структура;
				СтруктураОбластиСоревнование.Вставить("ОбластьВидСпорта", СтруктураВидСпорта);
				
				МассивВидовСпорта.Добавить(СтруктураОбластиСоревнование);
				
				МассивЭтапов = Новый Массив;
				
				ВыборкаЭтап = ВыборкаВидСпорта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЭтап.Следующий() Цикл
					
					СтруктураШапкаТаблицы = Новый Структура;
					СтруктураШапкаТаблицы.Вставить("Этап", ВыборкаЭтап.Ссылка.Этап);
					СтруктураОбластиШапкаТаблицы = Новый Структура;
					СтруктураОбластиШапкаТаблицы.Вставить("ОбластьШапкаТаблицы", СтруктураШапкаТаблицы);
					МассивЭтапов.Добавить(СтруктураОбластиШапкаТаблицы);
		
					МассивСтрокСпортсмены = Новый Массив;
					НомерСтрокиСпр = 1;
					
					ВыборкаДетальныеЗаписи = ВыборкаЭтап.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Спортсмен) Тогда
							
							СтруктураСтрокаСпортсмены = Новый Структура("НомерСтроки, Спортсмен, ГодРождения, Разряд");
							ЗаполнитьЗначенияСвойств(СтруктураСтрокаСпортсмены, ВыборкаДетальныеЗаписи);
							СтруктураСтрокаСпортсмены.НомерСтроки 	= Строка(НомерСтрокиСпр) + ".";
							НомерСтрокиСпр 							= НомерСтрокиСпр + 1;
							// Фамилия и Имя
							ЧастиИмени 								= СтрРазделить(ВыборкаДетальныеЗаписи.Спортсмен, " ", Ложь);
							Фамилия 								= ЧастиИмени[0];
							Имя 									= ЧастиИмени[1];
							СтруктураСтрокаСпортсмены.Спортсмен 	= Фамилия + " " + Имя;
							МассивСтрокСпортсмены.Добавить(СтруктураСтрокаСпортсмены);	
						Иначе
							ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Добавьте спортсменов которым необходимо присвоить разряд!'"));
						КонецЕсли;	
					КонецЦикла;
					
					МассивЭтапов.Добавить(МассивСтрокСпортсмены);
					
					СтруктураТренер = Новый Структура;
					СтруктураТренер.Вставить("Тренер", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаЭтап.Ссылка.Тренер.ФизическоеЛицо));
					СтруктураОбластиТренер = Новый Структура;
					СтруктураОбластиТренер.Вставить("ОбластьТренер", СтруктураТренер);
						
				КонецЦикла;
				
				МассивВидовСпорта.Добавить(МассивЭтапов);
				МассивВидовСпорта.Добавить(СтруктураОбластиТренер);
				
			КонецЦикла;
			// Подвал
			СтруктураПодвал = Новый Структура;
			СтруктураПодвал.Вставить("Директор", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаСсылка.Ссылка.Организация.Директор));
		
			СтруктураДокумента.Вставить("МассивВидовСпорта", МассивВидовСпорта);
			СтруктураДокумента.Вставить("ОбластьПодвал", СтруктураПодвал);
			
			МассивДокументов.Добавить(СтруктураДокумента);

		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивДокументов
	
КонецФункции	

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт 
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОЗачисленииСпортсменовНаЭтап") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
																	"ПФ_MXL_ПриказОЗачисленииСпортсменовНаЭтап", // Идентфикатор
																	"Приказ о зачислении спорстменов на этап", // Название (представление) 
								  СформироватьПечатнуюФормуПриказ(МассивОбъектов)); // Функция которая получает макет и его заполняет
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуПриказ(МассивОбъектовДляПечати) Экспорт  // Функция которая получает макет и заполняет его 
	
	Если ТипЗнч(МассивОбъектовДляПечати) = Тип("Массив") Тогда	
		МассивОбъектов = МассивОбъектовДляПечати;	
	Иначе	
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(МассивОбъектовДляПечати);	
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗачислениеСпортсменовНаЭтап.Ссылка КАК Ссылка,
		|	ЗачислениеСпортсменовНаЭтап.ДатаЗачисления КАК ДатаЗачисления
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Документ.ЗачислениеСпортсменовНаЭтап КАК ЗачислениеСпортсменовНаЭтап
		|ГДЕ
		|	ЗачислениеСпортсменовНаЭтап.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Данные.Ссылка КАК Ссылка,
		|	ЗачислениеСпортсменовНаЭтапСпортсмены.Спортсмен КАК Спортсмен,
		|	ВидыСпорта.Ссылка КАК ВидСпорта,
		|	ВТ_Данные.ДатаЗачисления КАК ДатаЗачисления
		|ПОМЕСТИТЬ ВТ_ТаблицаДляИтогов
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗачислениеСпортсменовНаЭтап.Спортсмены КАК ЗачислениеСпортсменовНаЭтапСпортсмены
		|		ПО ВТ_Данные.Ссылка = ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСпорта КАК ВидыСпорта
		|		ПО ВТ_Данные.Ссылка.ВидСпорта = ВидыСпорта.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Организация КАК Организация,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта КАК ВидСпорта,
		|	МАКСИМУМ(ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПрисвоения) КАК ДатаПрисвоения,
		|	МАКСИМУМ(ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПодтверждения) КАК ДатаПодтверждения,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд
		|ПОМЕСТИТЬ ВТ_Разряды
		|ИЗ
		|	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(, ) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Организация,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТаблицаДляИтогов.Ссылка КАК Ссылка,
		|	ВТ_ТаблицаДляИтогов.Спортсмен КАК Спортсмен,
		|	ВТ_ТаблицаДляИтогов.ВидСпорта КАК ВидСпорта,
		|	ЕСТЬNULL(ВТ_Разряды.Разряд, ""б/р"") КАК Разряд,
		|	ФизическиеЛица.ГодРождения КАК ГодРождения
		|ИЗ
		|	ВТ_ТаблицаДляИтогов КАК ВТ_ТаблицаДляИтогов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Разряды КАК ВТ_Разряды
		|		ПО ВТ_ТаблицаДляИтогов.Спортсмен = ВТ_Разряды.Спортсмен
		|			И ВТ_ТаблицаДляИтогов.ВидСпорта = ВТ_Разряды.ВидСпорта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ВТ_ТаблицаДляИтогов.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|ИТОГИ ПО
		|	Ссылка,
		|	ВТ_ТаблицаДляИтогов.Ссылка.ВидСпорта КАК ВидСпорта,
		|	ВТ_ТаблицаДляИтогов.Ссылка.Этап КАК Этап";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПутьКМакету = "Документ.ЗачислениеСпортсменовНаЭтап.ПФ_MXL_ПриказОЗачисленииСпортсменовНаЭтап";
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету); // Получаем макет
	
	ТабДок = Новый ТабличныйДокумент;  // Создаем новый ТабДок
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСсылка.Следующий() Цикл
			
			ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка"); // Получаем области из макета
			ОбластьШапка.Параметры.ПолноеНаименование 	= ВРег(ВыборкаСсылка.Ссылка.Организация.ПолноеНаименование);
			ОбластьШапка.Параметры.НомерДокумента 		= ВыборкаСсылка.Ссылка.НомерДокумента;
			ОбластьШапка.Параметры.ДатаЗачисления 		= Формат(ВыборкаСсылка.Ссылка.ДатаЗачисления, "ДЛФ=D");
		
			ТабДок.Вывести(ОбластьШапка);
	
			ВыборкаВидСпорта = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидСпорта.Следующий() Цикл
				
				ОбластьВидСпорта = Макет.ПолучитьОбласть("ОбластьВидСпорта");
				
				Если ЗначениеЗаполнено(ВыборкаВидСпорта.Ссылка.ВидСпорта.Родитель) Тогда 
					ОбластьВидСпорта.Параметры.ВидСпорта = ВРег(ВыборкаВидСпорта.Ссылка.ВидСпорта.Родитель);
				Иначе
					ОбластьВидСпорта.Параметры.ВидСпорта = ВРег(ВыборкаВидСпорта.Ссылка.ВидСпорта);
				КонецЕсли;
				
				ТабДок.Вывести(ОбластьВидСпорта);
				
				ВыборкаЭтап = ВыборкаВидСпорта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЭтап.Следующий() Цикл
					
					ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
					ОбластьШапкаТаблицы.Параметры.Этап = ВыборкаЭтап.Ссылка.Этап;
					ТабДок.Вывести(ОбластьШапкаТаблицы);
					
					НомерСтрокиСпр = 1;
					
					ВыборкаДетальныеЗаписи = ВыборкаЭтап.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Спортсмен) Тогда
							// Таблица спортсмены
							ОбластьСтрокаТаблицыСпортсмены 							= Макет.ПолучитьОбласть("ОбластьСтрокаТаблицыСпортсмены");
							ОбластьСтрокаТаблицыСпортсмены.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
							ОбластьСтрокаТаблицыСпортсмены.Параметры.НомерСтроки 	= Строка(НомерСтрокиСпр) + ".";
							НомерСтрокиСпр 											= НомерСтрокиСпр + 1;
							// Фамилия и Имя
							ЧастиИмени 												= СтрРазделить(ВыборкаДетальныеЗаписи.Спортсмен, " ", Ложь);
							Фамилия 												= ЧастиИмени[0];
							Имя 													= ЧастиИмени[1];
							ОбластьСтрокаТаблицыСпортсмены.Параметры.Спортсмен 		= Фамилия + " " + Имя;
							ТабДок.Вывести(ОбластьСтрокаТаблицыСпортсмены);
						Иначе
							ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Добавьте спортсменов которых необходимо зачислить на этап!'"));
						КонецЕсли;	
					КонецЦикла;
					
				ОбластьТренер = Макет.ПолучитьОбласть("ОбластьТренер");
				ОбластьТренер.Параметры.Тренер = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаЭтап.Ссылка.Тренер.ФизическоеЛицо);
				ТабДок.Вывести(ОбластьТренер);	
					
				КонецЦикла;
			КонецЦикла;
			// Подвал
			ОбластьПодвал = Макет.ПолучитьОбласть("ОбластьПодвал");
			ОбластьПодвал.Параметры.Директор = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаСсылка.Ссылка.Организация.Директор);
			
			ТабДок.Вывести(ОбластьПодвал);	
		КонецЦикла;
	КонецЕсли;
			
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	ТабДок.КлючПараметровПечати	= ПутьКМакету;
	ТабДок.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб 			= Истина;
	
	Возврат ТабДок;
	
КонецФункции	

#КонецОбласти
// }Рарус adilas #16630 -Печатная форма Приказа на присвоение разряда 2021.06.10

#КонецОбласти