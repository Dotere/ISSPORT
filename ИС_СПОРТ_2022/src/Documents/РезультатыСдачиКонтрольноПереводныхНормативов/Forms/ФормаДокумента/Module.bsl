
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// {Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	// {Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	Если РольДоступна("ПолныеПрава") Тогда
		 Элементы.Ответственный.Доступность = Истина;
	Иначе 	 
		 Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
	// }Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	// }Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	
    УправлениеУчебнымГодомСсылка = УчетСпортсменовСервер.ПолучитьДокументТекущегоУчебногоГода();
    Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
    
    СформироватьСтруктуруНормативовНаФорме();
    
    Если НЕ Объект.Ссылка.Пустая() Тогда
        ЗаполнитьДополнительныеДанныеНаФорме();
    Иначе
        УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
    КонецЕсли;
    
    // {Рарус adilas #13392 -Номер документа 2021.02.12
    Если Пользователи.РолиДоступны("АдминистраторСистемы, ПолныеПрава") Тогда
        Элементы.Номер.Доступность = Истина;
        Элементы.Номер.ТолькоПросмотр = Ложь;
    КонецЕсли;
    // }Рарус adilas #13392 -Номер документа 2021.02.12
	
	ЗаполнятьДопДанные = УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация; 
    Элементы.СоставУчастниковНаФормеМеждународнаяВозрастнаяГруппа.Видимость = ЗаполнятьДопДанные;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
    
    Если ИсточникВыбора.ИмяФормы = "Справочник.Нормативы.Форма.ФормаВыбора" Тогда
        
        СтруктураПроверки = ПроверитьНаличиеВыбранногоНорматива(ВыбранноеЗначение);
        
        ДобавитьНормативВГотовуюТаблицуНаФорму(СтруктураПроверки.МассивДобавляемыхЗначений);
        
        МассивПовторяющихсяЗначений = СтруктураПроверки.МассивПовторяющихсяЗначений;
        
        Если МассивПовторяющихсяЗначений.Количество() > 0 Тогда
            
            Сообщение = Новый СообщениеПользователю;
            
            Для каждого Элем Из МассивПовторяющихсяЗначений Цикл
                
                Сообщение.Текст = "Норматив "+Элем+" уже добавлен в табличную часть";
                Сообщение.Сообщить();
                
            КонецЦикла; 
            
        КонецЕсли; 
        
    КонецЕсли;
    
    Если ИсточникВыбора.ИмяФормы = "Документ.ЗаявкаНаПроведениеСоревнования.Форма.ФормаЗаполненияПоГруппам" Тогда
        МассивСтрокДляЗаполнения = Новый Массив;
        Для Каждого ВыбранныйУчастник Из ВыбранноеЗначение Цикл
            строкиТабличнойЧасти = СоставУчастниковНаФорме.НайтиСтроки(Новый Структура("Спортсмен",ВыбранныйУчастник));
            Если НЕ строкиТабличнойЧасти.Количество() = 0 Тогда
                Продолжить;
            КонецЕсли;	
            строкаУчастник = СоставУчастниковНаФорме.Добавить();
            строкаУчастник.Спортсмен = ВыбранныйУчастник;
            строкаУчастник.НомерСтроки = СоставУчастниковНаФорме.Количество();
            строкаУчастник.УникальныйИдентификаторИтоговогоБалла = СокрЛП(Новый УникальныйИдентификатор());
            МассивСтрокДляЗаполнения.Добавить(строкаУчастник.НомерСтроки-1);
            Модифицированность = Истина;
        КонецЦикла;
        Если Модифицированность Тогда
            ЗаполнитьДополнительныеДанныеНаФорме(, МассивСтрокДляЗаполнения);
        КонецЕсли;	
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    Если НЕ ПроверитьЗаполнение()Тогда
        Возврат;
    КонецЕсли;
    
    ПеренестиСтруктуруНормативовВТаблицуДокумента(Отказ, ПараметрыЗаписи);
    
    Если Отказ Тогда
        Возврат;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура УчебныйГодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодОткрытие(Элемент, СтандартнаяОбработка)
    УчетСпортсменовКлиент.УчебныйГодОткрытие(УправлениеУчебнымГодомСсылка,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСоздание(Элемент, СтандартнаяОбработка)
    УчетСпортсменовКлиент.УчебныйГодСоздание(ЭтаФорма, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастейНаФорме

&НаКлиенте
Процедура СоставУчастниковПриИзменении(Элемент)
    
    ПроведениеСоревнованийФормыКлиент.ПронумероватьТаблицуНаФорме(СоставУчастниковНаФорме);
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковНаФормеСпортсменПриИзменении(Элемент)
    
    ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
    ЗаполнитьДополнительныеДанныеНаФорме((ТекДанные.НомерСтроки-1),);
    Если НЕ ЗначениеЗаполнено(ТекДанные.УникальныйИдентификаторИтоговогоБалла) Тогда
        ТекДанные.УникальныйИдентификаторИтоговогоБалла = СокрЛП(Новый УникальныйИдентификатор());
    КонецЕсли;	
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковезультатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    
    ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
    
    Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
    
    ТекДанные["Выбор_" + Гуид] = Истина;
    
    Если НЕ ЗначениеЗаполнено(ТекДанные["Норматив_" + Гуид]) Тогда
        массивСтрока_ = ТаблицаРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива",Гуид));
        ТекДанные["Норматив_" + Гуид] = массивСтрока_[0].Норматив;
        ТекДанные["ТипРезультата_" + Гуид] = ПолучитьТипРезультата(массивСтрока_[0].Норматив);
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ТекДанные["УникальныйИдентификаторСтрокиНорматива"]) Тогда
        ТекДанные["УникальныйИдентификаторСтрокиНорматива"] = Гуид;
    КонецЕсли;
    
    Оповещение = Новый ОписаниеОповещения("СоставУчастниковезультатНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекДанные, Гуид", ТекДанные, Гуид));
    
    ОткрытьФорму("Документ.РезультатыСдачиКонтрольноПереводныхНормативов.Форма.ФормаВводаРезультата", 
    Новый Структура("Норматив, Результат", ТекДанные["Норматив_" + Гуид], ТекДанные["Результат_" + Гуид]),
    ЭтотОбъект,,,,
    Оповещение,
    РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковВыборПриИзменении(Элемент)
    
    ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
    
    Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
    
    Если ТекДанные["Выбор_" + Гуид] И НЕ ЗначениеЗаполнено(ТекДанные["Норматив_" + Гуид]) Тогда
        УстановитьЗначенияРеквизитовНормативаПриИзменении(ТекДанные, Гуид);
    Иначе
        ТекДанные["Норматив_" + Гуид] = "";
        ТекДанные["ТипРезультата_" + Гуид] = "";
        ТекДанные["УникальныйИдентификаторСтрокиНорматива"] = "";
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковРезультатСдачиНормативаПриИзменении(Элемент)
    
    ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
    
    Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
    
    Если ЗначениеЗаполнено(ТекДанные["РезультатСдачиНорматива_" + Гуид]) Тогда
        ТекДанные["Выбор_" + Гуид] = Истина;
    Иначе
        ТекДанные["Выбор_" + Гуид] = Ложь;
    КонецЕсли;	
    
    Если НЕ ЗначениеЗаполнено(ТекДанные["Норматив_" + Гуид]) Тогда
        УстановитьЗначенияРеквизитовНормативаПриИзменении(ТекДанные, Гуид);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковРезультатПриИзменении(Элемент)
    ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
    Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
    Норматив = ТекДанные["Норматив_" + Гуид];
    
    ТекДанные["Выбор_" + Гуид] = Истина;
    
    Если НЕ ЗначениеЗаполнено(ТекДанные["Норматив_" + Гуид]) Тогда
        массивСтрока_ = ТаблицаРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива",Гуид));
        ТекДанные["Норматив_" + Гуид] = массивСтрока_[0].Норматив;
        ТекДанные["ТипРезультата_" + Гуид] = ПолучитьТипРезультата(массивСтрока_[0].Норматив);
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ТекДанные["УникальныйИдентификаторСтрокиНорматива"]) Тогда
        ТекДанные["УникальныйИдентификаторСтрокиНорматива"] = Гуид;
    КонецЕсли;
    ТипРезультатаНорматива = ПолучитьТипРезультата(ТекДанные["Норматив_" + Гуид]);
    Если ТипРезультатаНорматива = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Булево") Тогда
        ТекДанные["РезультатБулево_" + Гуид] = ТекДанные["Результат_" + Гуид];
    ИначеЕсли ТипРезультатаНорматива = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Время") Тогда
        //УчетСпортсменовОбщегоНазначенияКлиентСервер.ПроверитьРезультатСтроковыйПриИзменении(ТекДанные["Результат_" + Гуид]);
        ТекДанные["РезультатЧисло_" + Гуид] = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(ТекДанные["Результат_" + Гуид]);		
    Иначе
        ТекДанные["РезультатЧисло_" + Гуид] = ТекДанные["Результат_" + Гуид];
    КонецЕсли;
    
    
    //ТекДанные[КлючЗначение.Ключ + "_" + Гуид] = КлючЗначение.Значение;
    
    ТекДанные["Выбор_" + Гуид] = Истина;
    ПроверитьРезультатНорматива(Гуид, ТекДанные.Спортсмен, ТекДанные["Норматив_" + Гуид]);
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковРезультатОчистка(Элемент, СтандартнаяОбработка)
    
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковБаллПриИзменении(Элемент)
    
    ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
    
    Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
    
    Если ТекДанные["Балл_" + Гуид] <> 0 И НЕ ЗначениеЗаполнено(ТекДанные["Норматив_" + Гуид]) Тогда
        ТекДанные["Выбор_" + Гуид] = Истина;
        УстановитьЗначенияРеквизитовНормативаПриИзменении(ТекДанные, Гуид);
    ИначеЕсли ТекДанные["Балл_" + Гуид] = 0 Тогда
        ТекДанные["Выбор_" + Гуид] = Ложь;
        ТекДанные["Норматив_" + Гуид] = "";
        ТекДанные["ТипРезультата_" + Гуид] = "";
        ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид] = "";
        ТекДанные["РезультатСдачиНорматива_" + Гуид] = "";
    Иначе
        ТекДанные["Выбор_" + Гуид] = Истина;
        ТекДанные["РезультатСдачиНорматива_" + Гуид] = "Сдал";
    КонецЕсли;
    
    ТекДанные.ИтоговыйБалл = 0;
    Для Каждого СтрокаРазбора Из ТаблицаРазбора Цикл
        Гуид = СтрокаРазбора.УникальныйИдентификаторСтрокиНорматива;
        ТекДанные.ИтоговыйБалл = ТекДанные.ИтоговыйБалл + ТекДанные["Балл_" + Гуид];
    КонецЦикла;	
    
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    ЗаполнитьНовыйИтоговыйИдентификатор = Копирование;
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
    
    Если ЗаполнитьНовыйИтоговыйИдентификатор И НоваяСтрока Тогда
        Элемент.ТекущиеДанные.УникальныйИдентификаторИтоговогоБалла = СокрЛП(Новый УникальныйИдентификатор());
        ЗаполнитьНовыйИтоговыйИдентификатор = Ложь;
    КонецЕсли;	
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаДобавитьНорматив(Команда) Экспорт
    
    ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор", Ложь, Истина, Истина);
    ОткрытьФорму("Справочник.Нормативы.ФормаВыбора",ПараметрыПодбора,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьНорматив(Команда) Экспорт
    
    КомандаУдалитьНормативНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьМестаИБаллы(Команда)
    
    Элементы.СоставУчастниковПересчитатьМестаИБаллы.Доступность = Ложь;
    
    Состояние("Выполняется подсчет результатов....");
    
    ПересчитатьМестаИБаллыНаСервере();
    Элементы.СоставУчастниковПересчитатьМестаИБаллы.Доступность = Истина;
    
    Состояние("Подсчет результатов выполнен.");
    
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыделитьВсе(Команда) Экспорт
    
    ПроведениеСоревнованийФормыКлиент.ВыделитьВсехУчастниковНаФорме(ЭтотОбъект, "ТаблицаРазбора", "УникальныйИдентификаторСтрокиНорматива");
    
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВсе(Команда) Экспорт
    
    ПроведениеСоревнованийФормыКлиент.УбратьВыделениеВсехУчастниковНаФорме(ЭтотОбъект, "ТаблицаРазбора", "УникальныйИдентификаторСтрокиНорматива");
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЭтапам(Команда)
    
    Если НЕ ЭтотОбъект.ПроверитьЗаполнение() Тогда
        Возврат;
    КонецЕсли;
    
    СтруктураПараметров = Новый Структура("УчебныйГод, Организация, ТекущаяДата, ТренерСборной, ВидСпорта",
    Объект.УчебныйГод, Объект.Организация, Объект.Дата, Объект.Тренер, Объект.ВидСпорта);
    
    ОткрытьФорму("Документ.ЗаявкаНаПроведениеСоревнования.Форма.ФормаЗаполненияПоГруппам",Новый Структура("СтруктураПараметров",СтруктураПараметров),ЭтаФорма);
    
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаСледующийЭтап(Команда)
    Если не Объект.Проведен Тогда
        Оповещение = Новый ОписаниеОповещения("ПеревестиНаСледующийЭтапЗавершение",
        ЭтотОбъект);	
        
        ПоказатьВопрос(Оповещение,
        "Документ не проведен. Провести документ?",
        РежимДиалогаВопрос.ДаНет,
        0);
        Возврат;
    Иначе
        ПеревестиНаСледующийЭтапНаСервере();  
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаСледующийЭтапЗавершение(Результат,ДопПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
        ПеревестиНаСледующийЭтапНаСервере();
        
    КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеСтруктурыРеквизитовНаФорме

&НаСервере
Процедура СформироватьСтруктуруНормативовНаФорме(ЗаполнениеПоКоманде = Ложь)
    
    таблицаДляРазбора = Объект.Нормативы.Выгрузить();	
    
    СоставУчастников = Объект.СоставУчастников.Выгрузить();
    СоставУчастников.Свернуть("Спортсмен,ТекущийЭтап, СледующийЭтап, МеждународнаяВозрастнаяГруппа, Группа, УникальныйИдентификаторИтоговогоБалла");
    СоставУчастниковНаФорме.Загрузить(СоставУчастников);
    
    Для Индекс = 0 По ЭтотОбъект.СоставУчастниковНаФорме.Количество()-1 Цикл
        СоставУчастниковНаФорме[Индекс].НомерСтроки = Индекс+1;
    КонецЦикла;
    
    массивТипов = Новый Массив;
    
    НовыеРеквизиты = Новый Массив;	
    Для Каждого СтрокаНорматив Из таблицаДляРазбора Цикл
        Если СтрокаНорматив.Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Число тогда
            массивТипов.Добавить(Тип("Число"));
        ИначеЕсли  СтрокаНорматив.Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Булево тогда
            массивТипов.Добавить(Тип("Булево"));
        Иначе
            массивТипов.Добавить(Тип("Строка"));
        КонецЕсли;
        гуид = СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива;
        ДобавитьРеквизитыФормыПоЗначениюНорматива(НовыеРеквизиты, гуид, массивТипов);
        СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива = гуид;
    КонецЦикла;
    
    ИзменитьРеквизиты(НовыеРеквизиты);
    
    Для Каждого СтрокаНорматив Из таблицаДляРазбора Цикл
        
        ВыделятьЦветом = НЕ ВыделятьЦветом; 
        
        ГруппаНорматив                          = Элементы.Добавить("Группа" + СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива, Тип("ГруппаФормы"), Элементы.ГруппаНормативы);	
        ГруппаНорматив.Заголовок                = СокрЛП(СтрокаНорматив.Норматив);
        ГруппаНорматив.ОтображатьВШапке         = Истина;
        ГруппаНорматив.Вид                      = ВидГруппыФормы.ГруппаКолонок;
        ГруппаНорматив.Группировка              = ГруппировкаКолонок.Горизонтальная;
        // {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
        ГруппаНорматив.ШрифтЗаголовка           = ШрифтыСтиля.ОбычныйШрифт13;
        // }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
        ДобавитьКолонкиПоЗначениюНорматива(СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива, ГруппаНорматив, ВыделятьЦветом, СтрокаНорматив.Норматив.ТипРезультата);
        
    КонецЦикла;
    
    Если НЕ ЗаполнениеПоКоманде Тогда
        
        КомандаДобавитьНорматив                     = Команды.Добавить("ДобавитьНорматив");
        КомандаДобавитьНорматив.Заголовок           = "Добавить норматив";
        КомандаДобавитьНорматив.Действие            = "КомандаДобавитьНорматив";
        КомандаДобавитьНорматив.Картинка            = БиблиотекаКартинок.ДобавитьСтраницу;
        КомандаДобавитьНорматив.Отображение         = ОтображениеКнопки.КартинкаИТекст;
        
        КомандаУдалитьНорматив                      = Команды.Добавить("УдалитьНорматив");
        КомандаУдалитьНорматив.Заголовок            = "Удалить норматив";
        КомандаУдалитьНорматив.Действие             = "КомандаУдалитьНорматив";
        КомандаУдалитьНорматив.Картинка             = БиблиотекаКартинок.ВнешняяКомпонентаНеДоступна;
        КомандаУдалитьНорматив.Отображение          = ОтображениеКнопки.КартинкаИТекст;
        
        КомандаВыделитьВсех                         = Команды.Добавить("ВыделитьВсе");
        КомандаВыделитьВсех.Заголовок               = "Выделить все";
        КомандаВыделитьВсех.Действие                = "КомандаВыделитьВсе";
        КомандаВыделитьВсех.Картинка                = БиблиотекаКартинок.УстановитьФлажки;
        КомандаВыделитьВсех.Отображение             = ОтображениеКнопки.Картинка;
        
        КомандаУдалитьВсех                          = Команды.Добавить("УдалитьВсе");
        КомандаУдалитьВсех.Заголовок                = "Удалить все";
        КомандаУдалитьВсех.Действие                 = "КомандаУдалитьВсе";
        КомандаУдалитьВсех.Картинка                 = БиблиотекаКартинок.СнятьФлажки;
        КомандаУдалитьВсех.Отображение              = ОтображениеКнопки.Картинка;
        
        КнопкаДобавитьНорматив                      = Элементы.Добавить("ДобавитьНорматив", Тип("КнопкаФормы"),Элементы.СоставУчастниковКоманднаяПанель);
        КнопкаДобавитьНорматив.ИмяКоманды           = "ДобавитьНорматив";
        КнопкаДобавитьНорматив.Вид                  = ВидКнопкиФормы.КнопкаКоманднойПанели;
        
        КнопкаВыделитьВсех                          = Элементы.Добавить("ВыделитьВсе", Тип("КнопкаФормы"),Элементы.ГруппаВыделитьУдалитьВсе);
        КнопкаВыделитьВсех.ИмяКоманды               = "ВыделитьВсе";
        КнопкаВыделитьВсех.Вид                      = ВидКнопкиФормы.КнопкаКоманднойПанели;
        
        КнопкаУдалитьВсех                           = Элементы.Добавить("УдалитьВсе", Тип("КнопкаФормы"),Элементы.ГруппаВыделитьУдалитьВсе);
        КнопкаУдалитьВсех.ИмяКоманды                = "УдалитьВсе";
        КнопкаУдалитьВсех.Вид                       = ВидКнопкиФормы.КнопкаКоманднойПанели;
        
        КнопкаДобавитьНормативКнтМеню               = Элементы.Добавить("СоставУчастниковКонтекстноеМенюДобавитьНорматив", Тип("КнопкаФормы"), Элементы.СоставУчастниковКонтекстноеМеню);
        КнопкаДобавитьНормативКнтМеню.ИмяКоманды    = "ДобавитьНорматив";
        
        КнопкаУдалитьНормативКнтМеню                = Элементы.Добавить("СоставУчастниковКонтекстноеМенюУдалитьНорматив", Тип("КнопкаФормы"), Элементы.СоставУчастниковКонтекстноеМеню);
        КнопкаУдалитьНормативКнтМеню.ИмяКоманды     = "УдалитьНорматив";
        
    КонецЕсли;
    
    ЗаполнитьПолученнуюСтруктураИзОбъекта(таблицаДляРазбора);
    
    ТаблицаРазбора.Загрузить(таблицаДляРазбора);
    
    ЭтаФорма.Прочитать();
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиПоЗначениюНорматива(УникальныйИдентификаторСтрокиНорматива, ГруппаНорматив, ВыделятьЦветом, ТипРезультата = Неопределено) 
    
    ДобавитьЭлемент("СоставУчастниковНорматив_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, "СоставУчастниковНаФорме." + "Норматив_" + УникальныйИдентификаторСтрокиНорматива, Ложь, ВыделятьЦветом);
    
    ДобавитьЭлемент("СоставУчастниковВыбор_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеФлажка, 
    "СоставУчастниковНаФорме." + "Выбор_" + УникальныйИдентификаторСтрокиНорматива, 
    Истина,
    ВыделятьЦветом, 
    Ложь,
    Новый Структура("ИмяСобытия,НаименованиеПроцедуры","ПриИзменении", "СоставУчастниковВыборПриИзменении"));
    
    ДобавитьЭлемент("СоставУчастниковРезультатСдачиНорматива_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, 
    "СоставУчастниковНаФорме." + "РезультатСдачиНорматива_" + УникальныйИдентификаторСтрокиНорматива, 
    Истина, 
    ВыделятьЦветом,
    Истина,
    Новый Структура("ИмяСобытия,НаименованиеПроцедуры","ПриИзменении", "СоставУчастниковРезультатСдачиНормативаПриИзменении"),
    Ложь,,
    Истина);  
    
    ДобавитьЭлемент("СоставУчастниковРезультатЧисло_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, "СоставУчастниковНаФорме." + "РезультатЧисло_" + УникальныйИдентификаторСтрокиНорматива, Ложь, ВыделятьЦветом);
    
    ДобавитьЭлемент("СоставУчастниковРезультатБулево_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеФлажка, "СоставУчастниковНаФорме." + "РезультатБулево_" + УникальныйИдентификаторСтрокиНорматива, Ложь, ВыделятьЦветом);
    
    ДобавитьЭлемент("СоставУчастниковРезультат_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, 
    "СоставУчастниковНаФорме." + "Результат_" + УникальныйИдентификаторСтрокиНорматива, 
    Истина, 
    ВыделятьЦветом,
    Истина,
    Новый Структура("ИмяСобытия,НаименованиеПроцедуры","ПриИзменении", "СоставУчастниковРезультатПриИзменении"),//Новый Структура("ИмяСобытия,НаименованиеПроцедуры","НачалоВыбора", "СоставУчастниковезультатНачалоВыбора"),
    Истина,,,
    ТипРезультата);
    
    ДобавитьЭлемент("СоставУчастниковБалл_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеВвода, 
    "СоставУчастниковНаФорме." + "Балл_" + УникальныйИдентификаторСтрокиНорматива, 
    Истина, 
    ВыделятьЦветом,,
    Новый Структура("ИмяСобытия,НаименованиеПроцедуры","ПриИзменении", "СоставУчастниковБаллПриИзменении"));   
    
    ДобавитьЭлемент("СоставУчастниковТипРезультата_" + УникальныйИдентификаторСтрокиНорматива, Тип("ПолеФормы"), ГруппаНорматив, ВидПоляФормы.ПолеФлажка, "СоставУчастниковНаФорме." + "ТипРезультата_" + УникальныйИдентификаторСтрокиНорматива, Ложь, ВыделятьЦветом);
    
КонецПроцедуры	

&НаСервере
Процедура ДобавитьРеквизитыФормыПоЗначениюНорматива(НовыеРеквизиты, гуид, массивТипов)
    
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("Норматив_" + гуид                , Новый ОписаниеТипов("СправочникСсылка.Нормативы")               , "СоставУчастниковНаФорме"        , "Норматив"                               , Истина));
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("ТипРезультата_" + гуид           , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРезультатов")       , "СоставУчастниковНаФорме"        , "ТипыРезультатов"                        , Истина));
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("Выбор_" + гуид                   , Новый ОписаниеТипов("Булево")                                   , "СоставУчастниковНаФорме"        , "Используется"                           , Истина));
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("РезультатЧисло_" + гуид          , Новый ОписаниеТипов("Число")                                    , "СоставУчастниковНаФорме"        , "РезультатЧисло"                         , Истина));
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("Балл_" + гуид                    , Новый ОписаниеТипов("Число")                                    , "СоставУчастниковНаФорме"        , "Балл"                                   , Истина));
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("РезультатБулево_" + гуид         , Новый ОписаниеТипов("Булево")                                   , "СоставУчастниковНаФорме"        , "РезультатБулево"                        , Истина));
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("Результат_" + гуид               , Новый ОписаниеТипов(массивТипов)                                , "СоставУчастниковНаФорме"        , "Результат"                              , Истина));
    НовыеРеквизиты.Добавить(Новый РеквизитФормы("РезультатСдачиНорматива_" + гуид , Новый ОписаниеТипов("Строка")                                   , "СоставУчастниковНаФорме"        , "Результат сдачи норматива"              , Истина));
    
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПолученнуюСтруктураИзОбъекта(ТаблицаНормативов)
    
    ТаблицаПопытокДляЗапроса = Новый ТаблицаЗначений;
    ТаблицаПопытокДляЗапроса.Колонки.Добавить("Гуид", Новый ОписаниеТипов("Строка"));
    ТаблицаПопытокДляЗапроса.Колонки.Добавить("УникальныйИдентификаторСтрокиНорматива", Новый ОписаниеТипов("Строка"));
    
    Для Каждого СтрокаНорматив Из ТаблицаНормативов Цикл
        массивСтрокСоставУчастников = Объект.СоставУчастников.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива", СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива));
        
        Гуид = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива,"-","_");
        ТипРезультата = СтрокаНорматив.Норматив.ТипРезультата;
        
        Для Каждого СтрокаСоставУчастников Из массивСтрокСоставУчастников Цикл
            массивСтрокТаблицаСоставаУчастников = СоставУчастниковНаФорме.НайтиСтроки(Новый Структура("Спортсмен,МеждународнаяВозрастнаяГруппа,Группа,УникальныйИдентификаторИтоговогоБалла",
            СтрокаСоставУчастников.Спортсмен, СтрокаСоставУчастников.МеждународнаяВозрастнаяГруппа, СтрокаСоставУчастников.Группа, СтрокаСоставУчастников.УникальныйИдентификаторИтоговогоБалла));
            
            Для Каждого строкаТаблицаСоставаУчастников Из массивСтрокТаблицаСоставаУчастников Цикл
                
                Если НЕ ЗначениеЗаполнено(СтрокаСоставУчастников.УникальныйИдентификаторСтрокиНорматива)Тогда
                    СтрокаСоставУчастников.УникальныйИдентификаторСтрокиНорматива = СокрЛП(Новый УникальныйИдентификатор());
                КонецЕсли;
                
                строкиИтогов = Объект.ИтоговыеБаллыСпортсмена.НайтиСтроки(Новый Структура("УникальныйИдентификаторИтоговогоБалла", строкаТаблицаСоставаУчастников.УникальныйИдентификаторИтоговогоБалла));
                Если НЕ строкиИтогов.Количество() = 0 Тогда
                    строкаТаблицаСоставаУчастников.ИтоговыйБалл = строкиИтогов[0].Балл;
                    строкаТаблицаСоставаУчастников.УникальныйИдентификаторИтоговогоБалла = строкиИтогов[0].УникальныйИдентификаторИтоговогоБалла;
                Иначе
                    строкаТаблицаСоставаУчастников.УникальныйИдентификаторИтоговогоБалла = СокрЛП(Новый УникальныйИдентификатор());
                КонецЕсли;	
                
                строкаТаблицаСоставаУчастников["УникальныйИдентификаторСтрокиНорматива"] = Гуид;
                
                Если ЗначениеЗаполнено(СтрокаСоставУчастников.Норматив) Тогда
                    
                    строкаТаблицаСоставаУчастников["Норматив_" + Гуид] = СтрокаНорматив.Норматив;
                    строкаТаблицаСоставаУчастников["Выбор_" + Гуид] = Истина;
                    
                КонецЕсли;
                
                строкаТаблицаСоставаУчастников["ТипРезультата_" + Гуид]           = ТипРезультата;
                строкаТаблицаСоставаУчастников["Балл_" + Гуид]                    = СтрокаСоставУчастников.Балл;
                строкаТаблицаСоставаУчастников["РезультатБулево_" + Гуид]         = СтрокаСоставУчастников.РезультатБулево;
                строкаТаблицаСоставаУчастников["РезультатСдачиНорматива_" + Гуид] = СтрокаСоставУчастников.РезультатСдачиНорматива;
                строкаТаблицаСоставаУчастников["РезультатЧисло_" + Гуид]  = Формат(СтрокаСоставУчастников.РезультатЧисло, "ЧН=0");
                Если ТипРезультата = Перечисления.ТипыРезультатов.Булево Тогда
                    строкаТаблицаСоставаУчастников["Результат_" + Гуид]           = ?(СтрокаСоставУчастников.РезультатБулево, "Выполнил", "Не выполнил");
                ИначеЕсли ТипРезультата = Перечисления.ТипыРезультатов.Время Тогда
                    строкаТаблицаСоставаУчастников["Результат_" + Гуид]           = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(СтрокаСоставУчастников.РезультатЧисло);
                Иначе
                    строкаТаблицаСоставаУчастников["Результат_" + Гуид]           = Формат(СтрокаСоставУчастников.РезультатЧисло, "ЧН=0");;
                КонецЕсли;
                
            КонецЦикла;
            
        КонецЦикла;	
        
    КонецЦикла;	
    
КонецПроцедуры

&НаСервере
Процедура УдалитьВсеКолонкиНормативовНаФорме()
    
    МассивУдаляемыхРеквизитов = Новый Массив;
    
    Для Каждого строкаНорматив Из ТаблицаРазбора Цикл
        
        УникальныйИдентификаторНорматива = СтрЗаменить(строкаНорматив.УникальныйИдентификаторСтрокиНорматива,"-","_");
        
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Выбор_"                   + УникальныйИдентификаторНорматива);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Норматив_"                + УникальныйИдентификаторНорматива);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатБулево_"         + УникальныйИдентификаторНорматива);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатЧисло_"          + УникальныйИдентификаторНорматива);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Результат_"               + УникальныйИдентификаторНорматива);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Балл_"                    + УникальныйИдентификаторНорматива);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатСдачиНорматива_" + УникальныйИдентификаторНорматива);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.ТипРезультата_"           + УникальныйИдентификаторНорматива);
        
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.УникальныйИдентификаторСтрокиНорматива_"   + УникальныйИдентификаторНорматива);
        
        Элементы.Удалить(Элементы["СоставУчастниковНорматив_"             + УникальныйИдентификаторНорматива]);
        Элементы.Удалить(Элементы["СоставУчастниковВыбор_"                + УникальныйИдентификаторНорматива]);
        
    КонецЦикла;
    
    ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
    
    СоставУчастниковНаФорме.Очистить();
    ТаблицаРазбора.Очистить();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормированиеНормативов

&НаСервере
Процедура ДобавитьНормативВГотовуюТаблицуНаФорму(ВыбранныеНормативы) Экспорт
    
    таблицаДобавленныхНормативов = ТаблицаРазбора.Выгрузить();
    таблицаДобавленныхНормативов.Очистить();
    
    массивТипов = Новый Массив;	
    НовыеРеквизиты = Новый Массив;	
    Для Каждого Норматив Из ВыбранныеНормативы Цикл
        Если Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Число тогда
            массивТипов.Добавить(Тип("Число"));
        ИначеЕсли Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Булево тогда
            массивТипов.Добавить(Тип("Булево"));
        Иначе
            массивТипов.Добавить(Тип("Строка"));
        КонецЕсли;
        
        УникальныйИдентификаторНорматива = СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор()),"-","_");
        ДобавитьРеквизитыФормыПоЗначениюНорматива(НовыеРеквизиты, УникальныйИдентификаторНорматива, массивТипов);
        
        строкаДобавленныхНормативов = таблицаДобавленныхНормативов.Добавить();
        строкаДобавленныхНормативов.Норматив = Норматив;
        строкаДобавленныхНормативов.УникальныйИдентификаторСтрокиНорматива = УникальныйИдентификаторНорматива;
        
        строкаДляРазбора = ТаблицаРазбора.Добавить();
        ЗаполнитьЗначенияСвойств(строкаДляРазбора,строкаДобавленныхНормативов);
        
    КонецЦикла;
    
    ИзменитьРеквизиты(НовыеРеквизиты);
    
    Для Каждого СтрокаНорматив Из таблицаДобавленныхНормативов Цикл
        
        ВыделятьЦветом = НЕ ВыделятьЦветом;
        
        Гуид = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива,"-","_");
        
        ГруппаНорматив                          = Элементы.Добавить("Группа" + Гуид, Тип("ГруппаФормы"), Элементы.ГруппаНормативы);	
        ГруппаНорматив.Заголовок                = Строка(СтрокаНорматив.Норматив);
        ГруппаНорматив.ОтображатьВШапке         = Истина;
        ГруппаНорматив.Вид                      = ВидГруппыФормы.ГруппаКолонок;
        ГруппаНорматив.Группировка              = ГруппировкаКолонок.Горизонтальная; 
        // {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
        ГруппаНорматив.ШрифтЗаголовка           = ШрифтыСтиля.ОбычныйШрифт13;
        // }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
        
        ДобавитьКолонкиПоЗначениюНорматива(Гуид, ГруппаНорматив, ВыделятьЦветом, СтрокаНорматив.Норматив.ТипРезультата);
        
    КонецЦикла;
    
    ЗаполнитьПолученнуюСтруктураИзОбъекта(таблицаДобавленныхНормативов);	
    
КонецПроцедуры

&НаСервере
Процедура КомандаУдалитьНормативНаСервере()
    
    ТекущийЭлемент = ЭтотОбъект.Элементы.СоставУчастников.ТекущийЭлемент;
    
    Если Найти(ТекущийЭлемент.Имя, "_") = 0 Тогда
        
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран норматив для удаления.
        |Выделите колонку с нормативом, которую необходимо удалить и повторите команду.");
        Возврат;
        
    Иначе
        
        Гуид = Сред(ТекущийЭлемент.Имя,Найти(ТекущийЭлемент.Имя,"_")+1);
        
        МассивУдаляемыхРеквизитов = Новый Массив;
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Выбор_" + Гуид);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Норматив_" + Гуид);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.ТипРезультата_" + Гуид);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатЧисло_" + Гуид);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Балл_" + Гуид);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатБулево_" + Гуид);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.Результат_" + Гуид);
        МассивУдаляемыхРеквизитов.Добавить("СоставУчастниковНаФорме.РезультатСдачиНорматива_" + Гуид);
        
        ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
        
        Для Каждого ПодчиненныйЭлемент Из Элементы["Группа" + Гуид].ПодчиненныеЭлементы Цикл
            УдалитьЭлемент(ПодчиненныйЭлемент.Имя);
        КонецЦикла;	
        
        УдалитьЭлемент("Группа" + Гуид);
        
        массивСтрокДляУдаления = ТаблицаРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива",гуид));
        Для Каждого строкаДляУдаления Из массивСтрокДляУдаления Цикл
            ЭтотОбъект.ТаблицаРазбора.Удалить(строкаДляУдаления);
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияРеквизитовНормативовПриИзменении

&НаКлиенте
Процедура УстановитьЗначенияРеквизитовНормативаПриИзменении(ТекДанные, Гуид)
    
    массивСтрока_ = ТаблицаРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторСтрокиНорматива",Гуид));
    ТекДанные["Норматив_" + Гуид] = массивСтрока_[0].Норматив;
    ТекДанные["ТипРезультата_" + Гуид] = ПолучитьТипРезультата(массивСтрока_[0].Норматив);
    
    Если НЕ ЗначениеЗаполнено(ТекДанные["УникальныйИдентификаторСтрокиНорматива"]) Тогда
        ТекДанные["УникальныйИдентификаторСтрокиНорматива"] = Гуид;
    КонецЕсли;
    
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьТипРезультата(Норматив)
    Возврат Норматив.ТипРезультата
КонецФункции

#КонецОбласти	

&НаСервере
Процедура УдалитьЭлемент(ИмяЭлемента)
    
    Элементы.Удалить(Элементы[ИмяЭлемента]);
    
КонецПроцедуры	

&НаСервере
Процедура ДобавитьЭлемент(ИмяЭлемента, ТипЭлемента, Родитель, Вид, ПутьКДанным, Видимость, ВыделятьЦветом, Заголовок = Истина, Действие = Неопределено, ДоступноРедактирование = Истина, ПредставлениеНуля = Ложь, СписокВыбора = Ложь, ТипРезультата = Неопределено)
    
    НовыйЭлементНорматив                    = Элементы.Добавить(ИмяЭлемента, ТипЭлемента, Родитель); 
    НовыйЭлементНорматив.ПутьКДанным        = ПутьКДанным;
    НовыйЭлементНорматив.Вид                = Вид; 
    
    Если ТипРезультата <> Неопределено Тогда
        Если ТипРезультата = Перечисления.ТипыРезультатов.Булево Тогда
            //НовыйЭлементНорматив.Вид = ВидПоляФормы.ПолеПереключателя;
            НовыйЭлементНорматив.РежимВыбораИзСписка = Истина;

            НовыйЭлементНорматив.СписокВыбора.Добавить(Истина,"Выполнил");
            НовыйЭлементНорматив.СписокВыбора.Добавить(Ложь, "Не выполнил");
            НовыйЭлементНорматив.Формат = "БЛ='Не выполнил'; БИ=Выполнил"; 
            НовыйЭлементНорматив.ФорматРедактирования = "БЛ='Не выполнил'; БИ=Выполнил"; 
            НовыйЭлементНорматив.ВыбиратьТип = Ложь;

        ИначеЕсли ТипРезультата = Перечисления.ТипыРезультатов.Время Тогда
            НовыйЭлементНорматив.Вид = ВидПоляФормы.ПолеВвода;
            НовыйЭлементНорматив.Маска = "99:99:99:999";
            НовыйЭлементНорматив.ВыбиратьТип = Ложь;
        ИначеЕсли ТипРезультата = Перечисления.ТипыРезультатов.Число Тогда
            НовыйЭлементНорматив.Вид = ВидПоляФормы.ПолеВвода;
            НовыйЭлементНорматив.ВыбиратьТип = Ложь;
        КонецЕсли;
    КонецЕсли;
    
    НовыйЭлементНорматив.Видимость          = Видимость;
    Если ВыделятьЦветом Тогда
        // {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
        НовыйЭлементНорматив.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
        НовыйЭлементНорматив.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
        // }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
    КонецЕсли;
    Если НЕ Заголовок Тогда
        НовыйЭлементНорматив.Заголовок = " ";
    КонецЕсли;
    Если НЕ Действие = Неопределено Тогда
        НовыйЭлементНорматив.УстановитьДействие(Действие.ИмяСобытия, Действие.НаименованиеПроцедуры);
    КонецЕсли;
    Если НЕ ДоступноРедактирование Тогда
        НовыйЭлементНорматив.РедактированиеТекста = Ложь;
        НовыйЭлементНорматив.КнопкаОчистки = Истина;
        НовыйЭлементНорматив.УстановитьДействие("Очистка", "СоставУчастниковРезультатОчистка");
    КонецЕсли;
    Если ПредставлениеНуля Тогда
        НовыйЭлементНорматив.Формат = "ЧН=0";
    КонецЕсли;
    Если СписокВыбора Тогда
        НовыйЭлементНорматив.РежимВыбораИзСписка = Истина;
        НовыйЭлементНорматив.СписокВыбора.Добавить("Сдал");
        НовыйЭлементНорматив.СписокВыбора.Добавить("Не сдал");
        НовыйЭлементНорматив.СписокВыбора.Добавить("");
    КонецЕсли;	
    
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеВыбранногоНорматива(МассивВыбранныхЗначений)
    
    ВозвращаемоеЗначение = Новый Структура;
    
    МассивДобавляемыхЗначений = Новый Массив;
    МассивПовторяющихсяЗначений = Новый Массив;
    
    ТЗНормативы = ТаблицаРазбора.Выгрузить();
    
    Для каждого Элем Из МассивВыбранныхЗначений Цикл
        
        РезультатПоиска = ТЗНормативы.Найти(Элем,"Норматив");
        
        Если РезультатПоиска = Неопределено Тогда
            
            МассивДобавляемыхЗначений.Добавить(Элем);
            
        Иначе
            
            МассивПовторяющихсяЗначений.Добавить(Элем);   
            
        КонецЕсли;
        
    КонецЦикла; 
    
    ВозвращаемоеЗначение.Вставить("МассивДобавляемыхЗначений", МассивДобавляемыхЗначений);
    ВозвращаемоеЗначение.Вставить("МассивПовторяющихсяЗначений", МассивПовторяющихсяЗначений);
    
    Возврат ВозвращаемоеЗначение;

КонецФункции // ПроверитьНаличиеВыбранногоНорматива(ВыбранноеЗначение)
 

#Область ОбработкаДанныхНаФорме

&НаСервере
Процедура ПеревестиНаСледующийЭтапНаСервере()
    
    ТаблицаДляРасчета = этотобъект.СоставУчастниковНаФорме.Выгрузить();
    
    ТекстЗапроса = "";
	// {Рарус adilas #- -Sonar 2021.06.29
    УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
    ТекстЗапроса, 
    Новый Структура("Спортсмен, ТекущийЭтап, ИтоговыйБалл, СледующийЭтап"),
    "ВТ_СоставУчастников",
    "СоставУчастников");
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("СоставУчастников",ТаблицаДляРасчета); 
    Запрос.УстановитьПараметр("Организация", Объект.Организация);
    Запрос.УстановитьПараметр("ВидСпорта", Объект.ВидСпорта);
    Запрос.Текст = ТекстЗапроса + ";
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   ВТ_СоставУчастников.Спортсмен КАК Спортсмен,
    |   ФизическиеЛица.Пол КАК Пол,
    |   ВТ_СоставУчастников.ТекущийЭтап КАК ТекущийЭтап,
    |   ВТ_СоставУчастников.ИтоговыйБалл КАК ИтоговыйБалл,
    |   &Организация КАК Организация,
    |   &ВидСпорта КАК ВидСпорта,
    |   ВТ_СоставУчастников.СледующийЭтап КАК СледующийЭтап
    |ПОМЕСТИТЬ Вт_СпортсменыПоЭтапам
    |ИЗ
    |   ВТ_СоставУчастников КАК ВТ_СоставУчастников
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спортсмены КАК Спортсмены
    |           ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |           ПО Спортсмены.ФизическоеЛицо = ФизическиеЛица.Ссылка
    |       ПО ВТ_СоставУчастников.Спортсмен = Спортсмены.Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   Вт_СпортсменыПоЭтапам.Спортсмен КАК Спортсмен,
    |   Вт_СпортсменыПоЭтапам.ТекущийЭтап КАК Этап,
    |   НастройкиЭтаповПоОрганизациямСрезПоследних.ВидФизическойПодготовки КАК ВидФизическойПодготовки,
    |   НастройкиЭтаповПоОрганизациямСрезПоследних.Пол КАК Пол,
    |   НастройкиЭтаповПоОрганизациямСрезПоследних.ИтоговыйБалл КАК ИтоговыйБалл,
    |   ВЫБОР
    |       КОГДА Вт_СпортсменыПоЭтапам.ИтоговыйБалл >= НастройкиЭтаповПоОрганизациямСрезПоследних.ИтоговыйБалл
    |           ТОГДА ИСТИНА
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК ПереводитьНаСледЭтап,
    |   Вт_СпортсменыПоЭтапам.СледующийЭтап КАК СледующийЭтап
    |ПОМЕСТИТЬ ТЗРезультатПоЭтапам
    |ИЗ
    |   Вт_СпортсменыПоЭтапам КАК Вт_СпортсменыПоЭтапам
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЭтаповПоОрганизациям.СрезПоследних КАК НастройкиЭтаповПоОрганизациямСрезПоследних
    |       ПО Вт_СпортсменыПоЭтапам.Организация = НастройкиЭтаповПоОрганизациямСрезПоследних.Организация
    |           И Вт_СпортсменыПоЭтапам.ВидСпорта = НастройкиЭтаповПоОрганизациямСрезПоследних.ВидСпорта
    |           И Вт_СпортсменыПоЭтапам.Пол = НастройкиЭтаповПоОрганизациямСрезПоследних.Пол
    |           И Вт_СпортсменыПоЭтапам.ТекущийЭтап = НастройкиЭтаповПоОрганизациямСрезПоследних.Этап
    |           И (НастройкиЭтаповПоОрганизациямСрезПоследних.ИтоговыйБалл > 0)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   ТЗРезультатПоЭтапам.Спортсмен КАК Спортсмен,
    |   ТЗРезультатПоЭтапам.Этап КАК Этап,
    |   ТЗРезультатПоЭтапам.ВидФизическойПодготовки КАК ВидФизическойПодготовки,
    |   ТЗРезультатПоЭтапам.Пол КАК Пол,
    |   ТЗРезультатПоЭтапам.ИтоговыйБалл КАК ИтоговыйБалл,
    |   ТЗРезультатПоЭтапам.ПереводитьНаСледЭтап КАК ПереводитьНаСледЭтап,
    |   ТЗРезультатПоЭтапам.СледующийЭтап КАК СледующийЭтап,
    |   ПереводСпортсменовНаЭтапСпортсмены.Ссылка КАК Ссылка,
    |   ПереводСпортсменовНаЭтап.Ссылка КАК СсылкаНаДокументПеревода
    |ПОМЕСТИТЬ ТЗРезультат_с_переводами
    |ИЗ
    |   ТЗРезультатПоЭтапам КАК ТЗРезультатПоЭтапам
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПереводСпортсменовНаЭтап.Спортсмены КАК ПереводСпортсменовНаЭтапСпортсмены
    |           ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереводСпортсменовНаЭтап КАК ПереводСпортсменовНаЭтап
    |           ПО (ПереводСпортсменовНаЭтап.Ссылка = ПереводСпортсменовНаЭтапСпортсмены.Ссылка)
    |       ПО (ТЗРезультатПоЭтапам.Этап = ПереводСпортсменовНаЭтап.ЭтапПредыдущий)
    |           И (ТЗРезультатПоЭтапам.СледующийЭтап = ПереводСпортсменовНаЭтап.Этап)
    |           И ТЗРезультатПоЭтапам.Спортсмен = ПереводСпортсменовНаЭтапСпортсмены.Спортсмен
	//{rarus lobash IN-19196 31.08.2021
	//|ГДЕ
	//|   ПереводСпортсменовНаЭтап.ПометкаУдаления = ЛОЖЬ
	//}rarus lobash IN-19196 31.08.2021
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   ТЗРезультатПоЭтапам.Спортсмен КАК Спортсмен,
    |   ТЗРезультатПоЭтапам.Этап КАК Этап,
    |   ТЗРезультатПоЭтапам.ВидФизическойПодготовки КАК ВидФизическойПодготовки,
    |   ТЗРезультатПоЭтапам.Пол КАК Пол,
    |   ТЗРезультатПоЭтапам.ИтоговыйБалл КАК ИтоговыйБалл,
    |   ТЗРезультатПоЭтапам.ПереводитьНаСледЭтап КАК ПереводитьНаСледЭтап,
    |   ТЗРезультатПоЭтапам.СледующийЭтап КАК СледующийЭтап,
    |   ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка КАК Ссылка,
    |   ЗачислениеСпортсменовНаЭтап.Ссылка КАК СсылкаНаДокументЗачисления
    |ПОМЕСТИТЬ ТЗРезультат_с_зачислением
    |ИЗ
    |   ТЗРезультатПоЭтапам КАК ТЗРезультатПоЭтапам
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗачислениеСпортсменовНаЭтап.Спортсмены КАК ЗачислениеСпортсменовНаЭтапСпортсмены
    |           ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗачислениеСпортсменовНаЭтап КАК ЗачислениеСпортсменовНаЭтап
    |           ПО (ЗачислениеСпортсменовНаЭтап.Ссылка = ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка)
    |       ПО (ТЗРезультатПоЭтапам.СледующийЭтап = ЗачислениеСпортсменовНаЭтап.Этап)
    |           И ТЗРезультатПоЭтапам.Спортсмен = ЗачислениеСпортсменовНаЭтапСпортсмены.Спортсмен
	//{rarus lobash IN-19196 31.08.2021
	//|ГДЕ
	//|   ЗачислениеСпортсменовНаЭтап.ПометкаУдаления = ЛОЖЬ
 	//}rarus lobash IN-19196 31.08.2021
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ТЗРезультат_с_переводами.Спортсмен КАК Спортсмен,
    |   ТЗРезультат_с_переводами.Этап КАК Этап,
    |   ТЗРезультат_с_переводами.ВидФизическойПодготовки КАК ВидФизическойПодготовки,
    |   ТЗРезультат_с_переводами.Пол КАК Пол,
    |   ТЗРезультат_с_переводами.ИтоговыйБалл КАК ИтоговыйБалл,
    |   ТЗРезультат_с_переводами.ПереводитьНаСледЭтап КАК ПереводитьНаСледЭтап,
    |   ТЗРезультат_с_переводами.СледующийЭтап КАК СледующийЭтап,
    |   ТЗРезультат_с_переводами.Ссылка КАК Ссылка,
    |   ТЗРезультат_с_переводами.СсылкаНаДокументПеревода КАК СсылкаНаДокументПеревода,
    |   ТЗРезультат_с_зачислением.СсылкаНаДокументЗачисления КАК СсылкаНаДокументЗачисления
    |ПОМЕСТИТЬ ТЗ_результаты_все_документы
    |ИЗ
    |   ТЗРезультат_с_переводами КАК ТЗРезультат_с_переводами
    |       ЛЕВОЕ СОЕДИНЕНИЕ ТЗРезультат_с_зачислением КАК ТЗРезультат_с_зачислением
    |       ПО ТЗРезультат_с_переводами.Спортсмен = ТЗРезультат_с_зачислением.Спортсмен
    |           И ТЗРезультат_с_переводами.Этап = ТЗРезультат_с_зачислением.Этап
    |           И ТЗРезультат_с_переводами.ВидФизическойПодготовки = ТЗРезультат_с_зачислением.ВидФизическойПодготовки
    |           И ТЗРезультат_с_переводами.СледующийЭтап = ТЗРезультат_с_зачислением.СледующийЭтап
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ТЗ_результаты_все_документы.Спортсмен КАК Спортсмен,
    |   ТЗ_результаты_все_документы.Этап КАК Этап,
    |   ТЗ_результаты_все_документы.ВидФизическойПодготовки КАК ВидФизическойПодготовки,
    |   ТЗ_результаты_все_документы.Пол КАК Пол,
    |   ТЗ_результаты_все_документы.ИтоговыйБалл КАК ИтоговыйБалл,
    |   ТЗ_результаты_все_документы.ПереводитьНаСледЭтап КАК ПереводитьНаСледЭтап,
    |   ТЗ_результаты_все_документы.СледующийЭтап КАК СледующийЭтап,
    |   ТЗ_результаты_все_документы.Ссылка КАК Ссылка,
    |   ЕСТЬNULL(ТЗ_результаты_все_документы.СсылкаНаДокументПеревода, ЗНАЧЕНИЕ(Документ.ПереводСпортсменовНаЭтап.ПустаяСсылка)) КАК СсылкаНаДокументПеревода,
    |   ЕСТЬNULL(ТЗ_результаты_все_документы.СсылкаНаДокументПеревода, ЗНАЧЕНИЕ(Документ.ЗачислениеСпортсменовНаЭтап.ПустаяСсылка)) КАК СсылкаНаДокументЗачисления
    |ИЗ
    |   ТЗ_результаты_все_документы КАК ТЗ_результаты_все_документы
    |ИТОГИ ПО
    |   СледующийЭтап,
    |   СсылкаНаДокументПеревода,
    |   Спортсмен";
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Для Каждого СтрСледующийЭтап из РезультатЗапроса.Строки Цикл
        
        Для каждого СтрДокументПеревода Из СтрСледующийЭтап.Строки Цикл
            
            НайденныйДокументПеревода = СтрДокументПеревода.СсылкаНаДокументПеревода;
            НайденныйДокументЗачисления = СтрДокументПеревода.СсылкаНаДокументЗачисления;
            
            Если ЗначениеЗаполнено(НайденныйДокументПеревода) Тогда
                
                ТекстСообщения = "Для спортсменов: "+Символы.ПС;
                
                Для Каждого СтрСпортсмен из СтрДокументПеревода.Строки Цикл 
                    ТекстСообщения = ТекстСообщения+ ""+Строка(СтрСпортсмен.Спортсмен)+Символы.ПС;
                КонецЦикла;
                
                ТекстСообщения = ТекстСообщения+"Создан документ перевода на этап "+Строка(СтрСледующийЭтап.Этап)+" "+Строка(НайденныйДокументПеревода);
                
                Сообщение = Новый СообщениеПользователю;
                Сообщение.Текст = ТекстСообщения;
                Сообщение.Сообщить();
                Продолжить;
                
            ИначеЕсли ЗначениеЗаполнено(НайденныйДокументЗачисления) Тогда
                
                ТекстСообщения = "Для спортсменов: "+Символы.ПС;
                
                Для Каждого СтрСпортсмен из СтрДокументПеревода.Строки Цикл 
                    ТекстСообщения = ТекстСообщения+ ""+Строка(СтрСпортсмен.Спортсмен)+Символы.ПС;
                КонецЦикла;
                
                ТекстСообщения = ТекстСообщения+"Создан документ зачисления на этап "+Строка(СтрСледующийЭтап.Этап)+" "+Строка(НайденныйДокументЗачисления);
                
                Сообщение = Новый СообщениеПользователю;
                Сообщение.Текст = ТекстСообщения;
                Сообщение.Сообщить();
                Продолжить;
                
            Иначе
                
                ДокументПеревода = Документы.ПереводСпортсменовНаЭтап.СоздатьДокумент();
                
            КонецЕсли;
            // {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
            ДокументПеревода.Дата 			= ТекущаяДатаСеанса();
            // }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
            ДокументПеревода.ДатаПеревода 	= Объект.Дата;
            ДокументПеревода.Организация  	= Объект.Организация;
            ДокументПеревода.ВидСпорта 		= Объект.ВидСпорта;
            ДокументПеревода.Тренер 		= Объект.Тренер;
            ДокументПеревода.ТренерПредыдущий = Объект.Тренер;
            ДокументПеревода.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
            ДокументПеревода.Этап 			= СтрСледующийЭтап.СледующийЭтап;
            ДокументПеревода.ДокументОснование = Объект.Ссылка;
            
            Для Каждого СтрСпортсмен из СтрДокументПеревода.Строки Цикл 
                
                ПереводитьНаСледЭтап = Истина;
                
                Для Каждого СтрРезультатыСпортсмена из СтрСпортсмен.Строки Цикл
                    ПереводитьНаСледЭтап = ?(СтрРезультатыСпортсмена.ПереводитьНаСледЭтап = Ложь, СтрРезультатыСпортсмена.ПереводитьНаСледЭтап, ПереводитьНаСледЭтап) ;
                    ДокументПеревода.ЭтапПредыдущий = СтрРезультатыСпортсмена.Этап;
                КонецЦикла;
                
                Если ПереводитьНаСледЭтап Тогда
                    тчСпортсмены = ДокументПеревода.Спортсмены.Добавить();
                    тчСпортсмены.Спортсмен = СтрСпортсмен.Спортсмен;
                КонецЕсли;
                
            КонецЦикла;
            
            Если ДокументПеревода.Спортсмены.количество() <> 0 Тогда
                ДокументПеревода.Записать();
                
                Попытка
                    ДокументПеревода.Записать(РежимЗаписиДокумента.Проведение);
                    Сообщить("Документ создан: "+ДокументПеревода.Ссылка);
                Исключение
                    ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    "Не удалось провести документ: %1. Проведите документ вручную.",
                    СокрЛП(ДокументПеревода.Ссылка));
                    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
                КонецПопытки;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеНаФорме(НомерСтроки = Неопределено, МассивСтрокДляЗаполнения = Неопределено)
    
    СтруктураПараметровЗапроса = Новый Структура("СоставУчастников, УчебныйГод, ДатаНачалаСоревнования, ВидСпорта, Организация, Тренер, ВыбиратьСледЭтап", 
    ПроведениеСоревнованийФормыСервер.ПроиндексироватьТаблицуДокумента(ЭтотОбъект,"СоставУчастниковНаФорме"), Объект.УчебныйГод, Объект.Дата, Объект.ВидСпорта, Объект.Организация, Объект.Тренер);
    
    Выборка = ПроведениеСоревнованийСлужебныйСервер.ЗаполнитьДополнительныеДанныеНаФорме(СтруктураПараметровЗапроса,НомерСтроки);
    
    ПроверятьНаСтроки = ?(МассивСтрокДляЗаполнения = Неопределено, Ложь, Истина);
    
    Пока Выборка.Следующий() Цикл
        
        Если ПроверятьНаСтроки Тогда
            Если МассивСтрокДляЗаполнения.Найти(Выборка.Индекс) = Неопределено Тогда
                Продолжить;
            КонецЕсли;	
        КонецЕсли;	
        
        //ЗаполнитьЗначенияСвойств(СоставУчастниковНаФорме[Выборка.Индекс],Выборка,,?(НЕ ЗаполнятьДопДанные, "МеждународнаяВозрастнаяГруппа",""));	
        СоставУчастниковНаФорме[Выборка.Индекс].ГодРождения =  Выборка.ГодРождения;
        СоставУчастниковНаФорме[Выборка.Индекс].Пол = Выборка.Пол;
        СоставУчастниковНаФорме[Выборка.Индекс].Группа = ?(ЗначениеЗаполнено(СоставУчастниковНаФорме[Выборка.Индекс].Группа), СоставУчастниковНаФорме[Выборка.Индекс].Группа, Выборка.Группа);
        СоставУчастниковНаФорме[Выборка.Индекс].ПолПредставление = Выборка.ПолПредставление;
        СоставУчастниковНаФорме[Выборка.Индекс].ТекущийЭтап = ?(ЗначениеЗаполнено(СоставУчастниковНаФорме[Выборка.Индекс].ТекущийЭтап), СоставУчастниковНаФорме[Выборка.Индекс].ТекущийЭтап, Выборка.ТекущийЭтап);
        СоставУчастниковНаФорме[Выборка.Индекс].СледующийЭтап = ?(ЗначениеЗаполнено(СоставУчастниковНаФорме[Выборка.Индекс].СледующийЭтап), СоставУчастниковНаФорме[Выборка.Индекс].СледующийЭтап, Выборка.СледующийЭтап);
        Если ЗаполнятьДопДанные Тогда
            СоставУчастниковНаФорме[Выборка.Индекс].МеждународнаяВозрастнаяГруппа = Выборка.МеждународнаяВозрастнаяГруппа;
        КонецЕсли;
    КонецЦикла;	
    
КонецПроцедуры

&НаСервере
Процедура ПеренестиСтруктуруНормативовВТаблицуДокумента(Отказ = Ложь, ПараметрыЗаписи = Неопределено)
    
    Объект.СоставУчастников.Очистить();
    Объект.Нормативы.Очистить();
    Объект.ИтоговыеБаллыСпортсмена.Очистить();
    
    Для Каждого СтрокаНорматив Из ТаблицаРазбора Цикл
        
        Гуид = СтрЗаменить(СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива,"-","_");
        
        Для Каждого СтрокаСоставУчастниковНаФорме Из СоставУчастниковНаФорме Цикл
            строкаСоставУчастников = Объект.СоставУчастников.Добавить();
            ЗаполнитьЗначенияСвойств(строкаСоставУчастников,СтрокаСоставУчастниковНаФорме);
            строкаСоставУчастников.УникальныйИдентификаторИтоговогоБалла = СтрокаСоставУчастниковНаФорме.УникальныйИдентификаторИтоговогоБалла;
            Если СтрокаСоставУчастниковНаФорме["Выбор_" + Гуид] Тогда
                строкаСоставУчастников.Норматив = СтрокаНорматив.Норматив;
            КонецЕсли;
            ЗаполнитьЗначенияСвойств(строкаСоставУчастников,СтрокаСоставУчастниковНаФорме);
            строкаСоставУчастников.УникальныйИдентификаторСтрокиНорматива = СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива;
            строкаСоставУчастников.Балл = СтрокаСоставУчастниковНаФорме["Балл_" + Гуид];
            строкаСоставУчастников.РезультатЧисло = СтрокаСоставУчастниковНаФорме["РезультатЧисло_" + Гуид];
            строкаСоставУчастников.РезультатБулево = СтрокаСоставУчастниковНаФорме["РезультатБулево_" + Гуид];
            строкаСоставУчастников.РезультатСдачиНорматива = СтрокаСоставУчастниковНаФорме["РезультатСдачиНорматива_" + Гуид];
            
            СтрокаИтоговыйБалл = Объект.ИтоговыеБаллыСпортсмена.Добавить();
            СтрокаИтоговыйБалл.УникальныйИдентификаторИтоговогоБалла = СтрокаСоставУчастниковНаФорме.УникальныйИдентификаторИтоговогоБалла;
            СтрокаИтоговыйБалл.Балл = СтрокаСоставУчастниковНаФорме.ИтоговыйБалл; 	
        КонецЦикла;
        
        строкаЗаявленныйНорматив = Объект.Нормативы.Добавить();
        ЗаполнитьЗначенияСвойств(строкаЗаявленныйНорматив,СтрокаНорматив);
        строкаЗаявленныйНорматив.УникальныйИдентификаторСтрокиНорматива = СтрокаНорматив.УникальныйИдентификаторСтрокиНорматива;
        
    КонецЦикла;
    
КонецПроцедуры	

&НаКлиенте
Процедура СоставУчастниковезультатНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Для Каждого КлючЗначение Из Результат Цикл
        ДопПараметры.ТекДанные[КлючЗначение.Ключ + "_" + ДопПараметры.Гуид] = КлючЗначение.Значение;
    КонецЦикла;
    ДопПараметры.ТекДанные["Выбор_" + ДопПараметры.Гуид] = Истина;
    Норматив = ДопПараметры.ТекДанные["Норматив" + "_" + ДопПараметры.Гуид];
    ПроверитьРезультатНорматива(ДопПараметры.Гуид, ДопПараметры.ТекДанные.Спортсмен, Норматив);
    
    
КонецПроцедуры

#КонецОбласти

#Область ПересчетМест

&НаСервере
Процедура  ПроверитьРезультатНорматива(Гуид, Спортсмен, Норматив)
    
    УстановитьПривилегированныйРежим(истина);
    ПеренестиСтруктуруНормативовВТаблицуДокумента();
    УстановитьПривилегированныйРежим(Ложь);
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Организация", Объект.Организация);
    Запрос.УстановитьПараметр("ВидСпорта", Объект.ВидСпорта);
    // {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
    Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
    // }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен); 
    Запрос.УстановитьПараметр("ДанныеТЗ", объект.СоставУчастников.Выгрузить(, "Спортсмен, ТекущийЭтап, Норматив, РезультатЧисло, РезультатБулево, РезультатСдачиНорматива, Балл")); 
    
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	СоставУчастников.Спортсмен КАК Спортсмен,
    |	&Организация КАК Организация,
     |	&ВидСпорта КАК ВидСпорта,
    |	СоставУчастников.ТекущийЭтап КАК ТекущийЭтап,
    |	СоставУчастников.Норматив КАК Норматив,
    |	СоставУчастников.РезультатЧисло КАК РезультатЧисло,
    |	СоставУчастников.РезультатБулево КАК РезультатБулево,
    |	СоставУчастников.РезультатСдачиНорматива КАК РезультатСдачиНорматива,
    |	СоставУчастников.Балл КАК Балл
    |ПОМЕСТИТЬ Вт_ТаблицаДокумента
    |ИЗ
    |	&ДанныеТЗ КАК СоставУчастников
    |ГДЕ
    |	СоставУчастников.Спортсмен = &Спортсмен
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	Вт_ТаблицаДокумента.Спортсмен КАК Спортсмен,
    |	Вт_ТаблицаДокумента.Норматив КАК Норматив,
    |	ВЫБОР
    |		КОГДА Вт_ТаблицаДокумента.Норматив.ТипРезультата = ЗНАЧЕНИЕ(Перечисление.ТипыРезультатов.Время)
    |			ТОГДА ВЫБОР
    |					КОГДА Вт_ТаблицаДокумента.РезультатЧисло <= ОценкиПрохожденияНаЭтапСрезПоследних.РезультатЧисло
    |						ТОГДА ОценкиПрохожденияНаЭтапСрезПоследних.Баллы
    |					ИНАЧЕ 0
    |				КОНЕЦ
    |		КОГДА Вт_ТаблицаДокумента.Норматив.ТипРезультата = ЗНАЧЕНИЕ(Перечисление.ТипыРезультатов.Булево)
    |			ТОГДА ВЫБОР
    |					КОГДА Вт_ТаблицаДокумента.РезультатБулево = ИСТИНА
    |						ТОГДА ОценкиПрохожденияНаЭтапСрезПоследних.Баллы
    |					ИНАЧЕ 0
    |				КОНЕЦ
    |		КОГДА Вт_ТаблицаДокумента.Норматив.ТипРезультата = ЗНАЧЕНИЕ(Перечисление.ТипыРезультатов.Число)
    |			ТОГДА ВЫБОР
    |					КОГДА Вт_ТаблицаДокумента.РезультатЧисло >= ОценкиПрохожденияНаЭтапСрезПоследних.РезультатЧисло
    |						ТОГДА ОценкиПрохожденияНаЭтапСрезПоследних.Баллы
    |					ИНАЧЕ 0
    |				КОНЕЦ
    |	КОНЕЦ КАК Балл,
    |	ВЫБОР
    |		КОГДА Вт_ТаблицаДокумента.Норматив.ТипРезультата = ЗНАЧЕНИЕ(Перечисление.ТипыРезультатов.Время)
    |			ТОГДА ВЫБОР
    |					КОГДА Вт_ТаблицаДокумента.РезультатЧисло <= ОценкиПрохожденияНаЭтапСрезПоследних.РезультатЧисло
    |						ТОГДА ""Сдал""
    |					ИНАЧЕ ""Не сдал""
    |				КОНЕЦ
    |		КОГДА Вт_ТаблицаДокумента.Норматив.ТипРезультата = ЗНАЧЕНИЕ(Перечисление.ТипыРезультатов.Булево)
    |			ТОГДА ВЫБОР
    |					КОГДА Вт_ТаблицаДокумента.РезультатБулево = ИСТИНА
    |						ТОГДА ""Сдал""
    |					ИНАЧЕ ""Не сдал""
    |				КОНЕЦ
    |		КОГДА Вт_ТаблицаДокумента.Норматив.ТипРезультата = ЗНАЧЕНИЕ(Перечисление.ТипыРезультатов.Число)
    |			ТОГДА ВЫБОР
    |					КОГДА Вт_ТаблицаДокумента.РезультатЧисло >= ОценкиПрохожденияНаЭтапСрезПоследних.РезультатЧисло
    |						ТОГДА ""Сдал""
    |					ИНАЧЕ ""Не сдал""
    |				КОНЕЦ
    |	КОНЕЦ КАК РезультатСдачиНорматива,
    |	ОценкиПрохожденияНаЭтапСрезПоследних.ВидФизическойПодготовки КАК ВидФизическойПодготовки,
    |	Вт_ТаблицаДокумента.Организация КАК Организация,
    |	Вт_ТаблицаДокумента.ВидСпорта КАК ВидСпорта,
    |	Вт_ТаблицаДокумента.ТекущийЭтап КАК ТекущийЭтап,
    |	Вт_ТаблицаДокумента.Спортсмен.ФизическоеЛицо.Пол КАК СпортсменФизическоеЛицоПол
    |ПОМЕСТИТЬ Вт_РезультатыНормативов
    |ИЗ
    |	Вт_ТаблицаДокумента КАК Вт_ТаблицаДокумента
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиПрохожденияНаЭтап.СрезПоследних(&Дата, не ИдентификаторСтроки = """") КАК ОценкиПрохожденияНаЭтапСрезПоследних
    |		ПО Вт_ТаблицаДокумента.Организация = ОценкиПрохожденияНаЭтапСрезПоследних.Организация
    |			И Вт_ТаблицаДокумента.ВидСпорта = ОценкиПрохожденияНаЭтапСрезПоследних.ВидСпорта
    |			И Вт_ТаблицаДокумента.Норматив = ОценкиПрохожденияНаЭтапСрезПоследних.Норматив
    |			И Вт_ТаблицаДокумента.ТекущийЭтап = ОценкиПрохожденияНаЭтапСрезПоследних.Этап
    |			И Вт_ТаблицаДокумента.Спортсмен.ФизическоеЛицо.Пол = ОценкиПрохожденияНаЭтапСрезПоследних.Пол
    |			И (ОценкиПрохожденияНаЭтапСрезПоследних.Используется = ИСТИНА)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	СУММА(Вт_РезультатыНормативов.Балл) КАК ИтоговыйБалл,
    |	Вт_РезультатыНормативов.Спортсмен КАК Спортсмен,
    |	Вт_РезультатыНормативов.ВидФизическойПодготовки КАК ВидФизическойПодготовки,
    |	ВЫБОР
    |		КОГДА СУММА(Вт_РезультатыНормативов.Балл) >= НастройкиЭтапов.ИтоговыйБалл
    |			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ КАК ИтогРезультат
    |ИЗ
    |	Вт_РезультатыНормативов КАК Вт_РезультатыНормативов
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЭтаповПоОрганизациям.СрезПоследних КАК НастройкиЭтапов
    |		ПО Вт_РезультатыНормативов.Организация = НастройкиЭтапов.Организация
    |			И Вт_РезультатыНормативов.ВидСпорта = НастройкиЭтапов.ВидСпорта
    |			И Вт_РезультатыНормативов.ТекущийЭтап = НастройкиЭтапов.Этап
    |			И Вт_РезультатыНормативов.СпортсменФизическоеЛицоПол = НастройкиЭтапов.Пол
    |			И Вт_РезультатыНормативов.ВидФизическойПодготовки = НастройкиЭтапов.ВидФизическойПодготовки
    |
    |СГРУППИРОВАТЬ ПО
    |	Вт_РезультатыНормативов.Спортсмен,
    |	Вт_РезультатыНормативов.ВидФизическойПодготовки,
    |	НастройкиЭтапов.ИтоговыйБалл
    |
    |УПОРЯДОЧИТЬ ПО
    |	Спортсмен,
    |	ИтогРезультат
    |АВТОУПОРЯДОЧИВАНИЕ";
    
    РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
    тзРезультатНорматива = РезультатЗапроса[1].Выгрузить();
    тзИтоговыйБалл = РезультатЗапроса[2].Выгрузить();
    
    СтрТекущая = ЭтотОбъект.СоставУчастниковНаФорме.НайтиСтроки(Новый структура("Спортсмен", Спортсмен)); 
    тзРезультатНорматива.Сортировать("Норматив, Балл");	
    Для Каждого СтрРезультат из тзРезультатНорматива.НайтиСтроки(Новый структура("Норматив", Норматив)) Цикл 
        СтрТекущая[0]["РезультатСдачиНорматива" + "_" + Гуид] = СтрРезультат.РезультатСдачиНорматива;
        СтрТекущая[0]["Балл" + "_" + Гуид] = СтрРезультат.Балл;
    КонецЦикла;
    
    ТЗНормативы = ТаблицаРазбора.Выгрузить(,"Норматив, УникальныйИдентификаторСтрокиНорматива");
    ИтоговыйБалл = 0;
    Для Каждого Стр из ТЗНормативы Цикл 
        ИтоговыйБалл = ИтоговыйБалл + СтрТекущая[0]["Балл" + "_" + Стр.УникальныйИдентификаторСтрокиНорматива]
    КонецЦикла;
    СтрТекущая[0]["ИтоговыйБалл"] = ИтоговыйБалл;
    
КонецПроцедуры

&НаСервере
Процедура ПересчитатьМестаИБаллыНаСервере()
    
    Отказ = Ложь;
    ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
    ПеренестиСтруктуруНормативовВТаблицуДокумента(Отказ, ПараметрыЗаписи);
    
    Если Отказ Тогда
        Возврат;
    КонецЕсли;
    
    Для Каждого СтрокаСоставУчастников Из Объект.СоставУчастников Цикл
        СтрокаСоставУчастников.Баллы = 0;
        СтрокаСоставУчастников.Очки  = 0;
        СтрокаСоставУчастников.Место = 0;
    КонецЦикла;
    
    ТаблицаДляРасчета = ПроведениеСоревнованийФормыСервер.ПроиндексироватьТаблицуДокумента(Объект,"СоставУчастников");
    
    ТекстЗапроса = "";
	// {Рарус adilas #- -Sonar 2021.06.29
    УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
    ТекстЗапроса, 
    Новый Структура("Индекс, Спортсмен, МеждународнаяВозрастнаяГруппа, Норматив, Балл, РезультатЧисло"),
    "ВТ_СоставУчастников",
    "СоставУчастников");
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("СоставУчастников",ТаблицаДляРасчета); 
    Запрос.Текст = ТекстЗапроса;
    
    ПараметрыПроцедуры = Новый Структура;
    ПараметрыПроцедуры.Вставить("СоставУчастников", Запрос.Выполнить().Выгрузить());
    ПараметрыПроцедуры.Вставить("ТипСоревнования" , Объект.ТипСоревнования);
    
    ОФППодсчетРезультатовВыполненияНормативовСервер.ПересчитатьМестаИБаллыНаСервере(ПараметрыПроцедуры);
    
    расчитаннаяТаблица = ПараметрыПроцедуры.СоставУчастников;	
    
    Для Каждого строкаРасчитаннаяТаблица Из расчитаннаяТаблица Цикл
        ЗаполнитьЗначенияСвойств(Объект.СоставУчастников[строкаРасчитаннаяТаблица.Индекс],строкаРасчитаннаяТаблица,"Место,Очки,Баллы"); 
    КонецЦикла;
    
    УдалитьВсеКолонкиНормативовНаФорме();
    СформироватьСтруктуруНормативовНаФорме(Истина);
    ЗаполнитьДополнительныеДанныеНаФорме();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработкаУчебногоГода

&НаКлиенте
Процедура УчебныйГодПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        Объект.СоставУчастников.Очистить();
        Объект.Попытки.Очистить();
        УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,Ложь);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСозданиеЗавершение(Результат, ДопПараметры) Экспорт
    
    Если НЕ Результат = Неопределено Тогда
        Объект.УчебныйГод = Результат.УчебныйГодСсылка;
        УправлениеУчебнымГодомСсылка = Результат.УчебныйГодОбъект;
    КонецЕсли;   
    
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
    
    УправлениеУчебнымГодомСсылка = Результат;
    ПолучитьУчебныйГодСсылка();
    
КонецПроцедуры

&НаСервере
Процедура ПолучитьУчебныйГодСсылка()
    Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоставУчастниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    
    Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
        
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Поле ""Спортивное учреждение"" не заполнено";
        Сообщение.Поле = "Объект.Организация";
        Сообщение.Сообщить(); 
        
        
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(Объект.ВидСпорта) Тогда
        
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Поле ""Вид спорта"" не заполнено";
        Сообщение.Поле = "Объект.ВидСпорта";
        Сообщение.Сообщить(); 
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти
















