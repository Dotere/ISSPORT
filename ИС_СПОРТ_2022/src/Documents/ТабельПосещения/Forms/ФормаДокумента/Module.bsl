#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// {Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	// {Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	Если РольДоступна("ПолныеПрава") Тогда
		 Элементы.Ответственный.Доступность = Истина;
	Иначе 	 
		 Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
	// }Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	// }Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	
	Если Параметры.Свойство("Тренер") Тогда
		Объект.Тренер = Параметры.Тренер;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда	
		Объект.ПериодРегистрации = ТекущаяДатаСеанса();	
		Объект.Организация = ПараметрыСеанса.ТекущаяОрганизация;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда	
		Элементы.Организация.Видимость = Истина;
	КонецЕсли;
	
	Если РольДоступна("Тренер") Тогда
		Объект.Тренер = ПараметрыСеанса.ТекущийТренер;
		Элементы.Тренер.КнопкаВыбора = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.НачалоПериода = НачалоМесяца(Объект.ПериодРегистрации);
		Объект.КонецПериода  = КонецМесяца(Объект.ПериодРегистрации);
		
	КонецЕсли;
	
	УчетСпортсменовОбщегоНазначенияКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.НачалоПериода", "МесяцРегистрацииСтрокой");
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		СформироватьТаблицуПосещенийДокумента();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ТаблицаСобытийРеквизит.Количество() = 0 Тогда 
		
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Документ не может быть пустым, необходимо заполнить табель'"));	
		Возврат;
		
	КонецЕсли;
		
	Если ПериодЗаполненияТаблицыФормы <> Объект.КонецПериода И ПериодЗаполненияТаблицыФормы <> Дата(1, 1 , 1) Тогда
		
		Отказ = Истина;
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СтрШаблон(НСтр("ru='Выбранный период %1 не совпадает с периодом занятий в таблице %2'"), Формат(Объект.КонецПериода, "ДФ='ММММ гггг'"), Формат(ПериодЗаполненияТаблицыФормы, "ДФ='ММММ гггг'"));
		СообщениеПользователю.Поле = "МесяцРегистрацииСтрокой";
		СообщениеПользователю.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ПереносДанныхСТаблицаСобытийРеквизитВТаблицаПосещений();
			
КонецПроцедуры 
	
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// {Рарус adilas #21649 -Учет посещаемости спортсменов 2021.10.19
	// Для тестирования
	//ПереносДанныхСТаблицаСобытийРеквизитВТаблицаПосещений();	
	// }Рарус adilas #21649 -Учет посещаемости спортсменов 2021.10.19
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	 
	УчетСпортсменовКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Модифицированность);
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)

	УчетСпортсменовКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Направление, Модифицированность);
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	УчетСпортсменовКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);	
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УчетСпортсменовКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);	
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Оповещение = Новый ОписаниеОповещения("МесяцРегистрацииСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	УчетСпортсменовКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", , Оповещение);	
			
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

// {Рарус adilas #23018 -Табель учета посещаемости. Этап. 2021.12.10
&НаКлиенте
Процедура ЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОбработчикВыбораЭтапа = Новый ОписаниеОповещения("ЭтапНачалоВыбораЗавершение", ЭтотОбъект); 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ЭтапыСпортивнойПодготовки.ФормаВыбора", ПараметрыФормы, , , , , ОбработчикВыбораЭтапа);
	
КонецПроцедуры
// }Рарус adilas #23018 -Табель учета посещаемости. Этап. 2021.12.10

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьТабель(Команда)
	
	ПравилаПроверки = Новый СписокЗначений;
	ПравилаПроверки.Добавить("Объект.Тренер", НСтр("ru='Не выбран тренер'"));
	ПравилаПроверки.Добавить("Объект.Этап",	  НСтр("ru='Не выбран этап'"));
	
	Если УчетСпортсменовОбщегоНазначенияКлиентСервер.СвойстваФормыЗаполнены(ЭтотОбъект, ПравилаПроверки, ОбщегоНазначенияКлиент) Тогда
		
		СтруктураПараметровПроверки = НаличиеЗанятийИлиСпортсменовНаЭтапе();	
		РасписаниеЗадано = СтруктураПараметровПроверки.РасписаниеЗадано;
		ЕстьСпортсменыНаЭтапе = СтруктураПараметровПроверки.ЕстьСпортсменыНаЭтапе;
		
		Если (НЕ РасписаниеЗадано) ИЛИ (НЕ ЕстьСпортсменыНаЭтапе) Тогда
			
			Если НЕ РасписаниеЗадано Тогда
			
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Табель не может быть заполнен, у тренера не заполнено расписание на указаный период!'"));
		
			ИначеЕсли НЕ ЕстьСпортсменыНаЭтапе Тогда 
			
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Табель не может быть заполнен, за тренером не закреплены спортсмены на выбранном этапе!'"));		
			
			КонецЕсли;
			              
		Иначе          			
			Если ТаблицаСобытийРеквизит.Количество() = 0 Тогда 
				
				ОтчиститьТекущуюТаблицу();
				СформироватьТаблицуСобытий();
				
			Иначе
				
				ОписаниеОповещенияВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);	
			
				ПоказатьВопрос(ОписаниеОповещенияВопроса, "Текущая таблица посещений будет очищена, и заполнена заново, продолжить?", 
				РежимДиалогаВопрос.ДаНетОтмена, 0);	
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ОтчиститьТекущуюТаблицу()
	
	ТаблицаСобытийРеквизит.Очистить();
	ВнешняяТаблицаСобытий = Новый ТаблицаЗначений;
	ВывестиТаблицуЗначенияВКодеВТаблицуНаФорме(ВнешняяТаблицаСобытий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
    	СформироватьТаблицуСобытий();
		Отказ = Ложь;
    КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСобытийРеквизит

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСобытийРеквизит.ТекущиеДанные;	
	
	Присутствия = 0;
	Отсутствия = 0;
	ОтсутствияПоУв = 0;
	ОтсутствияПоНеУв = 0;
	Опоздания = 0;	
	
	Для каждого ЭлементСписка Из СписокКолонок Цикл
		
		ИмяКолонки = ЭлементСписка.Значение;
		
		Если ТекущиеДанные[ИмяКолонки] = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.П") Тогда 
			Присутствия = Присутствия + 1;
		ИначеЕсли ТекущиеДанные[ИмяКолонки] = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.У") Тогда 
			ОтсутствияПоУв = ОтсутствияПоУв + 1;
			Отсутствия  = Отсутствия + 1;
		ИначеЕсли ТекущиеДанные[ИмяКолонки] = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.Н") Тогда
			ОтсутствияПоНеУв = ОтсутствияПоНеУв + 1;
			Отсутствия  = Отсутствия + 1;
		ИначеЕсли ТекущиеДанные[ИмяКолонки] = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.О") Тогда
			Опоздания = Опоздания + 1;	
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущиеДанные.Присутствия = Присутствия;
	ТекущиеДанные.Отсутствия  = Отсутствия;
	ТекущиеДанные.ОтсутствияПоУв = ОтсутствияПоУв;
	ТекущиеДанные.ОтсутствияПоНеУв = ОтсутствияПоНеУв;
	ТекущиеДанные.Опоздания = Опоздания;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НаличиеЗанятийИлиСпортсменовНаЭтапе()
	
	СтруктураПараметровПроверки = Новый Структура;
	
	ОтображаемыеБрони = ТабельПосещений.ПолучитьОтображаемыеСобытия(Объект.НачалоПериода, Объект.КонецПериода, Объект.Тренер, Объект.Этап);

	Если ОтображаемыеБрони.Количество() = 0 Тогда
		СтруктураПараметровПроверки.Вставить("РасписаниеЗадано", Ложь);
	Иначе
		СтруктураПараметровПроверки.Вставить("РасписаниеЗадано", Истина);
	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап КАК Этап
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(&ДатаПериодаТабеля, ) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &Этап";
	
	Запрос.УстановитьПараметр("ДатаПериодаТабеля", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("Тренер", Объект.Тренер);
	Запрос.УстановитьПараметр("Этап", Объект.Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		СтруктураПараметровПроверки.Вставить("ЕстьСпортсменыНаЭтапе", Ложь);
		
	Иначе
		
		СтруктураПараметровПроверки.Вставить("ЕстьСпортсменыНаЭтапе", Истина);
		
	КонецЕсли;
	
	Возврат СтруктураПараметровПроверки; 	
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуСобытий()
	
	ТаблицаСобытийРеквизит.Очистить();
	
	ПериодЗаполненияТаблицыФормы = Объект.КонецПериода;
	
	ОтображаемыеБрони = ТабельПосещений.ПолучитьОтображаемыеСобытия(Объект.НачалоПериода, Объект.КонецПериода, Объект.Тренер, Объект.Этап);
	
	ВнешняяТаблицаСобытий = Новый ТаблицаЗначений;
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Спортсмены");
	ВнешняяТаблицаСобытий.Колонки.Добавить("Спортсмен", ОписаниеТипа, "Спортсмен");
	
	Секунда = ОтображаемыеБрони.Количество();
	
	Для Каждого Бронь Из ОтображаемыеБрони Цикл
		
		ИмяКолонки = "ДеньСобытия" + Строка(СтрЗаменить(Формат(Бронь.ДатаНачала + Секунда, "ДФ='ггггММддЧЧммсс'"), ".", ""));
		ЗаголовокКолонки = Строка(Формат(Бронь.ДатаНачала, "ДФ='ддд - д.ММ Ч:мм'"));
		ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПосещений");
	    ВнешняяТаблицаСобытий.Колонки.Добавить(ИмяКолонки, ОписаниеТипа, ЗаголовокКолонки);
		
		Секунда = Секунда - 1;
		
	КонецЦикла;
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	                                                                     
	ВнешняяТаблицаСобытий.Колонки.Добавить("Присутствия", ОписаниеТипа, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("Отсутствия", ОписаниеТипа, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("ОтсутствияПоУв", ОписаниеТипа, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("ОтсутствияПоНеУв", ОписаниеТипа, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("Опоздания", ОписаниеТипа, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен КАК Спортсмен,
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Организация КАК Организация,
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта КАК ВидСпорта
		|ПОМЕСТИТЬ ВТ_СоставУчащихся
		|ИЗ
		|	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(
		|			&ОтображаемаяДатаОкончания,
		|			ДатаОкончанияОбучения > &ОтображаемаяДатаОкончания
		|				ИЛИ ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1)) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен
		|ПОМЕСТИТЬ ВТ_Этапы
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			&ОтображаемаяДатаОкончания,
		|			Спортсмен В
		|					(ВЫБРАТЬ
		|						ВТ_СоставУчащихся.Спортсмен КАК Спортсмен
		|					ИЗ
		|						ВТ_СоставУчащихся КАК ВТ_СоставУчащихся)
		|				И Организация = &Организация
		|				И Тренер = &Тренер
		|				И Этап = &Этап) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Этапы.Спортсмен КАК Спортсмен
		|ИЗ
		|	ВТ_Этапы КАК ВТ_Этапы";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтображаемаяДатаОкончания", Объект.КонецПериода);
	Запрос.УстановитьПараметр("Тренер", Объект.Тренер);
	Запрос.УстановитьПараметр("Этап", Объект.Этап);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрСобытий = ВнешняяТаблицаСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрСобытий, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		Для каждого Колонка Из ВнешняяТаблицаСобытий.Колонки Цикл 	
			
			Если (Колонка.Имя = "Спортсмен") 
				ИЛИ (Колонка.Имя = "Присутствия") 
				ИЛИ (Колонка.Имя = "Отсутствия") 
				ИЛИ (Колонка.Имя = "ОтсутствияПоУв") 
				ИЛИ (Колонка.Имя = "ОтсутствияПоНеУв") 
				ИЛИ (Колонка.Имя = "Опоздания") Тогда
				Продолжить;	
			Иначе
				ИмяКолонки = Колонка.Имя;
				Для Каждого СтрокаТаблицы Из ВнешняяТаблицаСобытий Цикл
					СтрокаТаблицы[ИмяКолонки] = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.П");
					СтрокаТаблицы.Присутствия = СтрокаТаблицы.Присутствия + 1;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ВывестиТаблицуЗначенияВКодеВТаблицуНаФорме(ВнешняяТаблицаСобытий);

КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуЗначенияВКодеВТаблицуНаФорме(ТабВКоде)
		
	Для Каждого ЭлементСписка Из СписокУдаляемыхЭлементов Цикл
		
		НайденныйЭлементФормы = ЭтаФорма.Элементы.Найти(ЭлементСписка.Значение);
		Если НайденныйЭлементФормы <> Неопределено  Тогда
			ЭтаФорма.Элементы.Удалить(НайденныйЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокУдаляемыхРеквизитов Цикл
        МассивУдаляемыхРеквизитов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
		
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
		
	СписокУдаляемыхРеквизитов.Очистить();
    СписокУдаляемыхЭлементов.Очистить();
	СписокКолонок.Очистить();
	
    МассивДобавляемыхРеквизитов = Новый Массив;
	//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаСобытийРеквизит", Новый ОписаниеТипов("ТаблицаЗначений")));

    Для Каждого Колонка Из ТабВКоде.Колонки Цикл
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТаблицаСобытийРеквизит", , Истина));
		СписокУдаляемыхРеквизитов.Добавить("ТаблицаСобытийРеквизит" + "." + Колонка.Имя);
		
	КонецЦикла;

    ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Родитель = Элементы["ГруппаДанныеТаблицы"];
	ТабНаФорме = ЭтаФорма.Элементы.Добавить("ТаблицаСобытийРеквизит", Тип("ТаблицаФормы"), Родитель);
	ТабНаФорме.ПутьКДанным = "ТаблицаСобытийРеквизит"; 
	ТабНаФорме.ИзменятьСоставСтрок = Ложь;
	ТабНаФорме.ИзменятьПорядокСтрок = Ложь;
	ТабНаФорме.РазрешитьНачалоПеретаскивания = Ложь;
	ТабНаФорме.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТабНаФорме.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТабНаФорме.ВысотаШапки = 3;
	
	СписокУдаляемыхЭлементов.Добавить("ТаблицаСобытийРеквизит");
	Для Каждого Колонка Из ТабВКоде.Колонки Цикл
		
		Если Колонка.Имя = "Спортсмен" Тогда
			
			КолонкаСпортсмен = ЭтаФорма.Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ТабНаФорме);
			КолонкаСпортсмен.Заголовок = Колонка.Заголовок;
			КолонкаСпортсмен.ПутьКДанным = "ТаблицаСобытийРеквизит" + "." + Колонка.Имя;
			КолонкаСпортсмен.Вид = ВидПоляФормы.ПолеВвода; 
			КолонкаСпортсмен.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаЗаголовкаОсновнойТабеляПосещений;
			КолонкаСпортсмен.ШрифтЗаголовка = ШрифтыСтиля.ШрифтЗаголовкаТабеляПосещений;
			КолонкаСпортсмен.ВажностьПриОтображении = ВажностьПриОтображении.ОченьВысокая;
			КолонкаСпортсмен.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Иначе
			
			НоваяКолонка = ЭтаФорма.Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ТабНаФорме);
			НоваяКолонка.Заголовок = Колонка.Заголовок;
			НоваяКолонка.ПутьКДанным = "ТаблицаСобытийРеквизит" + "." + Колонка.Имя;
			НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
			НоваяКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаЗаголовкаОсновнойТабеляПосещений;
			НоваяКолонка.ШрифтЗаголовка = ШрифтыСтиля.ШрифтЗаголовкаТабеляПосещений;
			НоваяКолонка.ВажностьПриОтображении = ВажностьПриОтображении.ОченьНизкая;
			НоваяКолонка.Ширина = 2;
			НоваяКолонка.УстановитьДействие("ПриИзменении", "СтатусПриИзменении");
			
		КонецЕсли;
			
		Если Колонка.Имя = "Присутствия" Тогда                   
			НоваяКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаПрисутствия;
			НоваяКолонка.Заголовок = Новый ФорматированнаяСтрока((НСтр("ru = 'Присутствия'") + Символы.ПС + Символы.ПС + НСтр("ru = 'П'")));
			НоваяКолонка.ЦветФона = ЦветаСтиля.ЦветФонаПрисутствия;
			НоваяКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ЦветТекста = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ВажностьПриОтображении = ВажностьПриОтображении.ОченьВысокая;
			НоваяКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Право;
			НоваяКолонка.Ширина = 4;
		ИначеЕсли Колонка.Имя = "Отсутствия" Тогда
			НоваяКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаОтсутствия;
			НоваяКолонка.Заголовок = Новый ФорматированнаяСтрока((НСтр("ru = 'Отсутствия'") + Символы.ПС + НСтр("ru = 'Всего'")));
			НоваяКолонка.ЦветФона = ЦветаСтиля.ЦветФонаОтсутствия;
			НоваяКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ЦветТекста = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ВажностьПриОтображении = ВажностьПриОтображении.ОченьВысокая;
			НоваяКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Право;
			НоваяКолонка.Ширина = 4;
		ИначеЕсли Колонка.Имя = "ОтсутствияПоУв" Тогда
			НоваяКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаОтсутствияПоУв;
			НоваяКолонка.Заголовок = Новый ФорматированнаяСтрока((НСтр("ru = 'Отсутствия'") + Символы.ПС + НСтр("ru = 'по ув.причине'") + Символы.ПС + НСтр("ru = 'У'")));
			НоваяКолонка.ЦветФона = ЦветаСтиля.ЦветФонаОтсутствияПоУв;
			НоваяКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ЦветТекста = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ВажностьПриОтображении = ВажностьПриОтображении.ОченьВысокая;
			НоваяКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Право;
			НоваяКолонка.Ширина = 4;
		ИначеЕсли Колонка.Имя = "ОтсутствияПоНеУв" Тогда
			НоваяКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаОтсутствияПоНеУв;
			НоваяКолонка.Заголовок = Новый ФорматированнаяСтрока((НСтр("ru = 'Отсутствия'") + Символы.ПС + НСтр("ru = 'по неув.причине'") + Символы.ПС + НСтр("ru = 'Н'")));
			НоваяКолонка.ЦветФона = ЦветаСтиля.ЦветФонаОтсутствияПоНеУв;
			НоваяКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ЦветТекста = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ВажностьПриОтображении = ВажностьПриОтображении.ОченьВысокая;
			НоваяКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Право;
			НоваяКолонка.Ширина = 4;
		ИначеЕсли Колонка.Имя = "Опоздания" Тогда
			НоваяКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаОпоздания;
			НоваяКолонка.Заголовок = Новый ФорматированнаяСтрока((НСтр("ru = 'Опоздания'") + Символы.ПС + Символы.ПС + НСтр("ru = 'О'")));
			НоваяКолонка.ЦветФона = ЦветаСтиля.ЦветФонаОпоздания;
			НоваяКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ЦветТекста = ЦветаСтиля.ЦветТекстаЗаголовкаТабеляПосещений;
			НоваяКолонка.ВажностьПриОтображении = ВажностьПриОтображении.ОченьВысокая;
			НоваяКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Право;
			НоваяКолонка.Ширина = 4;
		КонецЕсли;
			
		СписокУдаляемыхЭлементов.Добавить(Колонка.Имя);
		СписокКолонок.Добавить(Колонка.Имя);
		//Если НЕ СтруктураСвойств = Неопределено Тогда
		//	
		//	Для каждого КлючЗначение Из СтруктураСвойств Цикл
		//		Попытка
		//			НоваяКолонка[КлючЗначение.Ключ] = СтруктураСвойств[КлючЗначение.Ключ];
		//		Исключение
		//		КонецПопытки;
		//	КонецЦикла;
		//	
		//КонецЕсли;     "ТаблицаСобытийРеквизит" + "_" + 
		
    КонецЦикла;
	
    ЗначениеВРеквизитФормы(ТабВКоде, "ТаблицаСобытийРеквизит");  
 
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуПосещенийДокумента();
	
	ВнешняяТаблицаСобытий = Новый ТаблицаЗначений;
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Спортсмены");
	ВнешняяТаблицаСобытий.Колонки.Добавить("Спортсмен", ОписаниеТипа, "Спортсмен");
	
	ТаблицаПосещенийДляКолонок = Объект.ТаблицаКолонок.Выгрузить();
	
	Для каждого Строка Из ТаблицаПосещенийДляКолонок Цикл
				
		Если (Строка.ИмяКолонки = "Спортсмен")      // можно через массив имен
			ИЛИ (Строка.ИмяКолонки = "Присутствия") 
			ИЛИ (Строка.ИмяКолонки = "Отсутствия") 
			ИЛИ (Строка.ИмяКолонки = "ОтсутствияПоУв") 
			ИЛИ (Строка.ИмяКолонки = "ОтсутствияПоНеУв") 
			ИЛИ (Строка.ИмяКолонки = "Опоздания") Тогда
			Продолжить;
		Иначе
			ДатаСобытия = СтрЗаменить(Строка.ИмяКолонки, "ДеньСобытия", "");
			ДатаЗаголовка = Дата(ДатаСобытия);
			ИмяКолонки = Строка.ИмяКолонки;
			ЗаголовокКолонки = Строка(Формат(ДатаЗаголовка, "ДФ='ддд - д.ММ Ч:мм'"));
			ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПосещений");
			ВнешняяТаблицаСобытий.Колонки.Добавить(ИмяКолонки, ОписаниеТипа, ЗаголовокКолонки);	
		КонецЕсли;
				
	КонецЦикла;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	ВнешняяТаблицаСобытий.Колонки.Добавить("Присутствия", ОписаниеТипаЧисло, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("Отсутствия", ОписаниеТипаЧисло, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("ОтсутствияПоУв", ОписаниеТипаЧисло, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("ОтсутствияПоНеУв", ОписаниеТипаЧисло, "");
	ВнешняяТаблицаСобытий.Колонки.Добавить("Опоздания", ОписаниеТипаЧисло, "");
                                                                 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельПосещенияТаблицаПосещений.Спортсмен КАК Спортсмен,
		|	ТабельПосещенияТаблицаПосещений.Период КАК Период,
		|	ТабельПосещенияТаблицаПосещений.СтатусПосещения КАК СтатусПосещения
		|ИЗ
		|	Документ.ТабельПосещения.ТаблицаПосещений КАК ТабельПосещенияТаблицаПосещений
		|ГДЕ
		|	ТабельПосещенияТаблицаПосещений.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	Спортсмен";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
	
		ВыборкаСпортсмен = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСпортсмен.Следующий() Цикл
			
			СтрокаВнешТаблицы = ВнешняяТаблицаСобытий.Добавить();
			СтрокаВнешТаблицы.Спортсмен = ВыборкаСпортсмен.Спортсмен;
			
			Присутствия = 0;
			Отсутствия = 0;
			ОтсутствияПоУв = 0;
			ОтсутствияПоНеУв = 0;
			Опоздания = 0;
			
			ВыборкаДетальныеЗаписи = ВыборкаСпортсмен.Выбрать();
		
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								
				ИмяКолонки = "ДеньСобытия" + Строка(СтрЗаменить(Формат(ВыборкаДетальныеЗаписи.Период, "ДФ='ггггММддЧЧммсс'"), ".", ""));   
				СтрокаВнешТаблицы[ИмяКолонки] = ВыборкаДетальныеЗаписи.СтатусПосещения;	
				
				Если ВыборкаДетальныеЗаписи.СтатусПосещения = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.П") Тогда 
					Присутствия = Присутствия + 1;
				ИначеЕсли ВыборкаДетальныеЗаписи.СтатусПосещения = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.У") Тогда 
					ОтсутствияПоУв = ОтсутствияПоУв + 1;
					Отсутствия  = Отсутствия + 1;
				ИначеЕсли ВыборкаДетальныеЗаписи.СтатусПосещения = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.Н") Тогда
					ОтсутствияПоНеУв = ОтсутствияПоНеУв + 1;
					Отсутствия  = Отсутствия + 1;
				ИначеЕсли ВыборкаДетальныеЗаписи.СтатусПосещения = ПредопределенноеЗначение("Перечисление.СтатусыПосещений.О") Тогда
					Опоздания = Опоздания + 1;	
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаВнешТаблицы.Присутствия = Присутствия;
			СтрокаВнешТаблицы.Отсутствия  = Отсутствия;
			СтрокаВнешТаблицы.ОтсутствияПоУв = ОтсутствияПоУв;
			СтрокаВнешТаблицы.ОтсутствияПоНеУв = ОтсутствияПоНеУв;
			СтрокаВнешТаблицы.Опоздания = Опоздания;
			
		КонецЦикла;
	
	КонецЕсли;

	ВывестиТаблицуЗначенияВКодеВТаблицуНаФорме(ВнешняяТаблицаСобытий);
	
КонецПроцедуры

&НаСервере
Процедура ПереносДанныхСТаблицаСобытийРеквизитВТаблицаПосещений()
	
	Объект.ТаблицаПосещений.Очистить();
	Объект.ТаблицаКолонок.Очистить();
	
	ТаблицаСобытийФормы = ТаблицаСобытийРеквизит.Выгрузить(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСобытийФормы.*
		|ПОМЕСТИТЬ ТаблицаСобытийФормы
		|ИЗ
		|	&ТаблицаСобытийФормы КАК ТаблицаСобытийФормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСобытийФормы.*
		|ИЗ
		|	ТаблицаСобытийФормы КАК ТаблицаСобытийФормы";
	
	Запрос.УстановитьПараметр("ТаблицаСобытийФормы", ТаблицаСобытийФормы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ТаблицаСобытийДокумента = Новый ТаблицаЗначений;
		
		ТаблицаСобытийДокумента.Колонки.Добавить("Период");
		ТаблицаСобытийДокумента.Колонки.Добавить("Спортсмен");
		ТаблицаСобытийДокумента.Колонки.Добавить("СтатусПосещения");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Для каждого ЭлементСписка Из СписокКолонок Цикл
				
				Если (ЭлементСписка.Значение = "Спортсмен") 
					ИЛИ (ЭлементСписка.Значение = "Присутствия") 
					ИЛИ (ЭлементСписка.Значение = "Отсутствия") 
					ИЛИ (ЭлементСписка.Значение = "ОтсутствияПоУв") 
					ИЛИ (ЭлементСписка.Значение = "ОтсутствияПоНеУв") 
					ИЛИ (ЭлементСписка.Значение = "Опоздания") Тогда
					Продолжить;
				Иначе
					
					Стр = ТаблицаСобытийДокумента.Добавить();
					
					Стр.Спортсмен = ВыборкаДетальныеЗаписи.Спортсмен;
					ИмяКолонки = ЭлементСписка.Значение;
					Стр.СтатусПосещения = ВыборкаДетальныеЗаписи[ИмяКолонки]; 
					ДатаСобытия = СтрЗаменить(ЭлементСписка.Значение, "ДеньСобытия", "");
					Стр.Период = Дата(ДатаСобытия);
					                               
				КонецЕсли;	
			КонецЦикла; 
			
		КонецЦикла;
		
		Объект.ТаблицаПосещений.Загрузить(ТаблицаСобытийДокумента);
		
	КонецЕсли;
	
	Для каждого ЭлементСписка Из СписокКолонок Цикл
		
		Если (ЭлементСписка.Значение = "Спортсмен") 
			ИЛИ (ЭлементСписка.Значение = "Присутствия") 
			ИЛИ (ЭлементСписка.Значение = "Отсутствия") 
			ИЛИ (ЭлементСписка.Значение = "ОтсутствияПоУв") 
			ИЛИ (ЭлементСписка.Значение = "ОтсутствияПоНеУв") 
			ИЛИ (ЭлементСписка.Значение = "Опоздания") Тогда
			Продолжить;
		Иначе
			
			СтрокаТаблицыКолонок = Объект.ТаблицаКолонок.Добавить();
			СтрокаТаблицыКолонок.ИмяКолонки = ЭлементСписка.Значение;
			
		КонецЕсли;	
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//ДокументОбъект.Записать();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	//ЭтаФорма.Прочитать();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении()
	
	Объект.НачалоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	Объект.КонецПериода  = КонецМесяца(Объект.ПериодРегистрации);
	
КонецПроцедуры

// {Рарус adilas #23018 -Табель учета посещаемости. Этап. 2021.12.10
&НаКлиенте
Процедура ЭтапНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭтоРодительЭтапаНаСервере(Результат) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Запрещено указывать этап спортивной подготовки верхнего уровня: Спортивно-оздоровительный, 
										|Начальная подготовка, Тренировочный (спортивная специализация), Совершенствование спортивного мастерства, 
										|Высшего спортивного мастерства'"), , "Предупреждение");
			Возврат;	
		Иначе	
			Объект.Этап = Результат;		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоРодительЭтапаНаСервере(Результат)
	
	Если НЕ ЗначениеЗаполнено(Результат.Родитель) Тогда	
		Возврат Истина;	
	Иначе	
		Возврат Ложь;	
	КонецЕсли;	
	
КонецФункции
// }Рарус adilas #23018 -Табель учета посещаемости. Этап. 2021.12.10

#КонецОбласти