#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// {Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	// {Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	Если РольДоступна("ПолныеПрава") Тогда
		 Элементы.Ответственный.Доступность = Истина;
	Иначе 	 
		 Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
	// }Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	// }Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	
	ПроведениеСоревнованийФормыСервер.СформироватьСтруктуруНормативовНаФорме(ЭтотОбъект);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УчетСпортсменовСервер.ЗаполнитьДокументУчебныйГод(ЭтотОбъект, Объект.УчебныйГод, Объект.Организация);
		ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
	Иначе	
		УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
		УправлениеУчебнымГодомСсылка = УчетСпортсменовСервер.ПолучитьДокументТекущегоУчебногоГода();
	    Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
		Если Параметры.Свойство("ТипСоревнования") Тогда
			Объект.ТипСоревнования = Параметры.ТипСоревнования;
		КонецЕсли;	
	КонецЕсли;	
	
	// {Рарус kotana #7847 2020.07.24
	ЗаполнитьДеревоНаФорме();
	// }Рарус kotana #7847 2020.07.24
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	Если НЕ УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).СтрахованиеСпортсменовОрганизация Тогда
		Элементы.СоставУчастниковСтраховойПолис.Видимость = Ложь;
	КонецЕсли;
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	Если НЕ УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		Элементы.ГруппаЖеребьевка.Видимость = Ложь;	
	КонецЕсли;
	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	
	// {Рарус adilas #13392 -Номер документа 2021.02.12
	Если Пользователи.РолиДоступны("АдминистраторСистемы, ПолныеПрава") Тогда
		Элементы.Номер.Доступность = Истина;
		Элементы.Номер.ТолькоПросмотр = Ложь;
	КонецЕсли;
	// }Рарус adilas #13392 -Номер документа 2021.02.12

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроведениеСоревнованийФормыКлиент.СформироватьЗаголовокФормыДокумента(ЭтотОбъект, "СоревнованиеОФПСдачаНормативов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// adilas 25.11.2020
	// Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.УcправлениеУчебнымГодом.Форма.ФормаВыбора") И ВыбранноеЗначение <> Неопределено Тогда
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.УправлениеУчебнымГодом.Форма.ФормаВыбора") И ВыбранноеЗначение <> Неопределено Тогда
	// adilas
		Объект.УчебныйГод = ВыбранноеЗначение.УчебныйГод;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Нормативы.Форма.ФормаВыбора" Тогда
	    ДобавитьНормативВГотовуюТаблицуНаФорму(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
	
		ПроводитьБезПроверкиНаВозраст = Модифицированность;
			
		Если НЕ ПроверитьЗаполнение()Тогда
			Возврат;
		КонецЕсли;
			
		ПеренестиСтруктуруНормативовВТаблицуДокументаНаСервере(Отказ);
			
		Если Отказ Тогда
			Возврат
		КонецЕсли;
			
		Для Каждого строкаСоставУчастников Из Объект.СоставУчастников Цикл
			Если НЕ ЗначениеЗаполнено(строкаСоставУчастников.МеждународнаяВозрастнаяГруппа) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У спортсмена %1 не указана возрастная группа'"),
					строкаСоставУчастников.Спортсмен);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.СоставУчастников[" + СокрЛП((строкаСоставУчастников.НомерСтроки-1)) +"].Спортсмен");	
				   Отказ = Истина;
			КонецЕсли;	
		КонецЦикла;
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
			
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ПроводитьБезПроверкиНаВозраст Тогда
						
			ПроведениеСоревнованийФормыКлиент.ПроверитьСоответствиеВозрастнойГруппыСпортсменаПередЗаписью(ЭтотОбъект,Отказ);
				
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
		
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ПроводитьБезПроверкиНаЗавленных
		И Объект.ТипСоревнования = ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Соревнование") Тогда
			
		ПроверитьЗаявленныхСпортсменовПередЗаписью(Отказ);
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;
		
	//{Рарус lobash IN-8869 28.08.20
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ПроводитьБезПроверкиНаТренера Тогда
			
		ПроверитьСоответствиеТренераПередЗаписью(Отказ);
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;	
	//}Рарус lobash IN-8869 28.08.20	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПроводитьБезПроверкиНаВозраст = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура УчебныйГодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.СоставУчастников.Количество()= 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("УчебныйГодПриИзмененииЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть 'Спортсмены' будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	Иначе
		
		УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСоздание(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодСоздание(ЭтаФорма, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодОткрытие(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодОткрытие(УправлениеУчебнымГодомСсылка,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроведенияПриИзменении(Элемент)
	
	ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСоревнованияПриИзменении(Элемент)
	
	ПроведениеСоревнованийФормыКлиент.СформироватьЗаголовокФормыДокумента(ЭтотОбъект, "СоревнованиеОФПСдачаНормативов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

&НаКлиенте
Процедура СоставУчастниковПриИзменении(Элемент)
	
	ПроведениеСоревнованийФормыКлиент.ПронумероватьТаблицуНаФорме(СоставУчастниковНаФорме);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковСпортсменПриИзменении(Элемент)
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Спортсмен) Тогда
		
		// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
		Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
			ЗаполнитьДополнительныеДанныеНаФорме(ТекДанные.НомерСтроки-1);
		Иначе
			ЗаполнитьДополнительныеДанныеНаФорме(ТекДанные.НомерСтроки-1, Ложь);
		КонецЕсли;
		
		// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковНаФормеТренерПриИзменении(Элемент)
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	
	Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
		
	Если ЗначениеЗаполнено(ТекДанные["Тренер_" + Гуид]) Тогда
		
		массивСтрока_ = таблицаДляРазбора.НайтиСтроки(Новый Структура("УникальныйИдентификаторНорматива",Гуид));
		ТекДанные["Норматив_" + Гуид] = массивСтрока_[0].Норматив;
		ТекДанные["Выбор_" + Гуид] = Истина;
			
	Иначе
		ТекДанные["Норматив_" + Гуид] = "";
		ТекДанные["ТипРезультата_" + Гуид] = "";
		ТекДанные["УникальныйИдентификаторСтрокиНорматива_"+Гуид] = "";
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СоставУчастниковДопускОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроведениеСоревнованийФормыКлиент.ЭлементФормыОткрытие(ЭтотОбъект, СтандартнаяОбработка, "ДопускРегистратор", "СоставУчастниковДопускОткрытиеОтвет");
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковСтраховойПолисОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроведениеСоревнованийФормыКлиент.ЭлементФормыОткрытие(ЭтотОбъект, СтандартнаяОбработка, "СтраховойПолисРегистратор", "СоставУчастниковСтаховойПолисОткрытиеОтвет");
	
КонецПроцедуры

// {Рарус kotana #7847 2020.07.24
//
#Область ЖеребьевкаОбработчикиСобытий

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийПослеУдаления(Элемент)
	
	ВыполнитьПережеребьевку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ВыполнитьПережеребьевку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущаяВозрастнаяГруппа = "";
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Родитель = ТекДанные.ПолучитьРодителя(); 
		Если Родитель = Неопределено Тогда
			ТекущаяВозрастнаяГруппа = ТекДанные.МеждународныеВозрастныеГруппы;
		Иначе
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖеребьевкаДеревоЗначенийПриИзменении(Элемент)
	
	ВыполнитьПережеребьевку();
	
	Для каждого Уроверь из ЖеребьевкаДеревоЗначений.ПолучитьЭлементы() цикл
		Элементы.ЖеребьевкаДеревоЗначений.Развернуть(Уроверь.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
 
// }Рарус kotana #7847 2020.07.24

#КонецОбласти
 
#Область ОбработчикиКоманд

// {Рарус adilas #-7878 -Команда "Заполнить по заявкам" 2020.07.08
//
&НаКлиенте
Процедура ЗаполнитьПоЗаявкам(Команда)
	
	Если НЕ ЭтотОбъект.ПроверитьЗаполнение()Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ СоставУчастниковНаФорме.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоЗаявкамЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоЗаявкамПродолжить();
	
КонецПроцедуры
// }Рарус adilas #-7878 -Команда "Заполнить по заявкам" 2020.07.08

&НаКлиенте
Процедура КомандаДобавитьНорматив(Команда) Экспорт
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Нормативы.ФормаВыбора",ПараметрыПодбора,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьНорматив(Команда) Экспорт
	
	КомандаУдалитьНормативНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыделитьВсе(Команда) Экспорт
	
	ПроведениеСоревнованийФормыКлиент.ВыделитьВсехУчастниковНаФорме(ЭтотОбъект, "таблицаДляРазбора", "УникальныйИдентификаторНорматива");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВсе(Команда) Экспорт
	
	ПроведениеСоревнованийФормыКлиент.УбратьВыделениеВсехУчастниковНаФорме(ЭтотОбъект, "таблицаДляРазбора", "УникальныйИдентификаторНорматива");
	
КонецПроцедуры

// {Рарус kotana #7847 2020.07.24
// 
&НаКлиенте
Процедура ЗаполнитьЖеребьевку(Команда)
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		ВозрастныеГруппыУказаны = ПроверитьЗаполнениеВозрастныеГруппы();
		
		Если НЕ ВозрастныеГруппыУказаны Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены возрастные группы!",,"ВозрастныеГруппы","Объект.ВозрастныеГруппы");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18

	Если НЕ ЗначениеЗаполнено(Объект.УчебныйГод) Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен учебный год!",,"УчебныйГод","Объект.УчебныйГод");
			Возврат;
	
	КонецЕсли; 
	
	Если НЕ Объект.Жеребьевка.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЖеребьевкуЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЖеребьевкуПродолжить();
	
КонецПроцедуры
// }Рарус kotana #7847 2020.07.24
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗавершенияКомандыЗаполнитьПоЗаявкам

&НаКлиенте
Процедура ЗаполнитьПоЗаявкамЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьВсеКолонкиНормативовНаФормеНаСервере();
		таблицаДляРазбора.Очистить();
		СоставУчастниковНаФорме.Очистить();
		ЭтаФорма.Прочитать();
		Объект.СоставУчастников.Очистить();
		Объект.ЗаявленныеНормативы.Очистить();
	Иначе
		Возврат
	КонецЕсли;
	ЗаполнитьПоЗаявкамПродолжить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаявкамПродолжить()
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоЗаявкамПродолжитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СоревнованиеОФПСдачаНормативов.Форма.ФормаНастроекПодбораПоЗаявкам",
	  Новый Структура("ДатаОкончания", Объект.ДатаПроведения),
	  ЭтаФорма,
	  ,
	  ,
	  ,
	  Оповещение,
	  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	
  
&НаКлиенте
Процедура ЗаполнитьПоЗаявкамПродолжитьЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе	
	    ЗаполнитьПоЗаявкамНаСервере(Результат);
	    ЭтаФорма.Прочитать();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПоЗаявкамНаСервере(Параметры)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.Спортсмен КАК Спортсмен,
		|	ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		|	ФизическиеЛица.Пол КАК Пол,
		|	ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.Норматив КАК Норматив,
		|	ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.Тренер КАК Тренер
		|ПОМЕСТИТЬ ВТ_ДанныеПоЗаявкам
		|ИЗ
		|	РегистрСведений.ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.СрезПоследних(
		|			&ДатаДокумента,
		|			Организация = &Организация
		|				И УчебныйГод = &УчебныйГод
		|				И ВидСпорта = &ВидСпорта
		|				И ТипСоревнования = &ТипСоревнования
		|				%1
		|				%2
		|				%3) КАК ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ 
		|    ВТ_ДанныеПоЗаявкам.Спортсмен КАК Спортсмен,
		|    ВТ_ДанныеПоЗаявкам.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		|    ВТ_ДанныеПоЗаявкам.Пол КАК Пол,
		|    ВТ_ДанныеПоЗаявкам.Тренер КАК Тренер,
		|    ВТ_ДанныеПоЗаявкам.Норматив КАК Норматив
		|ИЗ 
		|    ВТ_ДанныеПоЗаявкам КАК ВТ_ДанныеПоЗаявкам
		|ИТОГИ ПО
		|    Норматив";
	
	Если НЕ Параметры = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ?(Параметры.СписокЗаявок.Количество()>0, " И Регистратор В (&СписокЗаявок) ", ""));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ?(Параметры.СписокНормативов.Количество()>0, " И Норматив В (&СписокНормативов) ", ""));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%3", ?(Параметры.Период.ДатаНачала = Дата(1,1,1), "", " И Период >= &ДатаНачала "));
		ДатаСреза    = ?(Параметры.Период.ДатаОкончания = Дата(1,1,1), Объект.ДатаПроведения, Параметры.Период.ДатаОкончания);
		
		Запрос.УстановитьПараметр("СписокЗаявок", Параметры.СписокЗаявок);
		Запрос.УстановитьПараметр("СписокНормативов", Параметры.СписокНормативов);
		Запрос.УстановитьПараметр("ДатаНачала", Параметры.Период.ДатаНачала);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%3", "");
		ДатаСреза    = Объект.ДатаПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидСпорта"			, Объект.ВидСпорта);
	Запрос.УстановитьПараметр("ДатаДокумента"		, КонецДня(ДатаСреза));
	Запрос.УстановитьПараметр("Организация"			, Объект.Организация);
	Запрос.УстановитьПараметр("УчебныйГод"			, Объект.УчебныйГод);
	Запрос.УстановитьПараметр("ТипСоревнования"		, Объект.ТипСоревнования);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для указанных отборов данных не обнаружено!");
		Возврат;
	Иначе
		
		ВыборкаНорматив = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНорматив.Следующий() Цикл
			Если Не Параметры.СписокНормативов.Количество() = 0 Тогда
			строкаЗавленныйНорматив = Объект.ЗаявленныеНормативы.Добавить();
			строкаЗавленныйНорматив.Норматив = ВыборкаНорматив.Норматив;
			строкаЗавленныйНорматив.УникальныйИдентификаторНорматива = СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор()),"-","_");
			КонецЕсли;
			Выборка = ВыборкаНорматив.Выбрать();
			Пока Выборка.Следующий() Цикл
				строкаСпортсмен = Объект.СоставУчастников.Добавить();
				ЗаполнитьЗначенияСвойств(строкаСпортсмен,Выборка);
				Если Не Параметры.СписокНормативов.Количество() = 0 Тогда
				строкаСпортсмен.УникальныйИдентификаторНорматива = строкаЗавленныйНорматив.УникальныйИдентификаторНорматива;
				КонецЕсли;
			КонецЦикла;	
			
		КонецЦикла;
		
		ПроведениеСоревнованийФормыСервер.СформироватьСтруктуруНормативовНаФорме(ЭтотОбъект, Истина);
		ЗаполнитьДополнительныеДанныеНаФорме(,Ложь);
		
	КонецЕсли;	
				
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗавершенияОткрытияДопускСтраховойПолис

&НаКлиенте
Процедура СоставУчастниковДопускОткрытиеОтвет(Результат, ДопПараметры) Экспорт
	
	ДопускРегистратор = ДопПараметры.ДопускРегистратор;
	Спортсмен         = ДопПараметры.Спортсмен;
	НомерСтроки       = ДопПараметры.НомерСтроки;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоказатьЗначение(,ДопускРегистратор);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Оповещение = Новый ОписаниеОповещения("СоставУчастниковДопускОткрытиеОтветЗавершение",ЭтотОбъект, Новый Структура("НомерСтроки",НомерСтроки));
		ОткрытьФорму("Документ.ДопускиУчастниковКСпортивнымСоревнованиям.Форма.ФормаДокумента", Новый Структура("Спортсмен",Спортсмен),,,,,Оповещение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковДопускОткрытиеОтветЗавершение(Результат, ДопПараметры) Экспорт
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1);
	Иначе
		ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1, Ложь);
	КонецЕсли;
		
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25	
	
КонецПроцедуры	

&НаКлиенте
Процедура СоставУчастниковСтаховойПолисОткрытиеОтвет(Результат, ДопПараметры) Экспорт
	
	СтраховойПолисРегистратор = ДопПараметры.СтраховойПолисРегистратор;
	Спортсмен                 = ДопПараметры.Спортсмен;
	НомерСтроки               = ДопПараметры.НомерСтроки;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоказатьЗначение(,СтраховойПолисРегистратор);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Оповещение = Новый ОписаниеОповещения("СоставУчастниковСтаховойПолисОткрытиеОтветЗавершение",ЭтотОбъект, Новый Структура("НомерСтроки",НомерСтроки));
		ОткрытьФорму("Документ.СтраховойПолисСпортсмена.Форма.ФормаДокумента", Новый Структура("Спортсмен",Спортсмен),,,,,Оповещение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковСтаховойПолисОткрытиеОтветЗавершение(Результат, ДопПараметры) Экспорт
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1);
	Иначе
		ЗаполнитьДополнительныеДанныеНаФорме(ДопПараметры.НомерСтроки-1, Ложь);
	КонецЕсли;
		
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.25	
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеНаФорме(НомерСтроки = Неопределено, ЗаполнятьВозрастнуюГруппу = Истина, МассивСтрокДляЗаполнения = Неопределено)
	
	СтруктураПараметровЗапроса = Новый Структура("СоставУчастников, УчебныйГод, ДатаПроведения, ВидСпорта, Организация", 
	     ПроведениеСоревнованийФормыСервер.ПроиндексироватьТаблицуДокумента(ЭтотОбъект,"СоставУчастниковНаФорме"), Объект.УчебныйГод, Объект.ДатаПроведения, Объект.ВидСпорта, Объект.Организация);
		 
	Выборка = ПроведениеСоревнованийСлужебныйСервер.ЗаполнитьДополнительныеДанныеНаФорме(СтруктураПараметровЗапроса,НомерСтроки);
	
	ПроверятьНаСтроки = ?(МассивСтрокДляЗаполнения = Неопределено, Ложь, Истина);
		
	Пока Выборка.Следующий() Цикл
		
		Если ПроверятьНаСтроки Тогда
			Если МассивСтрокДляЗаполнения.Найти(Выборка.Индекс) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		
		строкаОбъект = СоставУчастниковНаФорме[Выборка.Индекс];
		ЗаполнитьЗначенияСвойств(строкаОбъект,Выборка,,?(ЗаполнятьВозрастнуюГруппу,"","МеждународнаяВозрастнаяГруппа"));
		Если ЗаполнятьВозрастнуюГруппу Тогда
			Для Каждого СтрокаНорматив Из таблицаДляРазбора Цикл
				строкаОбъект["Тренер_" + СтрокаНорматив.УникальныйИдентификаторНорматива] = Выборка.Тренер;
			КонецЦикла;	
		КонецЕсли;	
		Если Выборка.Допуск = "ДОПУЩЕН" Тогда
			строкаОбъект.Допуск = Выборка.Допуск + " (действует до " + Формат(Выборка.ДействуетДо,"ДЛФ=Д") + ")";
		ИначеЕсли Выборка.Допуск = "НЕ ДОПУЩЕН" И Выборка.ДействуетДо <= КонецДня(Объект.ДатаПроведения) И Выборка.ДействуетДо <> Дата(1,1,1) Тогда
			строкаОбъект.Допуск = "ПРОСРОЧЕН!" + " (действует до " + Формат(Выборка.ДействуетДо,"ДЛФ=Д") + ")";
		КонецЕсли;
		Если Выборка.СтраховойПолисРегистратор = Документы.СтраховойПолисСпортсмена.ПустаяСсылка() Тогда
			строкаОбъект.СтраховойПолис = "НЕ ВВЕДЕН";
		ИначеЕсли Выборка.ДатаОкончания <= КонецДня(Объект.ДатаПроведения) Тогда
			строкаОбъект.СтраховойПолис = "ПРОСРОЧЕН! " + СокрЛП(Выборка.СтраховаяКомпания) + "; № " + СокрЛП(Выборка.НомерСтраховогоПолиса) + " период действия " 
			   + Формат(Выборка.ДатаНачала, "ДЛФ=Д") + "-" + Формат(Выборка.ДатаОкончания, "ДЛФ=Д");
		Иначе
			строкаОбъект.СтраховойПолис = СокрЛП(Выборка.СтраховаяКомпания) + "; № " + СокрЛП(Выборка.НомерСтраховогоПолиса) + " период действия " 
			   + Формат(Выборка.ДатаНачала, "ДЛФ=Д") + "-" + Формат(Выборка.ДатаОкончания, "ДЛФ=Д");   
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

#Область ПроверкаНаФормеПередПроведением

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДокументПринудительно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаявленныхСпортсменовПередЗаписью(Отказ)
	
	СформироватьМассивНезаявленныхПоНормативамСпортсменов(Отказ);
	
	Если НЕ Отказ Тогда
		Возврат;
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьЗаявленныхСпортсменовПередЗаписьюЗавершение",
		ЭтотОбъект);
		
		ТекстСообщения = НСтр("ru = 'В документе найдены незаявленные спортсмены.'");
		
		СписокКоманд = Новый СписокЗначений;
		СписокКоманд.Добавить(КодВозвратаДиалога.Да,     "Продолжить проведение");
		СписокКоманд.Добавить(КодВозвратаДиалога.Нет,    "Отмена");
		
		ПоказатьВопрос(Оповещение,
		ТекстСообщения,
		СписокКоманд,
		0);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаявленныхСпортсменовПередЗаписьюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПроводитьБезПроверкиНаЗавленных = Истина;
		ЗаписатьДокументПринудительно();
				
	Иначе
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьДокументПринудительно()
	
	Модифицированность = Ложь;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьМассивНезаявленныхПоНормативамСпортсменов(Отказ)
	
	таблицаЗавленныхВДокументеСпортсменов = ПроведениеСоревнованийФормыСервер.СформироватьТаблицуЗаявленныхСпортсменовПоНормативам(ЭтотОбъект, "таблицаДляРазбора", "УникальныйИдентификаторНорматива");
	
	Запрос = Новый Запрос;
	
	Текст  = "";
	// {Рарус adilas #- -Sonar 2021.06.29
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
	   Текст,
	   Новый Структура("Индекс, Спортсмен, МеждународнаяВозрастнаяГруппа, Норматив, Тренер"),
	   "ВТ_ДанныеНаФорме",
	   "ТаблицаДокумента");
	   
	Запрос.УстановитьПараметр("ТаблицаДокумента"  , таблицаЗавленныхВДокументеСпортсменов);
	Запрос.УстановитьПараметр("Дата"              , Объект.ДатаПроведения);
	Запрос.УстановитьПараметр("ВидСпорта"         , Объект.ВидСпорта);
	Запрос.УстановитьПараметр("Организация"       , Объект.Организация);
	Запрос.УстановитьПараметр("УчебныйГод"        , Объект.УчебныйГод);
	Запрос.УстановитьПараметр("ТипСоревнования"   , Объект.ТипСоревнования);
	
	Запрос.Текст = Текст + "
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ЗаявкиНаОФП.Спортсмен КАК Спортсмен,
	                |	ЗаявкиНаОФП.Норматив КАК Норматив,
	                |	ЗаявкиНаОФП.Тренер КАК Тренер,
	                |	ЗаявкиНаОФП.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	                |ПОМЕСТИТЬ ВТ_ЗаявленныеСпортсменыНаПериод
	                |ИЗ
	                |	РегистрСведений.ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.СрезПоследних(
	                |			КОНЕЦПЕРИОДА(&Дата,ДЕНЬ),
	                |			ВидСпорта = &ВидСпорта
	                |				И Организация = &Организация
	                |				И УчебныйГод = &УчебныйГод
	                |				И ТипСоревнования = &ТипСоревнования) КАК ЗаявкиНаОФП
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ДанныеНаФорме.Спортсмен КАК Спортсмен,
					|	ВТ_ДанныеНаФорме.Норматив КАК Норматив,
					|	ВТ_ДанныеНаФорме.Тренер КАК Тренер,
					|	ВТ_ДанныеНаФорме.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	                |ИЗ
	                |	ВТ_ДанныеНаФорме КАК ВТ_ДанныеНаФорме
	                |ГДЕ
	                |	НЕ (ВТ_ДанныеНаФорме.Спортсмен, ВТ_ДанныеНаФорме.Норматив, ВТ_ДанныеНаФорме.Тренер, ВТ_ДанныеНаФорме.МеждународнаяВозрастнаяГруппа) В
	                |				(ВЫБРАТЬ
	                |					ВТ_ЗаявленныеСпортсменыНаПериод.Спортсмен,
	                |					ВТ_ЗаявленныеСпортсменыНаПериод.Норматив,
	                |					ВТ_ЗаявленныеСпортсменыНаПериод.Тренер,
	                |					ВТ_ЗаявленныеСпортсменыНаПериод.МеждународнаяВозрастнаяГруппа
	                |				ИЗ
	                |					ВТ_ЗаявленныеСпортсменыНаПериод)";
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		
		Отказ = Истина;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Спортсмен %1 с международной возрастной группой %2 не заявлен тренером %3 на сдачу норматива %4!'"),
					Выборка.Спортсмен,
					Выборка.МеждународнаяВозрастнаяГруппа,
					Выборка.Тренер,
					Выборка.Норматив);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

//{Рарус lobash IN-8869 28.08.20
&НаКлиенте
Процедура ПроверитьСоответствиеТренераПередЗаписью (Отказ)
	
	СформироватьМассивСпортсменовНеСоответствующихПоТренеру(Отказ);
	
	Если НЕ Отказ Тогда
		Возврат;
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьСоответствиеТренераПередЗаписьюЗавершение",
		ЭтотОбъект);
		
		ТекстСообщения = НСтр("ru = 'В документе найдены спортсмены из группы другого тренера.'");
		
		СписокКоманд = Новый СписокЗначений;
		СписокКоманд.Добавить(КодВозвратаДиалога.Да,     "Продолжить проведение");
		СписокКоманд.Добавить(КодВозвратаДиалога.Нет,    "Отмена");
		
		ПоказатьВопрос(Оповещение,
		ТекстСообщения,
		СписокКоманд,
		0);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеТренераПередЗаписьюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПроводитьБезПроверкиНаТренера = Истина;
		ЗаписатьДокументПринудительно();
				
	Иначе
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМассивСпортсменовНеСоответствующихПоТренеру(Отказ)
	
	ТДСпортсменыТренеры = ПроведениеСоревнованийФормыСервер.СформироватьТаблицуЗаявленныхСпортсменовПоНормативам(ЭтотОбъект, "таблицаДляРазбора", "УникальныйИдентификаторНорматива");
	
	Запрос = Новый Запрос;
	
	Текст  = "";
	// {Рарус adilas #- -Sonar 2021.06.29
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
	   Текст,
	   Новый Структура("Индекс, Спортсмен, Норматив, Тренер"),
	   "ВТ_ДанныеНаФорме",
	   "ТаблицаДокумента");
	   
	Запрос.УстановитьПараметр("ТаблицаДокумента"  , ТДСпортсменыТренеры);
	Запрос.УстановитьПараметр("Дата"              , Объект.ДатаПроведения);
	Запрос.УстановитьПараметр("ВидСпорта"         , Объект.ВидСпорта);
	Запрос.УстановитьПараметр("Организация"       , Объект.Организация);
	Запрос.УстановитьПараметр("УчебныйГод"        , Объект.УчебныйГод);
	
	Запрос.Текст = Текст + "
	                |;
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СоставГруппы.Спортсмен КАК Спортсмен,
					|	СоставГруппы.УчебныйГод КАК УчебныйГод,
					|	СоставГруппы.Организация КАК Организация,
					|	СоставГруппы.ВидСпорта КАК ВидСпорта,
					|	СоставГруппы.Группа КАК Группа,
					|	СоставГруппы.ТренерСборной КАК Тренер
					|ПОМЕСТИТЬ ВТ_СоставГруппы
					|ИЗ
					|	РегистрСведений.СоставГруппы.СрезПоследних(
					|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
					|			ВидСпорта = &ВидСпорта
					|				И Организация = &Организация
					|				И УчебныйГод = &УчебныйГод) КАК СоставГруппы
					| ;
					|
					|////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ДанныеНаФорме.Спортсмен КАК Спортсмен,
					|	ВТ_ДанныеНаФорме.Норматив КАК Норматив,
					|	ВТ_ДанныеНаФорме.Тренер КАК Тренер
	                |ИЗ
	                |	ВТ_ДанныеНаФорме КАК ВТ_ДанныеНаФорме
	                |ГДЕ
	                |	НЕ (ВТ_ДанныеНаФорме.Спортсмен, ВТ_ДанныеНаФорме.Тренер) В
	                |				(ВЫБРАТЬ
	                |					ВТ_СоставГруппы.Спортсмен,
	                |					ВТ_СоставГруппы.Тренер
	                |				ИЗ
	                |					ВТ_СоставГруппы)";
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		
		Отказ = Истина;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Спортсмен %1 по нормативу %3 не относится к группе тренера %2!'"),
					Выборка.Спортсмен,
					Выборка.Тренер,
					Выборка.Норматив);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры
//}Рарус lobash IN-8869 28.08.20

#КонецОбласти

#Область ОбработчикиУчебногоГода

&НаКлиенте
Процедура УчебныйГодПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СоставУчастников.Очистить();
		УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСозданиеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
	   Объект.УчебныйГод = Результат.УчебныйГодСсылка;
	   УправлениеУчебнымГодомСсылка = Результат.УчебныйГодОбъект;
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	УправлениеУчебнымГодомСсылка = Результат;
    ПолучитьУчебныйГодСсылка();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьУчебныйГодСсылка()
	Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
КонецПроцедуры

#КонецОбласти

// {Рарус kotana #7847 2020.07.24
//
#Область ЖеребьевкаСлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьЖеребьевкуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Жеребьевка.Очистить();
		ЖеребьевкаДеревоЗначений.ПолучитьЭлементы().Очистить();
		ЗаполнитьЖеребьевкуПродолжить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеВозрастныеГруппы()
	
	ТЗУчастники = Объект.СоставУчастников.Выгрузить();
	ТЗУчастники.Свернуть("МеждународнаяВозрастнаяГруппа");
	СписокВозрастныеГруппы.ЗагрузитьЗначения(ТЗУчастники.ВыгрузитьКолонку("МеждународнаяВозрастнаяГруппа"));
	ЗаполненыГруппы = (СписокВозрастныеГруппы.Количество()>0);
	Возврат ЗаполненыГруппы;
	
КонецФункции

#Область ВычислениеНомеровПозицийЭлементовДереваЖеребьевки
	
&НаСервере
Процедура ЗаполнитьЖеребьевкуПродолжить()
	
	тзВозрастныеГруппы = Новый ТаблицаЗначений;
	тзВозрастныеГруппы.Колонки.Добавить("МеждународнаяВозрастнаяГруппа" , Новый ОписаниеТипов("СправочникСсылка.МеждународныеВозрастныеГруппы"));
	тзВозрастныеГруппы.Колонки.Добавить("ДатаРожденияНачало" 			, Новый ОписаниеТипов("Дата"));
	тзВозрастныеГруппы.Колонки.Добавить("Пол"                			, Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	тзВозрастныеГруппы.Колонки.Добавить("ПолПредставление"   			, Новый ОписаниеТипов("Строка"));
	
	Для Каждого Элем Из СписокВозрастныеГруппы Цикл
		ЗначениеВозрастнаяГруппа = Элем.Значение;
		ГодРожденияНачало = Год(Объект.УчебныйГод.ДатаНачала) - ЗначениеВозрастнаяГруппа.ВозрастОт;
		ДатаРожденияНачало = Дата(ГодРожденияНачало,01,01);
		строкаВозрастнаяГруппа_1 = тзВозрастныеГруппы.Добавить();
		строкаВозрастнаяГруппа_1.МеждународнаяВозрастнаяГруппа = ЗначениеВозрастнаяГруппа;
		строкаВозрастнаяГруппа_1.ДатаРожденияНачало = ДатаРожденияНачало;
		строкаВозрастнаяГруппа_1.Пол                = Перечисления.ПолФизическогоЛица.Мужской;
		строкаВозрастнаяГруппа_1.ПолПредставление   = "Юноши";
	КонецЦикла;
	
	Для Каждого Элем Из СписокВозрастныеГруппы Цикл
		строкаВозрастнаяГруппа_2                    = тзВозрастныеГруппы.Добавить();
		строкаВозрастнаяГруппа_2.МеждународнаяВозрастнаяГруппа   = Элем.Значение;
		ГодРожденияНачало = Год(Объект.УчебныйГод.ДатаНачала) - строкаВозрастнаяГруппа_2.МеждународнаяВозрастнаяГруппа.ВозрастОт;
		ДатаРожденияНачало = Дата(ГодРожденияНачало,01,01);
		строкаВозрастнаяГруппа_2.ДатаРожденияНачало = ДатаРожденияНачало;
		строкаВозрастнаяГруппа_2.Пол                = Перечисления.ПолФизическогоЛица.Женский;
		строкаВозрастнаяГруппа_2.ПолПредставление   = "Девушки";
	КонецЦикла;
	
	тзВозрастныеГруппы.Сортировать("ДатаРожденияНачало Возр");
	
	ТекущаяВозрастнаяГруппа = Неопределено;
	Для Индекс = 0 По тзВозрастныеГруппы.Количество()-1 Цикл
		строкаЖеребьевка = Объект.Жеребьевка.Добавить();
		ЗаполнитьЗначенияСвойств(строкаЖеребьевка,тзВозрастныеГруппы[Индекс]);
		строкаЖеребьевка.НомерПозицииВГруппе = Индекс + 1;
	КонецЦикла;
	
	ЗаполнитьДеревоНаФорме();
	
	ПроставитьСтартовыеНомера();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПережеребьевку()
	
	НомерПозицииВГруппе = 1;
	
	ДеревоЗначений = РеквизитФормыВЗначение("ЖеребьевкаДеревоЗначений");
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Для Каждого Строки Из СтрокаДерева.Строки Цикл
			Строки.НомерПозицииВГруппе = НомерПозицииВГруппе;
			НомерПозицииВГруппе = НомерПозицииВГруппе + 1;
		КонецЦикла;	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ЖеребьевкаДеревоЗначений");
	
	ОбновитьТаблицуЖеребьевкиПоДеревуЗначений();
	
	ПроставитьСтартовыеНомера();
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеДереваЗначенийЖеребьевки
	
&НаСервере
Процедура ЗаполнитьДеревоНаФорме()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ЖеребьевкаДеревоЗначений");
	
	тзВозрастныеГруппы = Объект.Жеребьевка.Выгрузить();
	тзВозрастныеГруппы.Свернуть("МеждународнаяВозрастнаяГруппа");
	
	Для Каждого СтрокаВГ Из тзВозрастныеГруппы Цикл
		ЗначениеВозрастнаяГруппа = СтрокаВГ.МеждународнаяВозрастнаяГруппа;
	    Строки = ДеревоЗначений.Строки.Добавить();
		Строки.МеждународнаяВозрастнаяГруппа = ЗначениеВозрастнаяГруппа;
		массивСтрок = Объект.Жеребьевка.НайтиСтроки(Новый Структура("МеждународнаяВозрастнаяГруппа",ЗначениеВозрастнаяГруппа));
		Для Каждого стрМассив Из массивСтрок Цикл
			строка = Строки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(строка,стрМассив);
		КонецЦикла;	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ЖеребьевкаДеревоЗначений");
	
КонецПроцедуры	

#КонецОбласти

#Область ВычислениеСтартовыхНомеровУчастников

&НаСервере
Процедура ПроставитьСтартовыеНомера()
	
	ТЗЖеребевка = Объект.Жеребьевка.Выгрузить();
	ТЗЖеребевка.Сортировать("НомерПозицииВГруппе Возр");
	
	//{Рарус astyul, IN-7964, 10.08.2020
	//ТЗУчастников = Объект.СоставУчастников.Выгрузить();
	ТЗУчастников = СоставУчастниковНаФорме.Выгрузить();
	//}Рарус astyul, IN-7964, 10.08.2020
	ТЗУчастниковСвернутая = ТЗУчастников.Скопировать();
	ТЗУчастниковСвернутая.Свернуть("Спортсмен, МеждународнаяВозрастнаяГруппа, Пол");
	
	МассивНомеровЖеребьевки = Новый Массив;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Итератор = 1;
	
	Для каждого СтрокаЖеребьевки Из ТЗЖеребевка Цикл
		
		ОтборСтрокГруппаПол = Новый Структура; 
		ОтборСтрокГруппаПол.Вставить("МеждународнаяВозрастнаяГруппа",СтрокаЖеребьевки.МеждународнаяВозрастнаяГруппа);
		ОтборСтрокГруппаПол.Вставить("Пол",СтрокаЖеребьевки.Пол);
		
		ОтобранныеСтрокиСпортсменов =  ТЗУчастниковСвернутая.НайтиСтроки(ОтборСтрокГруппаПол);
		НайденоСтрок = ОтобранныеСтрокиСпортсменов.Количество();
		
		Если НайденоСтрок = 0 Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ВерхняяГраницаГенератора = Итератор+НайденоСтрок-1;
		
		Для каждого НайденнаяСтрока Из ОтобранныеСтрокиСпортсменов Цикл
			
			НовыйНомер  = ГСЧ.СлучайноеЧисло(Итератор,ВерхняяГраницаГенератора);
			
			УжеБылНомер = МассивНомеровЖеребьевки.Найти(НовыйНомер);
			
			Пока УжеБылНомер <> Неопределено Цикл
				
				НовыйНомер  = ГСЧ.СлучайноеЧисло(Итератор,ВерхняяГраницаГенератора);
				УжеБылНомер = МассивНомеровЖеребьевки.Найти(НовыйНомер);
				
			КонецЦикла;
						
			МассивНомеровЖеребьевки.Добавить(НовыйНомер);
			
			ОтборСпортсмена = Новый Структура("Спортсмен",НайденнаяСтрока.Спортсмен);
			ВсеСтрокиСпортсмена = ТЗУчастников.НайтиСтроки(ОтборСпортсмена);
			
			Для каждого СтрокаСпорсмен Из ВсеСтрокиСпортсмена Цикл
			
				   СтрокаСпорсмен.СтартовыйНомер = НовыйНомер;
			
			   КонецЦикла; 
			   
		КонецЦикла; 
		
		Итератор = ВерхняяГраницаГенератора + ?(ДваСвободныхНомераПослеКаждойГруппы,2,0) +1; //2 запасных номера
	
	КонецЦикла; 
	
	//{Рарус astyul, IN-7964, 10.08.2020
	//Объект.СоставУчастников.Загрузить(ТЗУчастников);
	СоставУчастниковНаФорме.Загрузить(ТЗУчастников);
	//}Рарус astyul, IN-7964, 10.08.2020
		
	Сообщить("Стартовые номера участников установлены");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТаблицыЗначенийЖеребьевки
	 
&НаСервере
Процедура ОбновитьТаблицуЖеребьевкиПоДеревуЗначений()
	
	ТЗЖеребьевки = Объект.Жеребьевка.Выгрузить();
	ТЗЖеребьевки.Очистить();
	
	ДЖеребьевки = РеквизитФормыВЗначение("ЖеребьевкаДеревоЗначений");
	
	УчетСпортсменовОбщегоНазначенияКлиентСервер.ПреобразоватьВТЗРекурсия(ДЖеребьевки,ТЗЖеребьевки);
		
	Объект.Жеребьевка.Загрузить(ТЗЖеребьевки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
// }Рарус kotana #7847 2020.07.24

#Область ОбработкаНормативовНаФорме

&НаСервере
Процедура ДобавитьНормативВГотовуюТаблицуНаФорму(ВыбранноеЗначение)
	
	ПроведениеСоревнованийФормыСервер.ДобавитьНормативВГотовуюТаблицуНаФорму(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры	

&НаСервере
Процедура КомандаУдалитьНормативНаСервере()
	
	ПроведениеСоревнованийФормыСервер.УдалитьКолонкуНормативаСФормы(ЭтотОбъект);
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьВсеКолонкиНормативовНаФормеНаСервере()
	
	ПроведениеСоревнованийФормыСервер.УдалитьВсеКолонкиНормативовНаФорме(ЭтотОбъект);
	
КонецПроцедуры	

&НаСервере
Процедура ПеренестиСтруктуруНормативовВТаблицуДокументаНаСервере(Отказ)
	
	ПроведениеСоревнованийФормыСервер.ПеренестиСтруктуруНормативовВТаблицуДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти