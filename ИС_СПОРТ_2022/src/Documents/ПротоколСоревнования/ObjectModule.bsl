// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
         Возврат;
    КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);	
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	УчетСпортсменовСервер.ЗаполнитьРеквизит(ЭтотОбъект, "Ответственный", ПараметрыСеанса.ТекущийПользователь);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	ПроверитьПараметрыСоревнованияНаДубли(Отказ);
	
	// {Рарус adilas #Возрастные группы в соревновании -11068 2020.12.09
	// Уведомления о страховании и возрастных группах					
	ВыполнитьПроверкуПередПроведением(Отказ);		
	
	// }Рарус adilas #Возрастные группы в соревновании -11068 2020.12.09
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;	
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	ПроведениеСервер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "РезультатыПараметровСпортсменов");
    ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "ИтоговыеРезультатыСоревнования");
	ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "ПодсчетРейтингов");
	ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "ЗачетныеКнижкиСпортсменов");
	Движения.Записать();

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	Движения.Записать();

	ПроведениеСервер.ВыполнитьКонтрольРезультатовОтменыПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Соревнование") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Номер,Дата");
		ДокументОснование = ДанныеЗаполнения;
		
		КоличествоПараметров = ДанныеЗаполнения.КоличествоПараметров;
		
		Для Каждого строкаУчастники Из ДанныеЗаполнения.СоставУчастников Цикл
			строкаСоставУчастников = СоставУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСоставУчастников, строкаУчастники);
			Для Индекс = 1 По КоличествоПараметров Цикл
				строкаПараметр = ПараметрыСоревнования.Добавить();
				строкаПараметр.Параметр = Индекс;
				строкаПараметр.GUIDУчастника = строкаСоставУчастников.GUIDУчастника;
				// {Рарус dotere #19441 -Заполняется дисциплина 2021.10.20
				строкаПараметр.Дисциплина = строкаСоставУчастников.Дисциплина;
				// }Рарус dotere #19441 -Заполняется дисциплина 2021.10.20
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПараметрыСоревнованияНаДубли(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыСоревнования.GUIDУчастника КАК GUIDУчастника,
	               |	ПараметрыСоревнования.Параметр КАК Параметр,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПараметрыСоревнования.Параметр) КАК КоличествоПараметров
	               |ПОМЕСТИТЬ ВТ_КоличествоРазличныхПараметров
	               |ИЗ
	               |	Документ.ПротоколСоревнования.ПараметрыСоревнования КАК ПараметрыСоревнования
	               |ГДЕ
	               |	ПараметрыСоревнования.Ссылка = &ДокументСсылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПараметрыСоревнования.GUIDУчастника,
	               |	ПараметрыСоревнования.Параметр
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоставУчастников.НомерСтроки КАК НомерСтроки,
	               |	СоставУчастников.Спортсмен КАК Спортсмен
	               |ИЗ
	               |	Документ.ПротоколСоревнования.СоставУчастников КАК СоставУчастников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхПараметров КАК ВТ_КоличествоРазличныхПараметров
	               |		ПО СоставУчастников.GUIDУчастника = ВТ_КоличествоРазличныхПараметров.GUIDУчастника
	               |ГДЕ
	               |	СоставУчастников.Ссылка = &ДокументСсылка
	               |	И ВТ_КоличествоРазличныхПараметров.КоличествоПараметров > 1
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоставУчастников.НомерСтроки,
	               |	СоставУчастников.Спортсмен" ;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Отказ = Истина;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У спортсмена %1 указано 2 одинаковых параметра.'"),
				СокрЛП(Выборка.Спортсмен)); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;	
	
КонецПроцедуры

// {Рарус adilas #Возрастные группы в соревновании -11068 2020.12.09
// Уведомления о страховании и возрастных группах
Процедура ВыполнитьПроверкуПередПроведением(Отказ) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСпортсменов"     		, СоставУчастников.Выгрузить());
	// {Рарус adilas #11621 -Интервал периода соревнований в протоколе 2020.12.14
	Запрос.УстановитьПараметр("ДатаНачалаСоревнования"    	, ДатаНачалаСоревнования);
	Запрос.УстановитьПараметр("ДатаОкончанияСоревнования"	, ДатаОкончанияСоревнования);
	// }Рарус adilas #11621 -Интервал периода соревнований в протоколе 2020.12.14
	Запрос.УстановитьПараметр("ВидСпорта"              		, ВидСпорта);
	Запрос.УстановитьПараметр("СписокВозврастныхГрупп" 		, Соревнование.МеждународныеВозрастныеГруппы.Выгрузить().ВыгрузитьКолонку("МеждународнаяВозрастнаяГруппа"));
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТаблицаСпортсменов.Спортсмен КАК Спортсмен,
	                |	ТаблицаСпортсменов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	                |ПОМЕСТИТЬ ВТ_ТаблицаСпортсменов
	                |ИЗ
	                |	&ТаблицаСпортсменов КАК ТаблицаСпортсменов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	РегистрацияСтраховыхПолисовСпортсменов.Спортсмен КАК Спортсмен
	                |ПОМЕСТИТЬ ВТ_СпортменыСПолисом
	                |ИЗ
	                |	РегистрСведений.РегистрацияСтраховыхПолисовСпортсменов КАК РегистрацияСтраховыхПолисовСпортсменов
	                |ГДЕ
	                |	РегистрацияСтраховыхПолисовСпортсменов.ДатаНачала <= &ДатаНачалаСоревнования
	                |	И РегистрацияСтраховыхПолисовСпортсменов.ДатаОкончания >= &ДатаОкончанияСоревнования
	                |	И РегистрацияСтраховыхПолисовСпортсменов.Спортсмен В
	                |			(ВЫБРАТЬ
	                |				ВТ_ТаблицаСпортсменов.Спортсмен
	                |			ИЗ
	                |				ВТ_ТаблицаСпортсменов)
	                |	И РегистрацияСтраховыхПолисовСпортсменов.ВидСпорта = &ВидСпорта
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен КАК Спортсмен
	                |ПОМЕСТИТЬ ВТ_СоставУчащихся
	                |ИЗ
	                |	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(, ВидСпорта = &ВидСпорта) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
	                |ГДЕ
	                |	(СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1)
	                |			ИЛИ СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения >= &ДатаОкончанияСоревнования
	                |			ИЛИ СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен.СтатусСпортсмена <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпортсменов.СпортсменДругогоСпортивногоУчреждения))
	                |	И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения <= &ДатаНачалаСоревнования
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Спортсмен
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ТаблицаСпортсменов.Спортсмен КАК Спортсмен,
	                |	ВТ_ТаблицаСпортсменов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	                |ИЗ
	                |	ВТ_ТаблицаСпортсменов КАК ВТ_ТаблицаСпортсменов
	                |ГДЕ
	                |	НЕ ВТ_ТаблицаСпортсменов.МеждународнаяВозрастнаяГруппа В (&СписокВозврастныхГрупп)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ТаблицаСпортсменов.Спортсмен КАК Спортсмен
	                |ИЗ
	                |	ВТ_ТаблицаСпортсменов КАК ВТ_ТаблицаСпортсменов
	                |ГДЕ
	                |	НЕ ВТ_ТаблицаСпортсменов.Спортсмен В
	                |				(ВЫБРАТЬ
	                |					ВТ_СпортменыСПолисом.Спортсмен
	                |				ИЗ
	                |					ВТ_СпортменыСПолисом)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ТаблицаСпортсменов.Спортсмен КАК Спортсмен
	                |ИЗ
	                |	ВТ_ТаблицаСпортсменов КАК ВТ_ТаблицаСпортсменов
	                |ГДЕ
	                |	НЕ ВТ_ТаблицаСпортсменов.Спортсмен В
	                |				(ВЫБРАТЬ
	                |					ВТ_СоставУчащихся.Спортсмен КАК Спортсмен
	                |				ИЗ
	                |					ВТ_СоставУчащихся КАК ВТ_СоставУчащихся)";					
			
	Результат = Запрос.ВыполнитьПакет();
		
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Организация).ВозрастныеГруппыОрганизация Тогда
		Если НЕ Соревнование.МеждународныеВозрастныеГруппы.Выгрузить().ВыгрузитьКолонку("МеждународнаяВозрастнаяГруппа").Количество() = 0 Тогда
			тзСпортсменыБезГруппы = Результат[3].Выгрузить();
			Если НЕ тзСпортсменыБезГруппы.Количество() = 0 Тогда
				
				Для Каждого строкаСпортсмен Из тзСпортсменыБезГруппы Цикл
					Если строкаСпортсмен.Спортсмен.СтатусСпортсмена <> Перечисления.статусыСпортсменов.СпортсменДругогоСпортивногоУчреждения Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В соревнование не заявлена возрастная группа %1, спортсмен %2.'"),
					строкаСпортсмен.МеждународнаяВозрастнаяГруппа,
					строкаСпортсмен.Спортсмен);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Организация).СтрахованиеСпортсменовОрганизация Тогда
		тзСпортсменыБезПолиса = Результат[4].Выгрузить();
		Если НЕ тзСпортсменыБезПолиса.Количество() = 0 Тогда
			Для Каждого строкаСпортсмен Из тзСпортсменыБезПолиса Цикл
				Если строкаСпортсмен.Спортсмен.СтатусСпортсмена <> Перечисления.статусыСпортсменов.СпортсменДругогоСпортивногоУчреждения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У спортсмена %1 отсутствует или просрочен страховой полис.'"),
				строкаСпортсмен.Спортсмен);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	// {Рарус adilas #11666 -Тестирование. Пункт №2 2020.12.11
	// Добавить проверку на отчисление
	тзОтчисленныеСпортсмены = Результат[5].Выгрузить();
	Если НЕ тзОтчисленныеСпортсмены.Количество() = 0 Тогда
		Для Каждого строкаСпортсмен Из тзОтчисленныеСпортсмены Цикл
			Если строкаСпортсмен.Спортсмен.СтатусСпортсмена <> Перечисления.статусыСпортсменов.СпортсменДругогоСпортивногоУчреждения Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Спортсмен %1 не обучается в спортивном учреждении (не зачислен или отчислен из учреждения).'"), строкаСпортсмен.Спортсмен);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	// }Рарус adilas #11666 -Тестирование. Пункт №2 2020.12.11
	
КонецПроцедуры
// }Рарус adilas #Возрастные группы в соревновании -11068 2020.12.09

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли