#Область ОбработчикиСобытийНаФорме

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// {Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	// {Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	Если РольДоступна("ПолныеПрава") Тогда
		 Элементы.Ответственный.Доступность = Истина;
	Иначе 	 
		 Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
	// }Рарус dotere #21842 -В методите поле ответственный недоступно 2020.11.06
	// }Рарус adilas #23059 -РС Руководитель. Карточка спортсмена.Карточка тренера. 2021.12.13
	
	// {Рарус dotere #16299 -Получение параметров 2021.05.14
	Если Параметры.Свойство("Cоревнование") Тогда
		Объект.Соревнование = Параметры.Cоревнование;
		Объект.Организация = Параметры.Организация;
		Объект.ВидСпорта = Параметры.ВидСпорта;
		Объект.МестоПроведения = Параметры.МестоПроведения;
		Объект.ДатаНачалаСоревнования = Параметры.ДатаНачалаСоревнования;
		Объект.ДатаОкончанияСоревнования = Параметры.ДатаОкончанияСоревнования;
		Объект.ОрганизаторСоревнования = Параметры.ОрганизаторСоревнования;
		Объект.УчебныйГод = Параметры.УчебныйГод;
	КонецЕсли;
	// }Рарус dotere #16299 -Получение параметров 2021.05.14
	
	// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ЗаполнитьПредставлениеМестоПолФизическогоЛица();
		УстановитьВидимостьДоступностьНаСервере();
		УстановитьСписокВыбораДляДокументОснование();
		
		// {Рарус adilas #11621 -Интервал периода соревнований в протоколе 2020.12.14
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		// }Рарус adilas #11621 -Интервал периода соревнований в протоколе 2020.12.14
		ЗаполнитьОсновныеДанные();
		
	ИначеЕсли Не Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ЗаполнитьПредставлениеМестоПолФизическогоЛица();
		УстановитьВидимостьДоступностьНаСервере();
		УстановитьСписокВыбораДляДокументОснование();
		
		УчетСпортсменовСервер.ЗаполнитьДокументУчебныйГод(ЭтотОбъект, Объект.УчебныйГод, Объект.Организация);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.Ссылка.Пустая() Тогда
		
		УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
		УправлениеУчебнымГодомСсылка = УчетСпортсменовСервер.ПолучитьДокументТекущегоУчебногоГода();
		Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;

		УстановитьВидимостьДоступностьНаСервере();
		ЗаполнитьОсновныеДанные();
		
	Иначе
		
		ЗаполнитьПредставлениеМестоПолФизическогоЛица();
		УстановитьВидимостьДоступностьНаСервере();
		УчетСпортсменовСервер.ЗаполнитьДокументУчебныйГод(ЭтотОбъект, Объект.УчебныйГод, Объект.Организация);
		
	КонецЕсли;
	// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
	
	// {Рарус adilas #13013 -Протокол соревнование (период и место проведения) 2021.02.02
	ПериодСоревнования.ДатаНачала = Объект.ДатаНачалаСоревнования;
	ПериодСоревнования.ДатаОкончания = Объект.ДатаОкончанияСоревнования;
	// }Рарус adilas #13013 -Протокол соревнование (период и место проведения) 2021.02.02
	
	// {Рарус lobash IN-10942
	//ПолучитьДостиженияСпортсменов();
	// }Рарус lobash IN-10942
	
	// {Рарус adilas #13392 -Номер документа 2021.02.12
	Если Пользователи.РолиДоступны("АдминистраторСистемы, ПолныеПрава") Тогда
		Элементы.Номер.Доступность = Истина;
		Элементы.Номер.ТолькоПросмотр = Ложь;
	КонецЕсли;
	// }Рарус adilas #13392 -Номер документа 2021.02.12
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьЗаголовок();
	ПересчитатьРезультатЧислоВСтроку();
	ОтсортироватьПоМестам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НЕ ВыбранноеЗначение = Неопределено И ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Рейтинги.Форма.ФормаВыбора") Тогда
		Объект.Рейтинг = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    
	ЗаполнитьПредставлениеМестоПолФизическогоЛица();
	ПересчитатьРезультатЧислоВСтроку();
	ОтсортироватьПоМестам();
	//ЗаполнитьПВХИзРегистра();		
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    
	ПроверитьЗаполнениеРезультатСтрокаПередЗаписью(Отказ);
	
	Если Пересчитывать Тогда
		
		Для Каждого Строка Из Объект.ПараметрыСоревнования Цикл
			Если ЗначениеЗаполнено(Строка.Параметр) Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(Строка.Параметр) Тогда
				Отказ = Истина;                             
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните порядок параметров!'"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат; 
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ПроводитьБезПроверок = НЕ Модифицированность;
			
			Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ПроводитьБезПроверок Тогда
				
				ПроверитьСоответствиеСпортсменовИВозрастныхГрупп(Отказ);
				
				Если Отказ Тогда
					Оповещение = Новый ОписаниеОповещения("ПередЗаписьюЗавершение",
					ЭтотОбъект);	
					
					ПоказатьВопрос(Оповещение,
					НСтр("ru = 'Продолжить проведение?'"),
					РежимДиалогаВопрос.ДаНет,
					0);
					Возврат;
				КонецЕсли;
				
				ПересчитатьРезультатСтрокаВМилеСекНаСервере();
				
			Иначе
				
				ПересчитатьРезультатСтрокаВМилеСекНаСервере();
				
			КонецЕсли;
			
		Иначе
			
			ПересчитатьРезультатСтрокаВМилеСекНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// }Рарус adilas #10584 -// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02 2020.11.02	
	
	// {Рарус lobash IN-10942
	//МассивДляПроведения = Новый Массив;
	//Для каждого ХарактеристикаДляРазбора из ТаблицаПВХНаФорме цикл
	//	ГуидХарактеристики = ХарактеристикаДляРазбора.УникальныйИдентификаторХарактеристики;
	//	Характеристика = ХарактеристикаДляРазбора.Характеристика;
	//	Для Каждого СтрокаСоставУчастников Из Объект.СоставУчастников Цикл
	//		СтрокаМассива = Новый Структура;
	//		
	//		СтрокаМассива.Вставить("Организация", Объект.Организация);
	//		СтрокаМассива.Вставить("ВидСпорта", Объект.ВидСпорта);
	//		СтрокаМассива.Вставить("Соревнование", Объект.Соревнование);
	//		СтрокаМассива.Вставить("Спортсмен", СтрокаСоставУчастников.Спортсмен);
	//		СтрокаМассива.Вставить("Характеристика", Характеристика);
	//		СтрокаМассива.Вставить("Значение", СтрокаСоставУчастников["ЗначениеХарактеристики_" + ГуидХарактеристики]);
	//		
	//		МассивДляПроведения.Добавить(СтрокаМассива);
	//	КонецЦикла;
	//КонецЦикла;
	//СоздатьДвиженияДостиженияСпортсменовПоПротоколу(МассивДляПроведения);
	//ЗаполнитьПВХИзРегистра();		
	// }Рарус lobash IN-10942		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ЗагрузитьПротокол(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран документ 'Соревнование'",,"Соревнование","Объект.ДокументОснование");
		Возврат;
	КонецЕсли;
	
	Если Объект.СоставУчастников.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьПротоколПродолжить",
		ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПротоколЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРезультаты(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеРезультатСтрокаПередЗаписью(Отказ);
	
	Если Отказ Тогда
		Возврат
	Иначе
		Для Каждого строкаПараметр Из Объект.ПараметрыСоревнования Цикл
			//строкаПараметр.РезультатЧисло = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(строкаПараметр.РезультатСтрока);
			Если Пересчитывать Тогда
				строкаПараметр.РезультатЧисло = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(строкаПараметр.РезультатСтрока);
			КонецЕсли;
		КонецЦикла;
		ПересчитатьРезультатыПопыток(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьМестаИОтставания(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеРезультатСтрокаПередЗаписью(Отказ);
	
	Если Отказ Тогда
		Возврат
	Иначе
		Для Каждого строкаСоставУчастников Из Объект.СоставУчастников Цикл
			строкаСоставУчастников.РезультатЧисло = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(строкаСоставУчастников.РезультатСтрока);
			строкаСоставУчастников.ОтставаниеМилСек = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(строкаСоставУчастников.ОтставаниеСтрока);
		КонецЦикла;
		ПересчитатьМеста();
	КонецЕсли;
	
	ОтсортироватьПоМестам();
	
КонецПроцедуры

&НаКлиенте
Процедура УчаствуетВРейтингах(Команда)
	
	ОткрытьФорму("РегистрСведений.ВключениеСоревнованийВРейтинги.ФормаСписка", Новый Структура("Соревнование",Объект.Соревнование));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
Процедура СоревнованиеПриИзменении(Элемент)
	УстановитьЗаголовок();
КонецПроцедуры

// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.СоставУчастников.Количество() = 0 ИЛИ ЗначениеЗаполнено(Объект.УчебныйГод) Тогда
	 
	    СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ДокументОснованиеПриИзмененииЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Данные в документе будут перезаполнены.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ДокументОснованиеПриИзмененииНаСервере();
	
	ЗаполнитьПредставлениеМестоПолФизическогоЛица();
	УстановитьВидимостьДоступностьНаСервере();
	УстановитьСписокВыбораДляДокументОснование();
	
	ЗаполнитьОсновныеДанные();

	УстановитьЗаголовок();
	ПересчитатьРезультатЧислоВСтроку();
	ОтсортироватьПоМестам();
	
	// {Рарус lobash IN-10942
	//ПолучитьДостиженияСпортсменов();
	// }Рарус lobash IN-10942

КонецПроцедуры

// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02

&НаКлиенте
Процедура РейтингНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("СтатусРейтинга", ПредопределенноеЗначение("Перечисление.Статусы.Открыт"));
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Рейтинги.ФормаВыбора", Новый Структура("СписокОтборов",СтруктураОтборов),ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодОткрытие(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодОткрытие(УправлениеУчебнымГодомСсылка,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипРезультатаПриИзменении(Элемент)
	
	     Если Объект.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Число") Тогда	
			Пересчитывать = "Нет";
			Элементы.СоставУчастниковРезультатЧисло.Видимость       		= Истина;
			Элементы.СоставУчастниковРезультатБулево.Видимость      		= Ложь;
			Элементы.СоставУчастниковРезультатСтрока.Видимость      		= Ложь;
			Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость 	= Ложь;
			Элементы.СоставУчастниковОтставаниеСтрока.Видимость    			= Ложь;
		ИначеЕсли Объект.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Булево") Тогда	
			Пересчитывать = "Нет";
			Элементы.СоставУчастниковРезультатБулево.Видимость      		= Истина;
			Элементы.СоставУчастниковРезультатЧисло.Видимость      		 	= Ложь;
			Элементы.СоставУчастниковРезультатСтрока.Видимость      		= Ложь;
			Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость 	= Ложь;
			Элементы.СоставУчастниковОтставаниеСтрока.Видимость     		= Ложь;
		ИначеЕсли Объект.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Время") Тогда	
			Пересчитывать = "Да";
			Элементы.СоставУчастниковРезультатСтрока.Видимость      		= Истина;
			Элементы.СоставУчастниковРезультатЧисло.Видимость			    = Ложь;
			Элементы.СоставУчастниковРезультатБулево.Видимость      		= Ложь;
			Элементы.СоставУчастниковОтставаниеСтрока.Видимость     		= Истина;
			Элементы.ФормаЗагрузитьПротокол.Видимость 						= Истина;
			Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость	= Ложь;
		КонецЕсли;
	
		Для Каждого Строка Из Объект.СоставУчастников Цикл	
			Строка.РезультатСтрока  = "00:00:00:000";
			Строка.РезультатБулево  = Ложь;
			Строка.РезультатЧисло 	= 0;				
		КонецЦикла;
			
КонецПроцедуры

// {Рарус dotere #16311 -Открытие учебного года 2021.06.29
&НаКлиенте
Процедура УчебныйГодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.СоставУчастников.Количество()= 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("УчебныйГодПриИзмененииЗавершение",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"Табличная часть 'Спортсмены' будет очищена.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
		
		Возврат;
		
	Иначе
		
		УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСоздание(Элемент, СтандартнаяОбработка)
	УчетСпортсменовКлиент.УчебныйГодСоздание(ЭтаФорма, СтандартнаяОбработка);
КонецПроцедуры
// }Рарус dotere #16311 -Открытие учебного года 2021.06.29


#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей

&НаКлиенте
Процедура СоставУчастниковПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	Если ТекДанные.GUIDУчастника <> ТекущийКлюч ИЛИ ТекДанные.Дисциплина <> ТекущаяДисциплина Тогда
		ТекущийКлюч = ТекДанные.GUIDУчастника;
		ТекущаяДисциплина = ТекДанные.Дисциплина;
		УстановитьОтборНаТаблицуПараметров();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковПередУдалением(Элемент, Отказ)
	// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
	Для Каждого СтрокаСоставУчастников Из Элемент.ВыделенныеСтроки Цикл
		ТекДанные = Объект.СоставУчастников.НайтиПоИдентификатору(СтрокаСоставУчастников);
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		УдалитьСтрокиПараметровНаСервере(ТекДанные.GUIDУчастника);	
	КонецЦикла;
	// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковСпортсменПриИзменении(Элемент)
	
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	УстановитьНовыйCUIDПоспортсмену(ТекДанные.Спортсмен, ТекДанные.НомерСтроки);
	УстановитьОтборНаТаблицуПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСоревнованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		// {Рарус dotere #19441 -Структура для поиска 2021.10.20
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("GUIDУчастника",ТекущийКлюч);
		СтруктураПоиска.Вставить("Дисциплина",ТекущаяДисциплина);
		// }Рарус dotere #19441 -Структура для поиска 2021.10.20
		Если ТекущийКлюч = "" Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите спортсмена!", , "Объект.СоставУчастников");
			Отказ = Истина;

		ИначеЕсли Объект.ПараметрыСоревнования.НайтиСтроки(СтруктураПоиска).Количество() = КоличествоПараметров Тогда
			Отказ = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В соревновании заявлено %1 параметра.
					|Добавление еще одного невозможно!'"),
					КоличествоПараметров); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			
			Отказ = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСоревнованияПриИзменении(Элемент)
	
	текДанные = Элемент.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(текДанные.GUIDУчастника) Тогда
		текДанные.GUIDУчастника = ТекущийКлюч;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(текДанные.Дисциплина) Тогда
		текДанные.Дисциплина = ТекущаяДисциплина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковРезультатСтрокаПриИзменении(Элемент)
	
	текДанные = Элементы.СоставУчастников.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	УчетСпортсменовОбщегоНазначенияКлиентСервер.ПроверитьРезультатСтроковыйПриИзменении(текДанные.РезультатСтрока, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСоревнованияРезультатСтрокаПриИзменении(Элемент)
	
	текДанные = Элементы.ПараметрыСоревнования.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	УчетСпортсменовОбщегоНазначенияКлиентСервер.ПроверитьРезультатСтроковыйПриИзменении(текДанные.РезультатСтрока, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковОтставаниеСтрокаПриИзменении(Элемент)
	
	текДанные = Элементы.СоставУчастников.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	УчетСпортсменовОбщегоНазначенияКлиентСервер.ПроверитьРезультатСтроковыйПриИзменении(текДанные.РезультатСтрока, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

// {Рарус lobash IN-10942
&НаСервере
Процедура СоздатьДвиженияДостиженияСпортсменовПоПротоколу(МассивДляПроведения)
	
	// Переделать ПВХ
	//ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//Попытка
	//	// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.12.10
	//	//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//	// Вызывает двойную запись/проведение документа подряд
	//	// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.12.10
	//Исключение
	//КонецПопытки;
	//
	//ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	//Модифицированность = Ложь;

	//НаборЗаписей = РегистрыСведений.ДостиженияСпортсменовПоПротоколу.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);

	//Для Каждого Стр из МассивДляПроведения Цикл
	//	НоваяЗапись = НаборЗаписей.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяЗапись, Стр);
	//	НоваяЗапись.Регистратор = Объект.Ссылка;		
	//	НоваяЗапись.Период = Объект.Дата;		
	//	НаборЗаписей.Записать(); 
	//КонецЦикла;
	
КонецПроцедуры	
	
&НаСервере
Процедура ПолучитьДостиженияСпортсменов()
	УдалитьКолонкиПВХКОсновнойТаблице();
	ДобавитьКолонкиПВХКОсновнойТаблице();
	ЗаполнитьПВХИзРегистра();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПВХИзРегистра()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДостиженияСпортсменовПоПротоколуСрезПоследних.Спортсмен КАК Спортсмен,
		|	ДостиженияСпортсменовПоПротоколуСрезПоследних.Характеристика КАК Характеристика,
		|	ДостиженияСпортсменовПоПротоколуСрезПоследних.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДостиженияСпортсменовПоПротоколу.СрезПоследних КАК ДостиженияСпортсменовПоПротоколуСрезПоследних
		|ГДЕ
		|	ДостиженияСпортсменовПоПротоколуСрезПоследних.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Документы.ПротоколСоревнования.ПустаяСсылка()));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр из РезультатЗапроса Цикл
		СтрокиХарактеристика =  ТаблицаПВХНаФорме.НайтиСтроки(Новый Структура("Характеристика", Стр.Характеристика)); 
		Для Каждого СтрХарактеристика из СтрокиХарактеристика Цикл
			НайденныеСтроки = Объект.СоставУчастников.НайтиСтроки(Новый Структура("Спортсмен", Стр.Спортсмен));
			Для Каждого СтрУчастник из НайденныеСтроки Цикл
				СтрУчастник["ЗначениеХарактеристики_" + СтрХарактеристика.УникальныйИдентификаторХарактеристики] = Стр.Значение;
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиПВХКОсновнойТаблице()
	РеквезитыТаблЧасти = ЭтаФорма.ПолучитьРеквизиты("Объект.СоставУчастников");
	РеквезитыТаблицыПВХ = ЭтаФорма.ПолучитьРеквизиты("ТаблицаПВХНаФорме");
	НаУдалениеРеквезиты = Новый Массив;
	НаУдалениеЭлемент = Новый Массив;
	Для каждого РеквизитТабЧасти из РеквезитыТаблЧасти Цикл
		    Если СтрЧислоВхождений(РеквизитТабЧасти.Имя,"Характеристика_")>0 ИЛИ СтрЧислоВхождений(РеквизитТабЧасти.Имя,"ЗначениеХарактеристики_")>0 ИЛИ СтрЧислоВхождений(РеквизитТабЧасти.Имя,"УникальныйИдентификаторСтрокиХарактеристики_") > 0 Тогда
				НаУдалениеРеквезиты.Добавить(РеквизитТабЧасти.Путь + "." + РеквизитТабЧасти.Имя);
				НаУдалениеЭлемент.Добавить(РеквизитТабЧасти.Имя);
			КонецЕсли
	КонецЦикла;
	Для каждого ЭлементФ Из НаУдалениеЭлемент Цикл
	    НайденныйЭлементФормы = ЭтаФорма.Элементы.Найти(Элементф);
	    Если НайденныйЭлементФормы <> Неопределено  Тогда
	        ЭтаФорма.Элементы.Удалить(НайденныйЭлементФормы);
	    КонецЕсли;
	КонецЦикла;
	МассивУдаляемыхРеквизитов = Новый Массив;
	Для каждого ЭлементСписка Из НаУдалениеРеквезиты Цикл
	    МассивУдаляемыхРеквизитов.Добавить(ЭлементСписка);
	КонецЦикла;
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	МассивУдаляемыхРеквизитов.Очистить();
	НаУдалениеРеквезиты.Очистить();
	НаУдалениеЭлемент.Очистить();
	КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиПВХКОсновнойТаблице()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХарактеристикиДостиженийСпортсменов.Ссылка КАК СправочникСсылка,
		|	ХарактеристикиДостиженийСпортсменов.Владелец КАК ВидСпорта,
		|	ХарактеристикиДостиженийСпортсменов.Характеристика КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиДостиженийСпортсменов КАК ХарактеристикиДостиженийСпортсменов
		|ГДЕ
		|	ХарактеристикиДостиженийСпортсменов.Владелец = &ВидСпорта";
	
	Запрос.УстановитьПараметр("ВидСпорта", Объект.ВидСпорта);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ТаблицаПВХНаФорме.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.СправочникСсылка.ПометкаУдаления = Ложь Тогда
		НовыеРеквизиты = Новый Массив;	
		ГуидХарактеристики =  СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор()),"-","_");
		
		
		СтрокаТаблицаПВХНаФорме = ТаблицаПВХНаФорме.Добавить();
		СтрокаТаблицаПВХНаФорме.Характеристика = ВыборкаДетальныеЗаписи.Характеристика;
		СтрокаТаблицаПВХНаФорме.УникальныйИдентификаторХарактеристики = ГуидХарактеристики;		
		
		ДобавитьРеквизитыФормыПоЗначениюПВХ(НовыеРеквизиты, ГуидХарактеристики, ВыборкаДетальныеЗаписи.Характеристика.ТипЗначения);
		ИзменитьРеквизиты(НовыеРеквизиты);
		
		ГруппаХарактеристика                          = Элементы.Добавить("ГруппаХарактеристика_" + ГуидХарактеристики, Тип("ГруппаФормы"), Элементы.ПВХ);	
	    ГруппаХарактеристика.Заголовок                = Строка(ВыборкаДетальныеЗаписи.Характеристика);
		ГруппаХарактеристика.ОтображатьВШапке         = Истина;
		ГруппаХарактеристика.РастягиватьПоГоризонтали = Истина;
		ГруппаХарактеристика.Вид                      = ВидГруппыФормы.ГруппаКолонок;
		ГруппаХарактеристика.Группировка              = ГруппировкаКолонок.Горизонтальная;
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		ГруппаХарактеристика.ШрифтЗаголовка           = ШрифтыСтиля.ОбычныйШрифт10;
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		
		//Добавление колонки Характеристика
		ДобавитьЭлемент("Характеристика_" + ГуидХарактеристики, Тип("ПолеФормы"), ГруппаХарактеристика, ВидПоляФормы.ПолеВвода, "Объект.СоставУчастников." + "Характеристика_" + ГуидХарактеристики, Ложь);
		
		//Добавление колонки ЗначениеХарактеристики
		ДобавитьЭлемент("ЗначениеХарактеристики_" + ГуидХарактеристики, Тип("ПолеФормы"), ГруппаХарактеристика, ВидПоляФормы.ПолеВвода, "Объект.СоставУчастников." + "ЗначениеХарактеристики_" + ГуидХарактеристики, Истина, Истина,Ложь,Новый Структура("ИмяСобытия,НаименованиеПроцедуры","ПриИзменении", "СоставУчастниковЗначениеХарактеристикиПриИзменении") );
		
		ДобавитьЭлемент("УникальныйИдентификаторСтрокиХарактеристики_" + ГуидХарактеристики, Тип("ПолеФормы"), ГруппаХарактеристика,
	    ВидПоляФормы.ПолеВвода,
		"Объект.СоставУчастников." + "УникальныйИдентификаторСтрокиХарактеристики_" + ГуидХарактеристики, 
		Ложь);

		Для каждого СтрокаСоставУчастников из Объект.СоставУчастников Цикл 
			 СтрокаСоставУчастников["УникальныйИдентификаторСтрокиХарактеристики_" + ГуидХарактеристики] = ГуидХарактеристики;
			 СтрокаСоставУчастников["Характеристика_" + ГуидХарактеристики] = ВыборкаДетальныеЗаписи.Характеристика;
		 КонецЦикла;
		 КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлемент(ИмяЭлемента, ТипЭлемента, Родитель, Вид, ПутьКДанным, Видимость, ВыделятьЦветом = Ложь, Заголовок = Истина, Действие = Неопределено, ДоступноРедактирование = Истина, ПредставлениеНуля = Ложь)
	
	НовыйЭлементНорматив                    = Элементы.Добавить(ИмяЭлемента, ТипЭлемента, Родитель); 
    НовыйЭлементНорматив.Вид                = Вид; 
    НовыйЭлементНорматив.ПутьКДанным        = ПутьКДанным;
    НовыйЭлементНорматив.Видимость          = Видимость;
	НовыйЭлементНорматив.Ширина             = 23;
	НовыйЭлементНорматив.ОтображатьВШапке 	= Ложь;
	
	Если ВыделятьЦветом Тогда
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		НовыйЭлементНорматив.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
		НовыйЭлементНорматив.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	КонецЕсли;
	Если НЕ Заголовок Тогда
		НовыйЭлементНорматив.Заголовок = " ";
		НовыйЭлементНорматив.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлементНорматив.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;
	Если НЕ Действие = Неопределено Тогда
		НовыйЭлементНорматив.УстановитьДействие(Действие.ИмяСобытия, Действие.НаименованиеПроцедуры);
	КонецЕсли;
	Если НЕ ДоступноРедактирование Тогда
		НовыйЭлементНорматив.РедактированиеТекста = Ложь;
		НовыйЭлементНорматив.КнопкаОчистки = Истина;
		НовыйЭлементНорматив.УстановитьДействие("Очистка", "СоставУчастниковРезультатОчистка");
	КонецЕсли;
	Если ПредставлениеНуля Тогда
		НовыйЭлементНорматив.Формат = "ЧН=0";
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыФормыПоЗначениюПВХ(НовыеРеквизиты, гуид, ТипЗначенияХарактеристики)
	
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Характеристика_" + гуид               , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ХарактеристикиДостиженийСпортсменов")     , "Объект.СоставУчастников"        , "Характеристика"  , Истина));
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначениеХарактеристики_" + гуид       , Новый ОписаниеТипов(ТипЗначенияХарактеристики)                 										, "Объект.СоставУчастников"        , "Значение"        , Истина));
	
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("УникальныйИдентификаторСтрокиХарактеристики_" + гуид  , Новый ОписаниеТипов("Строка")  , "Объект.СоставУчастников"        , "УникальныйИдентификаторСтрокиХарактеристики" , Истина));
	
КонецПроцедуры	

&НаКлиенте
Процедура СоставУчастниковЗначениеХарактеристикиПриИзменении(Элемент)
	ТекДанные = Элементы.СоставУчастников.ТекущиеДанные;
	Гуид =  Сред(Элемент.Имя,Найти(Элемент.Имя, "_")+1);
	Характеристика = ТекДанные["Характеристика_" + Гуид];
	ЗначениеХарактеристики = ТекДанные["ЗначениеХарактеристики_" + Гуид];

КонецПроцедуры	
// }Рарус lobash IN-10942

&НаКлиенте
Процедура ОтсортироватьПоМестам()
	
	Для Каждого строкаСоставУчастников Из Объект.СоставУчастников Цикл
		Если строкаСоставУчастников.Место = 0 Тогда
			строкаСоставУчастников.МестоДляСортировки = 9999999;
		Иначе
			строкаСоставУчастников.МестоДляСортировки = строкаСоставУчастников.Место;
		КонецЕсли;	
	КонецЦикла;
	Объект.СоставУчастников.Сортировать("МестоДляСортировки возр");
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьОсновныеДанные()
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		УчетСпортсменовСервер.ЗаполнитьНастройкиПоУмолчанию(Объект);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьМеста()
	
	ПересчитатьМестаНаСервере();		
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьРезультатСтрокаВМилеСекНаСервере()
	

	Если Пересчитывать Тогда
		Для Каждого строкаПараметр Из Объект.ПараметрыСоревнования Цикл
			строкаПараметр.РезультатЧисло = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(строкаПараметр.РезультатСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ПересчитатьРезультатыПопыток(НЕ Объект.ЗагруженИзВнешнейСистемы);
	
	Если Пересчитывать Тогда
		
		Для Каждого строкаСоставУчастников Из Объект.СоставУчастников Цикл
			
			строкаСоставУчастников.РезультатЧисло  = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(строкаСоставУчастников.РезультатСтрока);
			строкаСоставУчастников.ОтставаниеМилСек = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(строкаСоставУчастников.ОтставаниеСтрока);
			
		КонецЦикла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьЗаполнениеРезультатСтрокаПередЗаписью(Отказ)
	
	
	Если Пересчитывать Тогда
		
		Для Каждого строкаСоставУчастников Из Объект.СоставУчастников Цикл
			
			УчетСпортсменовОбщегоНазначенияКлиентСервер.ПроверитьРезультатСтроковыйПриИзменении(строкаСоставУчастников.РезультатСтрока, Отказ);
			УчетСпортсменовОбщегоНазначенияКлиентСервер.ПроверитьРезультатСтроковыйПриИзменении(строкаСоставУчастников.ОтставаниеСтрока, Отказ);
			
		КонецЦикла;
		
		Для Каждого строкаПараметр Из Объект.ПараметрыСоревнования Цикл
			
			УчетСпортсменовОбщегоНазначенияКлиентСервер.ПроверитьРезультатСтроковыйПриИзменении(строкаПараметр.РезультатСтрока, Отказ);
			
		КонецЦикла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;	
		
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПроводитьБезПроверок = Истина;
		Модифицированность   = Ложь;
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПредставлениеМестоПолФизическогоЛица()
	
	Для Каждого СтрокаУчастник Из Объект.СоставУчастников Цикл
		СтрокаУчастник.ПолПредставление = ?(СтрокаУчастник.Спортсмен.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской, "Юноши", 
		?(СтрокаУчастник.Спортсмен.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский, "Девушки", ""));
	КонецЦикла;
		
КонецПроцедуры		

&НаКлиенте
Процедура УстановитьЗаголовок()
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЭтаФорма.Заголовок = "Протокол результатов соревнования " + Объект.ДокументОснование;
	ИначеЕсли ЗначениеЗаполнено(Объект.Соревнование) Тогда
		ЭтаФорма.Заголовок = "Протокол результатов соревнования " + Объект.Соревнование;
	КонецЕсли;
КонецПроцедуры	

// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02

&НаКлиенте
Процедура ДокументОснованиеПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДокументОснованиеПриИзмененииНаСервере();
		УстановитьЗаголовок();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	Объект.СоставУчастников.Очистить();
	Объект.УчебныйГод       = Справочники.УчебныйГод.ПустаяСсылка();
	ЗаполнитьЗначенияСвойств(Объект, Объект.ДокументОснование,,"Дата,Номер,СоставУчастников");
	
	ДокументОснование = Объект.ДокументОснование;
		
	КоличествоПараметров = ДокументОснование.КоличествоПараметров;
		
	Для Каждого строкаУчастники Из ДокументОснование.СоставУчастников Цикл
		строкаСоставУчастников = Объект.СоставУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(строкаСоставУчастников,строкаУчастники);
		Для Индекс = 1 По КоличествоПараметров Цикл
			строкаПараметр = Объект.ПараметрыСоревнования.Добавить();
			строкаПараметр.Параметр = Индекс;
			строкаПараметр.GUIDУчастника = строкаСоставУчастников.GUIDУчастника;
		КонецЦикла;	
	КонецЦикла;
			
КонецПроцедуры

// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02

&НаСервере
Процедура УстановитьВидимостьДоступностьНаСервере()
	
	// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
	Если ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ Объект.ЗагруженИзВнешнейСистемы Тогда
		
		КоличествоПараметров = Объект.ДокументОснование.КоличествоПараметров;
		Элементы.Соревнование.Видимость             = Ложь;
		Элементы.ТипРезультата.Видимость 			= Ложь;
		Элементы.СпособПодсчетаРезультата.Видимость = Ложь;
		Элементы.СоставУчастниковДисциплина.ТолькоПросмотр = Истина;
		Объект.ТипРезультата = Объект.ДокументОснование.ТипРезультата;
		Объект.СпособПодсчетаРезультата = Объект.ДокументОснование.ТипПодсчетаРезультата; 
		
		Элементы.ГруппаПопыткиПараметры.Видимость = КоличествоПараметров > 1;
		
		ТипРезультатаЧисло  =  Объект.ДокументОснование.ТипРезультата = Перечисления.ТипыРезультатов.Число;
		ТипРезультатаБулево =  Объект.ДокументОснование.ТипРезультата = Перечисления.ТипыРезультатов.Булево;
		Пересчитывать       =  Объект.ДокументОснование.ТипРезультата = Перечисления.ТипыРезультатов.Время;
		
		Элементы.СоставУчастниковРезультатЧисло.Видимость       = ТипРезультатаЧисло;
		Элементы.ПараметрыСоревнованияРезультатЧисло.Видимость  = ТипРезультатаЧисло;
		
		Элементы.СоставУчастниковРезультатСтрока.Видимость      = Пересчитывать;
		Элементы.СоставУчастниковОтставаниеСтрока.Видимость     = Пересчитывать;
		Элементы.ПараметрыСоревнованияРезультатСтрока.Видимость = Пересчитывать;
		
		Элементы.СоставУчастниковРезультатБулево.Видимость      = ТипРезультатаБулево;
		Элементы.ПараметрыСоревнованияРезультатБулево.Видимость = ТипРезультатаБулево;
		
		Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость = НЕ ТипРезультатаБулево;
		Элементы.ФормаЗагрузитьПротокол.Видимость = Пересчитывать;
		
	ИначеЕсли Не Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		КоличествоПараметров = Объект.ДокументОснование.КоличествоПараметров;
		Элементы.Соревнование.Видимость             = Ложь;
		Элементы.ТипРезультата.Видимость 			= Ложь;
		Элементы.СпособПодсчетаРезультата.Видимость = Ложь;
		Объект.ТипРезультата = Объект.ДокументОснование.ТипРезультата;
		Объект.СпособПодсчетаРезультата = Объект.ДокументОснование.ТипПодсчетаРезультата; 
		
		Элементы.ГруппаПопыткиПараметры.Видимость = КоличествоПараметров > 1;
		
		ТипРезультатаЧисло  =  Объект.ДокументОснование.ТипРезультата = Перечисления.ТипыРезультатов.Число;
		ТипРезультатаБулево =  Объект.ДокументОснование.ТипРезультата = Перечисления.ТипыРезультатов.Булево;
		Пересчитывать       =  Объект.ДокументОснование.ТипРезультата = Перечисления.ТипыРезультатов.Время;
		
		Элементы.СоставУчастниковРезультатЧисло.Видимость       = ТипРезультатаЧисло;
		Элементы.ПараметрыСоревнованияРезультатЧисло.Видимость  = ТипРезультатаЧисло;
		
		Элементы.СоставУчастниковРезультатСтрока.Видимость      = Пересчитывать;
		Элементы.СоставУчастниковОтставаниеСтрока.Видимость     = Пересчитывать;
		Элементы.ПараметрыСоревнованияРезультатСтрока.Видимость = Пересчитывать;
		
		Элементы.СоставУчастниковРезультатБулево.Видимость      = ТипРезультатаБулево;
		Элементы.ПараметрыСоревнованияРезультатБулево.Видимость = ТипРезультатаБулево;
		
		Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость = НЕ ТипРезультатаБулево;
		Элементы.ФормаЗагрузитьПротокол.Видимость = Пересчитывать;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.Ссылка.Пустая() Тогда
		
		//ЗаполнитьПредставлениеМестоПолФизическогоЛица(); 10.12.2020
		Пересчитывать = "Нет";
		Элементы.ГруппаПопыткиПараметры.Видимость 								= Ложь;
		Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость 			= Ложь;
		Элементы.СоставУчастниковРезультатЧисло.Видимость				 		= Ложь;
		Элементы.СоставУчастниковРезультатБулево.Видимость      				= Ложь;
		Элементы.СпособПодсчетаРезультата.Видимость                             = Ложь;
		Элементы.ДокументОснование.Видимость 									= Ложь;
		
	Иначе
		
		Пересчитывать = "Нет";
		ЗаполнитьПредставлениеМестоПолФизическогоЛица();
		Элементы.ГруппаПопыткиПараметры.Видимость 								= Ложь;
		Элементы.СпособПодсчетаРезультата.Видимость                             = Ложь;
		Элементы.ДокументОснование.Видимость 									= Ложь;
				
		Если Объект.ТипРезультата = Перечисления.ТипыРезультатов.Число Тогда
			Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость 		= Ложь;
			Элементы.СоставУчастниковРезультатБулево.Видимость      			= Ложь;
			Элементы.СоставУчастниковРезультатСтрока.Видимость      			= Ложь;
			Элементы.СоставУчастниковОтставаниеСтрока.Видимость    				= Ложь;
		ИначеЕсли Объект.ТипРезультата = Перечисления.ТипыРезультатов.Булево Тогда
			Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость 		= Ложь;
			Элементы.СоставУчастниковРезультатЧисло.Видимость       			= Ложь;
			Элементы.СоставУчастниковРезультатСтрока.Видимость     			    = Ложь;
			Элементы.СоставУчастниковОтставаниеСтрока.Видимость     			= Ложь;
		ИначеЕсли Объект.ТипРезультата = Перечисления.ТипыРезультатов.Время Тогда
			Пересчитывать = "Да";
			Элементы.ФормаЗагрузитьПротокол.Видимость 							= Ложь;
			Элементы.СоставУчастниковПересчитатьМестаИОтставания.Видимость 		= Ложь;
			Элементы.СоставУчастниковРезультатЧисло.Видимость				 	= Ложь;
			Элементы.СоставУчастниковРезультатБулево.Видимость      			= Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	

	// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
КонецПроцедуры

#Область РаботаСТабличнымиЧастями

&НаКлиенте
Процедура УстановитьОтборНаТаблицуПараметров()
	Элементы.ПараметрыСоревнования.ОтборСтрок = Новый ФиксированнаяСтруктура("GUIDУчастника, Дисциплина", ТекущийКлюч, ТекущаяДисциплина);		
КонецПроцедуры	

&НаСервере
Процедура УдалитьСтрокиПараметровНаСервере(GUIDУчастника)
	массивПараметров = Объект.ПараметрыСоревнования.НайтиСтроки(Новый Структура("GUIDУчастника",GUIDУчастника));
	Для Каждого строкаПараметр Из массивПараметров Цикл
		Объект.ПараметрыСоревнования.Удалить(строкаПараметр);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйCUIDПоспортсмену(Спортсмен, НомерСтроки)
	Если НЕ ЗначениеЗаполнено(Спортсмен) Тогда
		УдалитьСтрокиПараметровНаСервере(ТекущийКлюч);
	ИначеЕсли СокрЛП(Спортсмен.УникальныйИдентификатор()) <> ТекущийКлюч Тогда
		Объект.СоставУчастников[НомерСтроки-1].GUIDУчастника = СокрЛП(Спортсмен.УникальныйИдентификатор());
		ТекущийКлюч = Объект.СоставУчастников[НомерСтроки-1].GUIDУчастника;
		массивПараметров = Объект.ПараметрыСоревнования.НайтиСтроки(Новый Структура("GUIDУчастника", ТекущийКлюч));
		Для Каждого строкаПараметр Из массивПараметров Цикл
			строкаПараметр.GUIDУчастника = СокрЛП(Спортсмен.УникальныйИдентификатор());
		КонецЦикла;
		
		// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
		Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
			ЗаполнитьДанныеПоСпортсмену(Спортсмен, НомерСтроки-1);
		Иначе
			ЗаполнитьПредставлениеМестоПолФизическогоЛица();
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьРезультатЧислоВСтроку()
 
	Если Пересчитывать Тогда
		
		Для Каждого СтрокаСоставУчастников Из Объект.СоставУчастников Цикл
			СтрокаСоставУчастников.РезультатСтрока  = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(СтрокаСоставУчастников.РезультатЧисло);
			СтрокаСоставУчастников.ОтставаниеСтрока = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(СтрокаСоставУчастников.ОтставаниеМилСек);
		КонецЦикла;
		
		Для Каждого СтрокаПараметр Из Объект.ПараметрыСоревнования Цикл
			СтрокаПараметр.РезультатСтрока = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(СтрокаПараметр.РезультатЧисло);
		КонецЦикла;		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
&НаСервере
Процедура УстановитьСписокВыбораДляДокументОснование()
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(Объект.Организация).ВозрастныеГруппыОрганизация Тогда
		Элементы.СоставУчастниковМеждународнаяВозрастнаяГруппа.СписокВыбора.Очистить();
		
		Для Каждого строкаВозрастнаяГруппа Из Объект.Соревнование.МеждународныеВозрастныеГруппы Цикл
			Элементы.СоставУчастниковМеждународнаяВозрастнаяГруппа.СписокВыбора.Добавить(строкаВозрастнаяГруппа.МеждународнаяВозрастнаяГруппа);
		КонецЦикла;
	КонецЕсли;                        
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2020.11.18	
	
КонецПроцедуры
// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02

&НаСервере
Процедура ЗаполнитьДанныеПоСпортсмену(Спортсмен,Индекс)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("датаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("Спортсмен"    , Спортсмен);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МеждународныеВозрастныеГруппы.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
	               |	ВЫБОР
	               |		КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(перечисление.полфизическоголица.женский)
	               |			ТОГДА ""Девушки""
	               |		КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(перечисление.полфизическоголица.мужской)
	               |			ТОГДА ""Юноши""
	               |		ИНАЧЕ ""Неопределен""
	               |	КОНЕЦ КАК ПолПредставление
	               |ИЗ
	               |	Справочник.Спортсмены КАК Спортсмены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МеждународныеВозрастныеГруппы.СрезПоследних(&датаДокумента, Спортсмен = &Спортсмен) КАК МеждународныеВозрастныеГруппы
	               |		ПО Спортсмены.Ссылка = МеждународныеВозрастныеГруппы.Спортсмен
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО Спортсмены.ФизическоеЛицо = ФизическиеЛица.Ссылка
	               |ГДЕ
	               |	Спортсмены.Ссылка = &спортсмен";
	
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда
		 ЗаполнитьЗначенияСвойств(Объект.СоставУчастников[Индекс],Выборка);
	 КонецЕсли;	 
	                                 
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеСпортсменовИВозрастныхГрупп(Отказ)
	// {Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДокумента"      , Объект.Дата);
		Запрос.УстановитьПараметр("УчебныйГод"         , Объект.УчебныйГод);
		Запрос.УстановитьПараметр("Соревнование"       , Объект.Соревнование);
		Запрос.УстановитьПараметр("ТаблицаСпортсменов" , Объект.СоставУчастников.Выгрузить());
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиСоревнований.Спортсмен КАК Спортсмен,
		|	УчастникиСоревнований.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
		|ПОМЕСТИТЬ ВТ_ЗаявленныеСпортсмены
		|ИЗ
		|	РегистрСведений.УчастникиСоревнований.СрезПоследних(
		|			&ДатаДокумента,
		|			УчебныйГод = &УчебныйГод
		|				И Соревнование = &Соревнование) КАК УчастникиСоревнований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСпортсменов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСпортсменов.Спортсмен КАК Спортсмен,
		|	ТаблицаСпортсменов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
		|ПОМЕСТИТЬ ВТ_ТаблицаСпортсменов
		|ИЗ
		|	&ТаблицаСпортсменов КАК ТаблицаСпортсменов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаСпортсменов.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТаблицаСпортсменов.Спортсмен КАК Спортсмен
		|ИЗ
		|	ВТ_ТаблицаСпортсменов КАК ВТ_ТаблицаСпортсменов
		|ГДЕ
		|	НЕ ВТ_ТаблицаСпортсменов.Спортсмен В
		|				(ВЫБРАТЬ
		|					ВТ_ЗаявленныеСпортсмены.Спортсмен
		|				ИЗ
		|					ВТ_ЗаявленныеСпортсмены)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаСпортсменов.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТаблицаСпортсменов.Спортсмен КАК Спортсмен,
		|	ВТ_ТаблицаСпортсменов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		|	ВТ_ЗаявленныеСпортсмены.МеждународнаяВозрастнаяГруппа КАК ЗаявленнаяМеждународнаяВозрастнаяГруппа
		|ИЗ
		|	ВТ_ТаблицаСпортсменов КАК ВТ_ТаблицаСпортсменов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявленныеСпортсмены КАК ВТ_ЗаявленныеСпортсмены
		|		ПО ВТ_ТаблицаСпортсменов.Спортсмен = ВТ_ЗаявленныеСпортсмены.Спортсмен
		|ГДЕ
		|	НЕ ВТ_ЗаявленныеСпортсмены.Спортсмен ЕСТЬ NULL
		|	И ВТ_ЗаявленныеСпортсмены.МеждународнаяВозрастнаяГруппа <> ВТ_ТаблицаСпортсменов.МеждународнаяВозрастнаяГруппа";
		Пакет = Запрос.ВыполнитьПакет();
			 	 
		ВыборкаНеЗаявленные = Пакет[2].Выбрать();
		
		Если НЕ ВыборкаНеЗаявленные.Количество() = 0 Тогда
			Отказ = Истина;
		КонецЕсли;	 
		
		Пока ВыборкаНеЗаявленные.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Спортсмен %1 не заявлен в соревнование!'"),
			ВыборкаНеЗаявленные.Спортсмен); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	 
		КонецЦикла;
		
		ВыборкаНесоответсвтиеГрупп = Пакет[3].Выбрать();
		
		Если НЕ ВыборкаНесоответсвтиеГрупп.Количество() = 0 Тогда
			Отказ = Истина;
		КонецЕсли;	 
		
		Пока ВыборкаНесоответсвтиеГрупп.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для спортсмена %1 установлена возрастная группа %2. В документе указана %3.'"),
			ВыборкаНесоответсвтиеГрупп.Спортсмен,
			ВыборкаНесоответсвтиеГрупп.МеждународнаяВозрастнаяГруппа,
			ВыборкаНесоответсвтиеГрупп.ЗаявленнаяМеждународнаяВозрастнаяГруппа); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	 
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			ПроводитьБезПроверок = Истина;
		КонецЕсли;
	Иначе
		
	КонецЕсли;	
	// }Рарус adilas #10584 -Отвязать протокол соревнований от проведения 2020.11.02	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРезультатыПопыток(ПересчитыватьРезультат = Ложь)
		
	Если КоличествоПараметров > 1 И ПересчитыватьРезультат Тогда
			
			РезультатБулево = Объект.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Булево");
			
			МинЗначение   = Ложь;
			МаксЗначение  = Ложь;
			СуммаЗначение = Ложь;
			
			Если Объект.СпособПодсчетаРезультата = Перечисления.ТипПодсчетаРезультата.МаксимальноеЗначение Тогда
				МаксЗначение = Истина;
			ИначеЕсли Объект.СпособПодсчетаРезультата = Перечисления.ТипПодсчетаРезультата.МинимальноеЗначение Тогда
				МинЗначение = Истина;
			Иначе
				СуммаЗначение = Истина;
			КонецЕсли;	
			
			Для Каждого строкаСоставУчастников Из Объект.СоставУчастников Цикл
				// {Рарус dotere #19441 -Структура для поиска 2021.10.20
				ДанныеПоиска = Новый Структура;
				ДанныеПоиска.Вставить("GUIDУчастника",строкаСоставУчастников.GUIDУчастника);
				ДанныеПоиска.Вставить("Дисциплина",строкаСоставУчастников.Дисциплина);
				массивПараметров = Объект.ПараметрыСоревнования.НайтиСтроки(ДанныеПоиска);
				// }Рарус dotere #19441 -Структура для поиска 2021.10.20
				
				Если РезультатБулево Тогда
					ПопыткаЗасчитана = Ложь;
					Для Каждого строкаПараметр Из массивПараметров Цикл
						ПопыткаЗасчитана = строкаПараметр.РезультатБулево И (строкаПараметр.Состояние.УчитыватьВПодсчетеРезультата ИЛИ НЕ ЗначениеЗаполнено(строкаПараметр.Состояние));
						Если ПопыткаЗасчитана Тогда
							Прервать;
						Иначе
							Продолжить;
						КонецЕсли;	
					КонецЦикла;	
					строкаСоставУчастников.РезультатБулево = ПопыткаЗасчитана;
					
				Иначе
					Если МаксЗначение Тогда
						ЛучшаяПопытка = 0;
						Для Каждого строкаПараметр Из массивПараметров Цикл
							Если строкаПараметр.РезультатЧисло > ЛучшаяПопытка И (строкаПараметр.Состояние.УчитыватьВПодсчетеРезультата ИЛИ НЕ ЗначениеЗаполнено(строкаПараметр.Состояние)) Тогда
								ЛучшаяПопытка = строкаПараметр.РезультатЧисло;
							Иначе
								Продолжить;
							КонецЕсли;	
						КонецЦикла;
						строкаСоставУчастников.РезультатЧисло = ЛучшаяПопытка;
					ИначеЕсли МинЗначение Тогда
						ЛучшаяПопытка = 0;
						Для Индекс = 0 По массивПараметров.Количество()-1 Цикл
							строкаПараметр = массивПараметров[Индекс];
							Если Индекс = 0 Или ЛучшаяПопытка > строкаПараметр.РезультатЧисло И (строкаПараметр.Состояние.УчитыватьВПодсчетеРезультата ИЛИ НЕ ЗначениеЗаполнено(строкаПараметр.Состояние)) Тогда
								ЛучшаяПопытка = строкаПараметр.РезультатЧисло;
							Иначе
								Продолжить;
							КонецЕсли;	
						КонецЦикла;
						строкаСоставУчастников.РезультатЧисло = ЛучшаяПопытка;
					Иначе
						суммаМилСек = 0;
						Для Каждого строкаПараметр Из массивПараметров Цикл
							Если строкаПараметр.Состояние.УчитыватьВПодсчетеРезультата ИЛИ НЕ ЗначениеЗаполнено(строкаПараметр.Состояние) Тогда
								суммаМилСек = суммаМилСек + строкаПараметр.РезультатЧисло;
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЦикла;
						строкаСоставУчастников.РезультатЧисло = суммаМилСек;
					КонецЕсли;
				КонецЕсли;
				
				Если Пересчитывать Тогда
					строкаСоставУчастников.РезультатСтрока  = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(СтрокаСоставУчастников.РезультатЧисло);	
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьМестаНаСервере()
	таблицаДанных = Объект.СоставУчастников.Выгрузить();
		таблицаДанных.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
		Для ИндексСтроки = 0 По таблицаДанных.Количество()-1 Цикл
			таблицаДанных[ИндексСтроки].Индекс = ИндексСтроки;
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("таблицаДанных", таблицаДанных);
		
		мин = ?(Объект.СпособПодсчетаРезультата = ПредопределенноеЗначение("Перечисление.ТипПодсчетаРезультата.МинимальноеЗначение"), Истина,Ложь);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	таблицаДанных.Индекс КАК Индекс,
		               |	таблицаДанных.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		               |	таблицаДанных.Спортсмен КАК Спортсмен,
		               |	таблицаДанных.РезультатЧисло КАК РезультатЧисло
		               |ПОМЕСТИТЬ ВТ_Данные
		               |ИЗ
		               |	&таблицаДанных КАК таблицаДанных
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Данные.Индекс КАК Индекс,
		               |	ВТ_Данные.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		               |	ВТ_Данные.Спортсмен КАК Спортсмен,
		               |	ВТ_Данные.РезультатЧисло КАК РезультатЧисло,
		               |	ФизическиеЛица.Пол КАК Пол
		               |ИЗ
		               |	ВТ_Данные КАК ВТ_Данные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ПО ВТ_Данные.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	%1
		               |ИТОГИ ПО
		               |	МеждународнаяВозрастнаяГруппа,
		               |	Пол";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1",?(мин, " РезультатЧисло Возр", "РезультатЧисло УБЫВ"));
		
		ВыборкаМежГр = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаМежГр.Следующий() Цикл
			
			ВыборкаПол = ВыборкаМежГр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПол.Следующий() Цикл
				
				Если мин Тогда
					
					МинимальноеЗначение  = 9999999;
					Место                = 1;
					ПозицияМеста         = 1;
					
					Индекс = 0;
					Выборка = ВыборкаПол.Выбрать();
					Пока Выборка.Следующий() Цикл
						Если Выборка.РезультатЧисло = 0 Тогда
							Продолжить;
						ИначеЕсли Выборка.РезультатЧисло < МинимальноеЗначение Тогда
							МинимальноеЗначение = Выборка.РезультатЧисло;
							Объект.СоставУчастников[Выборка.Индекс].Место = Место;
						ИначеЕсли Выборка.РезультатЧисло > МинимальноеЗначение Тогда	
							Место =  Индекс + 1;
							Объект.СоставУчастников[Выборка.Индекс].Место = Место;
						Иначе
							Объект.СоставУчастников[Выборка.Индекс].Место = Место;
						КонецЕсли;
						Индекс = Индекс + 1;
					КонецЦикла;
					
				Иначе
					
					МаксимальноеЗначение = 9999999;
					Место                = 1;
					ПозицияМеста         = 1;
					
					Индекс = 0;
					Выборка = ВыборкаПол.Выбрать();
					Пока Выборка.Следующий() Цикл
						Если Выборка.РезультатЧисло = 0 Тогда
							Продолжить;
						ИначеЕсли Выборка.РезультатЧисло < МаксимальноеЗначение Тогда
							МаксимальноеЗначение = Выборка.РезультатЧисло;
							Место =  Индекс + 1;
							Объект.СоставУчастников[Выборка.Индекс].Место = Место;
						Иначе
							Объект.СоставУчастников[Выборка.Индекс].Место = Место;
						КонецЕсли;
						Индекс = Индекс + 1;
					КонецЦикла;
					
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;	
			
		Для Индекс = 0 По Объект.СоставУчастников.Количество()-1 Цикл
			
			строкаСоставУчастников = Объект.СоставУчастников[Индекс]; 
			Если строкаСоставУчастников.РезультатЧисло = 0 Тогда
				Продолжить;
			ИначеЕсли Индекс = Объект.СоставУчастников.Количество()-1 Тогда
				Прервать;
			Иначе
				строкаСледРезультата = Объект.СоставУчастников[Индекс+1];
				разницаЗначенийРезультата = строкаСледРезультата.РезультатЧисло - строкаСоставУчастников.РезультатЧисло;
				Если разницаЗначенийРезультата >0 Тогда
					
					строкаСледРезультата.ОтставаниеМилСек = разницаЗначенийРезультата;
					
					Если Пересчитывать Тогда
						строкаСледРезультата.ОтставаниеСтрока = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(строкаСледРезультата.ОтставаниеМилСек);
					Иначе
						Продолжить;
					КонецЕсли;
					
				Иначе
					строкаСледРезультата.ОтставаниеМилСек = 0;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаПротокола

&НаКлиенте
Процедура ЗагрузитьПротоколПродолжить(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СоставУчастников.Очистить();
		Объект.ПараметрыСоревнования.Очистить();
		ЗагрузитьПротоколЗавершение();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьПротоколЗавершение()
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПротоколаВДокумент", ЭтотОбъект);
	ОткрытьФорму("Обработка.ВыгрузкаЗагрузкаДанныхСоревнования.Форма.ФормаЗагрузка", Новый Структура("ДокументСоревнование", Объект.ДокументОснование),,,,,Оповещение);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеПротоколаВДокумент(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивДанныхПоРезультатам         = Результат.СтруктураДанных.РезультатыСоревнования;
	МассивНеФинишировавшихСпортсменов = Результат.СтруктураДанных.НеФинишировавшиеУчастники;
	
	ЗагрузитьДанныеПротоколаВДокументНаСервере(МассивДанныхПоРезультатам, МассивНеФинишировавшихСпортсменов, Результат.УспешнаяПопытка);

	УстановитьОтборНаТаблицуПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПротоколаВДокументНаСервере(МассивДанных, МассивНеФинишировавшихСпортсменов, УспешнаяПопытка)
	
	Для Каждого структураДанных Из МассивДанных Цикл
		ФизЛицо = структураДанных.Спортсмен.ФизическоеЛицо;	
		объектСоставучастников = Объект.СоставУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(объектСоставучастников,структураДанных);
		объектСоставучастников.GUIDУчастника    = структураДанных.GUIDСпортсмена;
		объектСоставучастников.РезультатСтрока  = структураДанных.ИтоговыйРезультат;
		объектСоставучастников.ОтставаниеСтрока = структураДанных.Отставание; 
		объектСоставучастников.ПолПредставление = ?(ФизЛицо.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"), "Девушки",?(ФизЛицо.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"), "Юноши",""));
		Для Индекс = 1 По КоличествоПараметров Цикл
			строкаПараметр = Объект.ПараметрыСоревнования.Добавить();
			строкаПараметр.GUIDУчастника = объектСоставучастников.GUIDУчастника;
			строкаПараметр.Параметр      = Индекс;
			строкаПараметр.Состояние     = УспешнаяПопытка;
			Если Индекс = 1 Тогда
				строкаПараметр.РезультатСтрока = структураДанных.Параметр1;
			Иначе
				строкаПараметр.РезультатСтрока = структураДанных.Параметр2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого структураДанных Из МассивНеФинишировавшихСпортсменов Цикл
		объектСоставучастников                  = Объект.СоставУчастников.Добавить();
		объектСоставучастников.GUIDУчастника    = структураДанных.GUIDСпортсмена;
		ЗаполнитьЗначенияСвойств(объектСоставучастников, структураДанных);
		объектСоставучастников.ПолПредставление = ?(ФизЛицо.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"), "Девушки",?(ФизЛицо.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"), "Юноши",""));
		строкаПараметр                          = Объект.ПараметрыСоревнования.Добавить();
		строкаПараметр.GUIDУчастника            = объектСоставучастников.GUIDУчастника;
		строкаПараметр.Параметр                 = структураДанных.Параметр;
		строкаПараметр.Состояние                = структураДанных.СостояниеПопытки;
		строкаПараметр.РезультатСтрока          = структураДанных.Результат;
	КонецЦикла;	
	
	Объект.ЗагруженИзВнешнейСистемы = Истина;
	
	ТекущийКлюч = ?(Объект.СоставУчастников.Количество()>0, Объект.СоставУчастников[0].GUIDУчастника,"");
	ТекущаяДисциплина = ?(Объект.СоставУчастников.Количество()>0, Объект.СоставУчастников[0].Дисциплина,"");
	
КонецПроцедуры		

&НаКлиенте
Процедура ВидСпортаПриИзменении(Элемент)
	ПолучитьДостиженияСпортсменов()
КонецПроцедуры


// {Рарус adilas #13013 -Протокол соревнование (период и место проведения) 2021.02.02
&НаКлиенте
Процедура ПериодСоревнованияПриИзменении(Элемент)
	
	Если ПериодСоревнования <> Неопределено Тогда
		Объект.ДатаНачалаСоревнования = ПериодСоревнования.ДатаНачала;
		Объект.ДатаОкончанияСоревнования = ПериодСоревнования.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры


// }Рарус adilas #13013 -Протокол соревнование (период и место проведения) 2021.02.02

// {Рарус dotere #15362 -Создание организатора на основании организации 2021.05.04
&НаКлиенте
Процедура ОрганизаторСоревнованияСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОткрытьФорму("Справочник.ОрганизаторыСоревнований.Форма.ФормаЭлемента",ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытиеФормы" Тогда
		Объект.ОрганизаторСоревнования = Параметр;
	КонецЕсли
КонецПроцедуры
// }Рарус dotere #15362 -Создание организатора на основании организации 2021.05.04
// {Рарус dotere #16311 -Открытие учебного года 2021.06.29
&НаКлиенте
Процедура УчебныйГодПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличнуюЧастьНаСервере();
		УчетСпортсменовКлиент.УчебныйГодНачалоВыбора(ЭтотОбъект,Ложь);
	КонецЕсли;
КонецПроцедуры
	
&НаСервере
Процедура ОчиститьТабличнуюЧастьНаСервере()
	Объект.СоставУчастников.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	УправлениеУчебнымГодомСсылка = Результат;
    ПолучитьУчебныйГодСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодСозданиеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
	   Объект.УчебныйГод = Результат.УчебныйГодСсылка;
	   УправлениеУчебнымГодомСсылка = Результат.УчебныйГодОбъект;
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьУчебныйГодСсылка()
	Объект.УчебныйГод = УправлениеУчебнымГодомСсылка.УчебныйГод;
КонецПроцедуры

// }Рарус dotere #16311 -Открытие учебного года 2021.06.29

#КонецОбласти