// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
         Возврат;
    КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	УчетСпортсменовСервер.ЗаполнитьРеквизит(ЭтотОбъект, "Ответственный", ПараметрыСеанса.ТекущийПользователь);	
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроверитьХарактеристикиНаДубли(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	ПроведениеСервер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "ДостиженияСпортсменов");
	
	Движения.Записать();

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	Движения.Записать();

	ПроведениеСервер.ВыполнитьКонтрольРезультатовОтменыПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Соревнование") Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)
	
	ДокументОснование = ДанныеЗаполнения;
	ВидСпорта = ДанныеЗаполнения.ВидСпорта;
	Организация = ДанныеЗаполнения.Организация;
	УчебныйГод = ДанныеЗаполнения.УчебныйГод;
	
	ТЗСпортсмены = ДокументОснование.СоставУчастников.Выгрузить();
	ТЗСпортсмены.Сортировать("Спортсмен");
	ТЗСпортсмены.Колонки.Добавить("КлючСтроки");
	
	Достижения.Очистить();
		
	ТЗХарактеристики = УчетСпортсменовСервер.ПолучитьТаблицуХарактеристикВидаСпорта(ВидСпорта);
	
	Для Сч = 1 По ТЗСпортсмены.Количество() Цикл
		ТЗСпортсмены[Сч - 1].КлючСтроки = Сч;
		
		Для СчХ = 1 По ТЗХарактеристики.Количество() Цикл
			
			НоваяСтрока = Достижения.Добавить();
			НоваяСтрока.Характеристика = ТЗХарактеристики[СчХ - 1].Характеристика;
			НоваяСтрока.КлючСтроки = Сч;
			НоваяСтрока.НомерСтрокиВнутренний = СчХ;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Спортсмены.Загрузить(ТЗСпортсмены);
	
КонецПроцедуры

Процедура ПроверитьХарактеристикиНаДубли(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Достижения.КлючСтроки КАК КлючСтроки,
	|	Достижения.Характеристика КАК Характеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Достижения.Характеристика) КАК КоличествоХарактеристик
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхХарактеристик
	|ИЗ
	|	Документ.РегистрацияДостиженийСпортсменов.Достижения КАК Достижения
	|ГДЕ
	|	Достижения.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Достижения.КлючСтроки,
	|	Достижения.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спортсмены.НомерСтроки КАК НомерСтроки,
	|	Спортсмены.Спортсмен КАК Спортсмен
	|ИЗ
	|	Документ.РегистрацияДостиженийСпортсменов.Спортсмены КАК Спортсмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхХарактеристик КАК ВТ_КоличествоРазличныхХарактеристик
	|		ПО Спортсмены.КлючСтроки = ВТ_КоличествоРазличныхХарактеристик.КлючСтроки
	|ГДЕ
	|	Спортсмены.Ссылка = &Ссылка
	|	И ВТ_КоличествоРазличныхХарактеристик.КоличествоХарактеристик > 1
	|
	|СГРУППИРОВАТЬ ПО
	|	Спортсмены.НомерСтроки,
	|	Спортсмены.Спортсмен" ;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По спортсмену %1 обнаружены повторяющиеся характеристики.'"),
					СокрЛП(Выборка.Спортсмен)); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияДостиженийСпортсменовСпортсмены.Спортсмен КАК Спортсмен,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВТ_Строки
	|ИЗ
	|	Документ.РегистрацияДостиженийСпортсменов.Спортсмены КАК РегистрацияДостиженийСпортсменовСпортсмены
	|ГДЕ
	|	РегистрацияДостиженийСпортсменовСпортсмены.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияДостиженийСпортсменовСпортсмены.Спортсмен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Строки.Спортсмен КАК Спортсмен
	|ИЗ
	|	ВТ_Строки КАК ВТ_Строки
	|ГДЕ
	|	ВТ_Строки.Количество > 1";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По спортсмену %1 обнаружены больше одной строки в документе. Необходимо удалить лишнее.'"),
					СокрЛП(Выборка.Спортсмен)); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спортсмены.Спортсмен КАК Спортсмен,
	|	Спортсмены.КлючСтроки КАК КлючСтроки
	|ПОМЕСТИТЬ ВТ_Спортсмены
	|ИЗ
	|	Документ.РегистрацияДостиженийСпортсменов.Спортсмены КАК Спортсмены
	|ГДЕ
	|	Спортсмены.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Достижения.Характеристика КАК Характеристика,
	|	Достижения.Значение КАК Значение,
	|	Достижения.КлючСтроки КАК КлючСтроки
	|ПОМЕСТИТЬ ВТ_Достижения
	|ИЗ
	|	Документ.РегистрацияДостиженийСпортсменов.Достижения КАК Достижения
	|ГДЕ
	|	Достижения.Ссылка = &Ссылка
	|	И Достижения.Значение <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Спортсмены.Спортсмен КАК Спортсмен
	|ПОМЕСТИТЬ ВТ_СтрокиДляРегистра
	|ИЗ
	|	ВТ_Достижения КАК ВТ_Достижения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Спортсмены КАК ВТ_Спортсмены
	|		ПО ВТ_Достижения.КлючСтроки = ВТ_Спортсмены.КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДостиженияСпортсменовОбороты.Спортсмен КАК Спортсмен,
	|	ДостиженияСпортсменовОбороты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_СуществующиеСтрокиРегистра
	|ИЗ
	|	РегистрНакопления.ДостиженияСпортсменов.Обороты(
	|			,
	|			,
	|			Запись,
	|			Соревнование = &Соревнование
	|				И Спортсмен В
	|					(ВЫБРАТЬ
	|						ВТ_СтрокиДляРегистра.Спортсмен
	|					ИЗ
	|						ВТ_СтрокиДляРегистра КАК ВТ_СтрокиДляРегистра)) КАК ДостиженияСпортсменовОбороты
	|ГДЕ
	|	ДостиженияСпортсменовОбороты.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СуществующиеСтрокиРегистра.Спортсмен КАК Спортсмен,
	|	ВТ_СуществующиеСтрокиРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_СтрокиДляРегистра КАК ВТ_СтрокиДляРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СуществующиеСтрокиРегистра КАК ВТ_СуществующиеСтрокиРегистра
	|		ПО ВТ_СтрокиДляРегистра.Спортсмен = ВТ_СуществующиеСтрокиРегистра.Спортсмен";
	Запрос.УстановитьПараметр("Соревнование", Ссылка.ДокументОснование.Соревнование);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По спортсмену %1 обнаружен проведенный документ %2. Необходимо исключить этого спортсмена из документа.'"),
					СокрЛП(Выборка.Спортсмен), "" + Выборка.Регистратор); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

