////////////////////////////////////////////////////////////////////////////////
// Бронирование помещений
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает пометку удаления брони и оповещает другие формы.
//
// Параметры:
//  Бронь			 - ДокументСсылка.Бронь	 - Бронь.
//  ПометкаУдаления	 - Булево				 - Новая пометка удаления.
// 
// Возвращаемое значение:
//  Булево - Признак того что новая пометка удаления была установлена.
//
Функция УстановитьПометкуУдаления(Бронь, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	Если ТипЗнч(Бронь) <> Тип("ДокументСсылка.БроньСпортивногоОбъекта") Тогда
		Возврат УстановленаПометкаУдаления;
	КонецЕсли;
	
	БроньОбъект = Бронь.ПолучитьОбъект();
	БроньОбъект.Заблокировать();
	Если БроньОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
		БроньОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		УстановленаПометкаУдаления = Истина;
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает пометки удаления броней и возвращает факт изменения пометки удаления.
//
// Параметры:
//  Брони				 - Массив	 - Помечаемые на удаление брони.
//  ПовторяющиесяБрони	 - Массив	 - Помечаемые на удаление повторяющиеся брони.
//  ПометкаУдаления		 - Булево	 - Новая пометка удаления.
// 
// Возвращаемое значение:
//  Булево - Признак того что новая пометка удаления была установлена.
//
Функция УстановитьПометкиУдаления(Брони, ПовторяющиесяБрони, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Бронь Из Брони Цикл
			
			Если ТипЗнч(Бронь) <> Тип("ДокументСсылка.БроньСпортивногоОбъекта") Тогда
				Продолжить;
			КонецЕсли;
			
			БроньОбъект = Бронь.ПолучитьОбъект();
			БроньОбъект.Заблокировать();
			Если БроньОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
				БроньОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				УстановленаПометкаУдаления = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПометкаУдаления и ПовторяющиесяБрони.Количество() > 0 Тогда
			
			Для Каждого ПовторяющаясяБронь Из ПовторяющиесяБрони Цикл
				
				БроньОбъект = ПовторяющаясяБронь.Бронь.ПолучитьОбъект();
				БроньОбъект.Заблокировать();
				БроньОбъект.ДобавитьИсключениеПовторения(ПовторяющаясяБронь.ДатаИсключения);
				БроньОбъект.Записать();
				
				УстановленаПометкаУдаления = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Создает бронь.
//
// Параметры:
//  Бронь	 - Структура - Данные брони.
// 
// Возвращаемое значение:
//  Структура - Результат брони.
//
Функция СоздатьБронь(Бронь) Экспорт
	
	БроньОбъект = Документы.Бронь.СоздатьДокумент();
	БроньОбъект.Заполнить(Бронь);
	БроньОбъект.Записать();
	
	Возврат БроньОбъект.РезультатБрони();
	
КонецФункции

// Изменяет брони.
//
// Параметры:
//  ИзмененныеБрони	 - Массив	 - Измененные структуры броней.
// 
// Возвращаемое значение:
//  Массив - Результаты броней.
//
Функция ИзменитьБрони(ИзмененныеБрони) Экспорт
	
	РезультатыБроней = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Бронь Из ИзмененныеБрони Цикл
			
			Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
				БроньОбъект = Документы.БроньСпортивногоОбъекта.СоздатьДокумент();
				БроньОбъект.Заполнить(Бронь.Ссылка);
				БроньОбъект.ДополнительныеСвойства.Вставить("ПовторяющаясяБронь", Бронь.Ссылка);
				БроньОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", Бронь.ДатаНачалаИсходная);
			Иначе
				БроньОбъект = Бронь.Ссылка.ПолучитьОбъект();
				БроньОбъект.Заблокировать();
			КонецЕсли;
			
			БроньОбъект.Тренер = Бронь.Тренер;
			БроньОбъект.МестоЗанятия = Бронь.МестоЗанятия;
			БроньОбъект.ДатаНачала = Бронь.ДатаНачала;
			БроньОбъект.ДатаОкончания = Бронь.ДатаОкончания;
			БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Вручную;
			БроньОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			РезультатыБроней.Добавить(БроньОбъект.РезультатБрони());
						
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатыБроней;
	
КонецФункции

// Сформировать данные выбора помещения.
//
// Параметры:
//  ПараметрыПолученияДанных - Структура - Параметры получения данных.
//
// Возвращаемое значение:
//  СписокЗначений - Данные выбора помещения.
//
Функция СформироватьДанныеВыбораПомещения(ПараметрыПолученияДанных) Экспорт
	
	ПараметрыПолученияДанных.Отбор.Вставить("ДляБронирования", Истина);
	ДанныеВыбора = Справочники.МестаЗанятий.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
	Возврат ДанныеВыбора;
	
КонецФункции

// {Рарус adilas #16045 -Сворачиваемые группировки в расписании 2021.05.07
Функция Разложить(Знач Тренер, Разделитель = "(-)") Экспорт
	
	Значения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Тренеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Тренеры КАК Тренеры
		|ГДЕ
		|	Тренеры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Тренер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
			
			Тренер = ВыборкаДетальныеЗаписи.Ссылка;	
			Значения.Вставить("Тренер", Тренер);
			Значения.Вставить("МестоЗанятия");
			
		КонецЦикла;
		
		Возврат Значения;
		
	Иначе
		Список = Новый Массив();
		Длина = СтрДлина(Разделитель);
		
		Тренер = СокрЛП(Тренер);
		Поз = Найти(Тренер, Разделитель);
		
		Пока 0 < Поз Цикл
			ПерваяЧасть = СокрП(Лев(Тренер, Поз-1));
			ПерваяЧасть = Новый УникальныйИдентификатор(ПерваяЧасть);
			Список.Добавить(ПерваяЧасть);
			ВтораяЧасть = СокрЛ(Сред(Тренер, Поз+Длина));
			Поз = Найти(ВтораяЧасть, Разделитель);
			ВтораяЧасть = Новый УникальныйИдентификатор(ВтораяЧасть);
			Список.Добавить(ВтораяЧасть);
		КонецЦикла;
		
		
		Для каждого ЭлементМассива Из Список Цикл
			
			Тренер = Справочники.Тренеры.ПолучитьСсылку(ЭлементМассива);
			МестоЗанятия = Справочники.МестаЗанятий.ПолучитьСсылку(ЭлементМассива);
			
			//Попытка
			ТренерОбъект = Тренер.ПолучитьОбъект();
			МестоЗанятияОбъект = МестоЗанятия.ПолучитьОбъект();
			//Исключение
				
			//КонецПопытки
			Если Не ТренерОбъект = Неопределено Тогда 
				Значения.Вставить("Тренер", Тренер);	
			ИначеЕсли Не МестоЗанятияОбъект = Неопределено Тогда 
				Значения.Вставить("МестоЗанятия", МестоЗанятия); 		
			КонецЕсли;	 
			
		КонецЦикла;
		
		Возврат Значения;
		
	КонецЕсли;

КонецФункции //Разложить()

// }Рарус adilas #16045 -Сворачиваемые группировки в расписании 2021.05.07

#КонецОбласти