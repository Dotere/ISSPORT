#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	// {Рарус dotere #23326 -Обработчики начального заполнения  2021.12.29
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.РежимВыполнения     = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУчетСпортсменов.СоздатьГруппыДоступа";
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.РежимВыполнения     = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУчетСпортсменов.СоздатьПользователяАдминистратор";
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.РежимВыполнения     = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУчетСпортсменов.ЗаполнитьРеестрСпортивныхДисциплин";
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.РежимВыполнения     = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУчетСпортсменов.ЗаполнитьРеестрУчебныхУчереждений";	
	// }Рарус dotere #23326 -Обработчики начального заполнения  2021.12.29
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
		
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// {Рарус dotere #23326 -Процедуры и функции начального заполнения  2021.12.29
Процедура СоздатьГруппыДоступа() Экспорт
	РодительРоли = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Роли");
	//Методист
	Если Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Методисты") = Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
		Методист = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		Методист.Наименование = "Методисты";
		Методист.Назначение.Добавить();
		ПраваМетодиста = ПраваМетодиста();
		Для каждого Права Из ПраваМетодиста Цикл
			ПраваДоступаМетодист = Методист.Роли.Добавить();
			ПраваДоступаМетодист.Роль = Права(Права,РодительРоли);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Методист);
	КонецЕсли;
	//Руководитель
	Если Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Руководители") = Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
		Руководитель = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		Руководитель.Наименование = "Руководители";
		Руководитель.Назначение.Добавить();
		ПраваРуководителя = ПраваМетодиста();
		Для каждого Права Из ПраваРуководителя Цикл
			ПраваДоступаРуководителя = Руководитель.Роли.Добавить();
			ПраваДоступаРуководителя.Роль = Права(Права,РодительРоли);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Руководитель);
	КонецЕсли;
	//Тренер
	Если Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Тренеры") = Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
		Тренер = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		Тренер.Наименование = "Тренеры";
		Тренер.Назначение.Добавить();
		ПраваТренера = ПраваТренера();
		Для каждого Права Из ПраваТренера Цикл
			ПраваДоступаТренера = Тренер.Роли.Добавить();
			ПраваДоступаТренера.Роль = Права(Права,РодительРоли);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Тренер);
	КонецЕсли;
КонецПроцедуры
//Перечень прав методиста
Функция ПраваМетодиста()
	Массив = Новый Массив;
	Массив.Добавить("БазовыеПраваБСП");
	Массив.Добавить("ВызовОнлайнПоддержки");
	Массив.Добавить("ДобавлениеИзменениеАдресныхСведений");
	Массив.Добавить("ДобавлениеИзменениеБанков");
	Массив.Добавить("ДобавлениеИзменениеВариантовОтчетов");
	Массив.Добавить("ДобавлениеИзменениеГрафиковРаботы");
	Массив.Добавить("ДобавлениеИзменениеДатЗапретаИзменения");
	Массив.Добавить("ДобавлениеИзменениеДополнительныхОтчетовИОбработок");
	Массив.Добавить("ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	Массив.Добавить("ДобавлениеИзменениеЗаметок");
	Массив.Добавить("ДобавлениеИзменениеКурсовВалют");
	Массив.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	Массив.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	Массив.Добавить("ДобавлениеИзменениеНапоминаний");
	Массив.Добавить("ДобавлениеИзменениеПапокИФайлов");
	Массив.Добавить("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	Массив.Добавить("ДобавлениеИзменениеШаблоновАнкет");
	Массив.Добавить("ДобавлениеИзменениеШаблоновСообщений");
	Массив.Добавить("ЗапускAutomation");
	Массив.Добавить("ЗапускВебКлиента");
	Массив.Добавить("ЗапускВнешнегоСоединения");
	Массив.Добавить("ЗапускМобильногоКлиента");
	Массив.Добавить("ЗапускТолстогоКлиента");
	Массив.Добавить("ЗапускТонкогоКлиента");
	Массив.Добавить("ИзменениеВыгруженныхВСистемуХронометражаДокументов");
	Массив.Добавить("ИзменениеДополнительныхСведений");
	Массив.Добавить("ИзменениеМакетовПечатныхФорм");
	Массив.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
	Массив.Добавить("ИспользованиеУниверсальногоОтчета");
	Массив.Добавить("Методист");
	Массив.Добавить("ОтправкаSMS");
	Массив.Добавить("ПросмотрЖурналаРегистрации");
	Массив.Добавить("ПросмотрОписанияИзмененийПрограммы");
	Массив.Добавить("ПросмотрОтчетаДвиженияДокумента");
	Массив.Добавить("ПросмотрСвязанныеДокументы");
	Массив.Добавить("СохранениеДанныхПользователя");
	Массив.Добавить("ЧтениеВариантовОтчетов");
	Массив.Добавить("ЧтениеВерсийОбъектов");
	Массив.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	Массив.Добавить("ЧтениеДополнительныхСведений");
	Массив.Добавить("ЧтениеУчетныхЗаписейЭлектроннойПочты");
	Массив.Добавить("ЧтениеШаблоновСообщений");
	Возврат Массив;
КонецФункции
//Перечень прав руководителя
Функция ПраваРуководителя()
	Массив = Новый Массив;
	Массив.Добавить("БазовыеПраваБСП");
	Массив.Добавить("ВыводНаПринтерФайлБуферОбмена");
	Массив.Добавить("ВызовОнлайнПоддержки");
	Массив.Добавить("ДобавлениеИзменениеАдресныхСведений");
	Массив.Добавить("ДобавлениеИзменениеБанков");
	Массив.Добавить("ДобавлениеИзменениеВариантовОтчетов");
	Массив.Добавить("ДобавлениеИзменениеВидовКонтактнойИнформации");
	Массив.Добавить("ДобавлениеИзменениеГрафиковРаботы");
	Массив.Добавить("ДобавлениеИзменениеДатЗапретаИзменения");
	Массив.Добавить("ДобавлениеИзменениеДополнительныхОтчетовИОбработок");
	Массив.Добавить("ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	Массив.Добавить("ДобавлениеИзменениеЗаметок");
	Массив.Добавить("ДобавлениеИзменениеКурсовВалют");
	Массив.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	Массив.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	Массив.Добавить("ДобавлениеИзменениеНапоминаний");
	Массив.Добавить("ДобавлениеИзменениеПапокИФайлов");
	Массив.Добавить("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	Массив.Добавить("ДобавлениеИзменениеШаблоновАнкет");
	Массив.Добавить("ДобавлениеИзменениеШаблоновСообщений");
	Массив.Добавить("ЗапускAutomation");
	Массив.Добавить("ЗапускВебКлиента");
	Массив.Добавить("ЗапускВнешнегоСоединения");
	Массив.Добавить("ЗапускМобильногоКлиента");
	Массив.Добавить("ЗапускТолстогоКлиента");
	Массив.Добавить("ЗапускТонкогоКлиента");
	Массив.Добавить("ИзменениеВыгруженныхВСистемуХронометражаДокументов");
	Массив.Добавить("ИзменениеДополнительныхСведений");
	Массив.Добавить("ИзменениеМакетовПечатныхФорм");
	Массив.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
	Массив.Добавить("ИспользованиеУниверсальногоОтчета");
	Массив.Добавить("Руководитель");
	Массив.Добавить("ОтправкаSMS");
	Массив.Добавить("ПросмотрЖурналаРегистрации");
	Массив.Добавить("ПросмотрОписанияИзмененийПрограммы");
	Массив.Добавить("ПросмотрОтчетаДвиженияДокумента");
	Массив.Добавить("ПросмотрСвязанныеДокументы");
	Массив.Добавить("СохранениеДанныхПользователя");
	Массив.Добавить("ЧтениеВариантовОтчетов");
	Массив.Добавить("ЧтениеВерсийОбъектов");
	Массив.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	Массив.Добавить("ЧтениеДополнительныхСведений");
	Массив.Добавить("ЧтениеУчетныхЗаписейЭлектроннойПочты");
	Массив.Добавить("ЧтениеШаблоновСообщений");
	Возврат Массив;
КонецФункции
//Перечень прав тренера
Функция ПраваТренера()
	Массив = Новый Массив;
	Массив.Добавить("БазовыеПраваБСП");
	Массив.Добавить("ВыводНаПринтерФайлБуферОбмена");
	Массив.Добавить("ЗапускAutomation");
	Массив.Добавить("ЗапускВебКлиента");
	Массив.Добавить("ЗапускВнешнегоСоединения");
	Массив.Добавить("ЗапускМобильногоКлиента");
	Массив.Добавить("ЗапускТолстогоКлиента");
	Массив.Добавить("ЗапускТонкогоКлиента");
	Массив.Добавить("Тренер");
	Массив.Добавить("ЧтениеВариантовОтчетов");
	Массив.Добавить("ЧтениеВерсийОбъектов");
	Массив.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	Массив.Добавить("ЧтениеДополнительныхСведений");
	Возврат Массив;
КонецФункции

Функция Права(НужныеПрава,РодительРоли)
	Возврат Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя",НужныеПрава,РодительРоли);
КонецФункции

Процедура СоздатьПользователяАдминистратор() Экспорт
	
	Пользователи.СоздатьАдминистратора(Неопределено);
КонецПроцедуры

Процедура ЗаполнитьРеестрСпортивныхДисциплин() Экспорт
	Завершение = Справочники.РеестрСпортивныхДисциплин.ЗагрузитьМакетВТЗВСправочникНаСервере();
КонецПроцедуры

Процедура ЗаполнитьРеестрУчебныхУчереждений() Экспорт
	Справочники.РеестрУчебныхУчреждений.ЗаполнитьИзМакета();
КонецПроцедуры
// }Рарус dotere #23326 -Процедуры и функции начального заполнения  2021.12.29
#КонецОбласти
