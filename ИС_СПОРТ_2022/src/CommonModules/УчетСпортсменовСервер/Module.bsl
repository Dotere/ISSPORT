#Область ПроцедурыИФункцииПоЗаполнениюРеквизитовНаФорме

Процедура ЗаполнитьРеквизит(Объект, ИмяРеквизита, Значение) Экспорт
    
    Объект[ИмяРеквизита] = Значение;
    
КонецПроцедуры	

Процедура ЗаполнитьНастройкиПоУмолчанию(Объект) Экспорт
    
    Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
        Объект.Организация = ПараметрыСеанса.ТекущаяОрганизация;
    КонецЕсли;
    //Запрос = Новый Запрос;
    //Запрос.УстановитьПараметр("Владелец",Объект.Организация); 
    //Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
    //               |	ВидыСпорта.Ссылка КАК Ссылка
    //               |ИЗ
    //               |	Справочник.ВидыСпорта КАК ВидыСпорта
    //               |ГДЕ
    //               |	ВидыСпорта.Владелец = &Владелец";
    //Результат = Запрос.Выполнить();
    //Если НЕ Результат.Пустой() Тогда
    //	Объект.ВидСпорта  = Результат.Выгрузить()[0].Ссылка;
    //КонецЕсли;
    
    // {Рарус adilas #10700 -Вид спорта подставлять по текущему этапу спортсмена 2020.11.05
    Если Не ЗначениеЗаполнено(Объект.ВидСпорта) Тогда 
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	СоответствиеПользователейИВидовСпорта.ВидСпорта КАК ВидСпорта
        |ИЗ
        |	Справочник.Пользователи КАК Пользователи
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПользователейИВидовСпорта КАК СоответствиеПользователейИВидовСпорта
        |		ПО Пользователи.Ссылка = СоответствиеПользователейИВидовСпорта.Пользователь
        |ГДЕ
        |	Пользователи.Ссылка = &Пользователь";
        
        Пользователь = ПараметрыСеанса.ТекущийПользователь;
        
        Запрос.УстановитьПараметр("Пользователь", Пользователь);
        
        РезультатЗапроса = Запрос.Выполнить();	
        
        
        
        Если НЕ РезультатЗапроса.Пустой() Тогда
            
            ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
            
            Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
                Объект.ВидСпорта = ВыборкаДетальныеЗаписи.ВидСпорта;
            КонецЦикла;
        КонецЕсли;
    КонецЕсли;	
    // }Рарус adilas #10700 -Вид спорта подставлять по текущему этапу спортсмена 2020.11.05
    
КонецПроцедуры

Процедура ЗаполнитьДокументУчебныйГод(ЭтотОбъект, УчебныйГод, Организация)Экспорт
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("УчебныйГод",УчебныйГод);
    Запрос.УстановитьПараметр("Организация",Организация);
    Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	УправлениеУчебнымГодом.Ссылка КАК Ссылка
    |ИЗ
    |	Документ.УправлениеУчебнымГодом КАК УправлениеУчебнымГодом
    |ГДЕ
    |	УправлениеУчебнымГодом.УчебныйГод = &УчебныйГод
    |	И УправлениеУчебнымГодом.Организация = &Организация";
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        ЭтотОбъект.УправлениеУчебнымГодомСсылка = Выборка.Ссылка;
    КонецЕсли;	
    
КонецПроцедуры

//СтруктураПараметров  - структура
// *МассивЗначений - массив значений из которых нужно сформировать строку
// *ОграниченнаяДлина - Булево
// *ДлинаСтроки - Число
Функция СформироватьСтрокуПоМассиву(СтруктураПараметров) Экспорт
    
    МассивЗначений = СтруктураПараметров.МассивЗначений;
    
    СформированнаяСтрока = "";
    Первый = Истина;
    
    Для каждого Элем ИЗ МассивЗначений Цикл
        
        Если Первый Тогда
            
            Первый = Ложь;
            СформированнаяСтрока = Строка(Элем);
            Продолжить;
            
        КонецЕсли;
        
        НоваяСформированнаяСтрока = СформированнаяСтрока +", " +Строка(Элем);
        
        Если  СтруктураПараметров.ОграниченнаяДлина Тогда
            
            Если СтрДлина(НоваяСформированнаяСтрока+" ...") > СтруктураПараметров.ДлинаСтроки Тогда
                
                СформированнаяСтрока = СформированнаяСтрока + " ...";
                Прервать;
                
            Иначе
                
                СформированнаяСтрока = НоваяСформированнаяСтрока;
                
            КонецЕсли;
            
        Иначе
            
            СформированнаяСтрока = НоваяСформированнаяСтрока;
            
        КонецЕсли;
        
    КонецЦикла; 
    
    Возврат СформированнаяСтрока;
    
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Транслит(Вход) Экспорт 
    Коды = Новый Соответствие;
    Коды.Вставить("ё","yo");
    Коды.Вставить("Ё","Yo");
    Нач = КодСимвола("А");
    Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
    Для К = Нач по КодСимвола("я") Цикл
        Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
    КонецЦикла;
    Выход = "";
    Для К=1 по СтрДлина(Вход) Цикл
        Бкв = Сред(Вход,К,1);
        Зн = Коды.Получить(Бкв);
        Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);
    КонецЦикла;
    Возврат Выход;
КонецФункции

Функция ПолучитьДокументТекущегоУчебногоГода() Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
    |	УправлениеУчебнымГодом.Ссылка КАК Ссылка
    |ИЗ
    |	Документ.УправлениеУчебнымГодом КАК УправлениеУчебнымГодом
    |ГДЕ
    |	УправлениеУчебнымГодом.Проведен
    |	И УправлениеУчебнымГодом.УчебныйГодОткрыт
    |	И УправлениеУчебнымГодом.УчебныйГод.ДатаНачала <= &Дата
    |	И УправлениеУчебнымГодом.УчебныйГод.ДатаОкончания >= &Дата";
    // {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
    Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
    Выборка = Запрос.Выполнить().Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Ссылка;
    КонецЕсли;
    
    Возврат Документы.УправлениеУчебнымГодом.ПустаяСсылка();
    
КонецФункции	

Функция ПолучитьТаблицуХарактеристикВидаСпорта(ВидСпорта) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ХарактеристикиДостиженийСпортсменов.Ссылка.Характеристика КАК Характеристика
    |ИЗ
    |	Справочник.ХарактеристикиДостиженийСпортсменов КАК ХарактеристикиДостиженийСпортсменов
    |ГДЕ
    |	ХарактеристикиДостиженийСпортсменов.Владелец = &Владелец
    |	И НЕ ХарактеристикиДостиженийСпортсменов.ПометкаУдаления
    |
    |УПОРЯДОЧИТЬ ПО
    |	ХарактеристикиДостиженийСпортсменов.Характеристика
    |АВТОУПОРЯДОЧИВАНИЕ";
    Запрос.УстановитьПараметр("Владелец", ВидСпорта);
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции	

#КонецОбласти

#Область ПроверкаПриПроведениеДокументов

Процедура ПроверитьСоставГруппыНаДубли(Документ, Отказ)Экспорт
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ТаблицаСпортсменов" , Документ.Спортсмены.Выгрузить());
	// {Рарус adilas #15349 -Перевод спортсменов между группами 2021.05.11
	Запрос.УстановитьПараметр("ДатаДокумента"      , Документ.ДатаЗачисления);
	// }Рарус adilas #15349 -Перевод спортсменов между группами 2021.05.11
    Запрос.УстановитьПараметр("Регистратор"        , Документ.Ссылка);
    Запрос.УстановитьПараметр("УчебныйГод"         , Документ.УчебныйГод);
    Запрос.УстановитьПараметр("ВидСпорта"          , Документ.ВидСпорта);
    Запрос.УстановитьПараметр("Организация"        , Документ.Организация);
    
    ТекстЗапроса = "";
    УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
    ТекстЗапроса, 
    Новый Структура("Спортсмен, НомерСтроки"),
    "ВТ_СписокСпортсменовТекущаяГруппа",
    "ТаблицаСпортсменов");
    
    Запрос.Текст = ТекстЗапроса +"
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	СоставГруппы.Спортсмен КАК Спортсмен,
    |	СоставГруппы.Группа КАК Группа
    |ПОМЕСТИТЬ ВТ_СписокГруппВУчебномГоду
    |ИЗ
    |	РегистрСведений.СоставГруппы.СрезПоследних(
    |			&ДатаДокумента,
    |			Регистратор <> &Регистратор
    |				И УчебныйГод = &УчебныйГод
    |				И Организация = &Организация
    |				И ВидСпорта = &ВидСпорта) КАК СоставГруппы
    |ГДЕ
    |	(СоставГруппы.ДатаИсключенияИзГруппы >= &ДатаДокумента
    |			ИЛИ СоставГруппы.ДатаИсключенияИзГруппы = ДАТАВРЕМЯ(1, 1, 1))
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	СоставУчащихсяСпортивногоУчреждения.Спортсмен КАК Спортсмен,
    |	СоставУчащихсяСпортивногоУчреждения.Организация КАК Организация,
    |	СоставУчащихсяСпортивногоУчреждения.ВидСпорта КАК ВидСпорта
    |ПОМЕСТИТЬ ВТ_ИсключенныеИзСпортивногоУчреждения
    |ИЗ
    |	РегистрСведений.СоставУчащихсяСпортивногоУчреждения КАК СоставУчащихсяСпортивногоУчреждения
    |ГДЕ
    |	СоставУчащихсяСпортивногоУчреждения.ВидСпорта = &ВидСпорта
    |	И СоставУчащихсяСпортивногоУчреждения.Организация = &Организация
    |	И СоставУчащихсяСпортивногоУчреждения.Спортсмен В
    |			(ВЫБРАТЬ
    |				ВТ_СписокСпортсменовТекущаяГруппа.Спортсмен
    |			ИЗ
    |				ВТ_СписокСпортсменовТекущаяГруппа)
    |	И СоставУчащихсяСпортивногоУчреждения.ДатаОкончанияОбучения <= &ДатаДокумента
    |	И НЕ СоставУчащихсяСпортивногоУчреждения.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	Заявления.Спортсмен КАК Спортсмен
    |ПОМЕСТИТЬ ВТ_Заявления
    |ИЗ
    |	РегистрСведений.СоставУчащихсяСпортивногоУчреждения КАК Заявления
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсключенныеИзСпортивногоУчреждения КАК ВТ_ИсключенныеИзСпортивногоУчреждения
    |		ПО Заявления.Спортсмен = ВТ_ИсключенныеИзСпортивногоУчреждения.Спортсмен
    |			И Заявления.Организация = ВТ_ИсключенныеИзСпортивногоУчреждения.Организация
    |			И Заявления.ВидСпорта = ВТ_ИсключенныеИзСпортивногоУчреждения.ВидСпорта
    |ГДЕ
    |	Заявления.ВидСпорта = &ВидСпорта
    |	И Заявления.Организация = &Организация
    |	И Заявления.Спортсмен В
    |			(ВЫБРАТЬ
    |				ВТ_СписокСпортсменовТекущаяГруппа.Спортсмен
    |			ИЗ
    |				ВТ_СписокСпортсменовТекущаяГруппа)
    |	И Заявления.ДатаНачалаОбучения <= &ДатаДокумента
    |	И ВТ_ИсключенныеИзСпортивногоУчреждения.Спортсмен ЕСТЬ NULL
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_СписокСпортсменовТекущаяГруппа.Спортсмен КАК Спортсмен,
    |	ВТ_СписокСпортсменовТекущаяГруппа.НомерСтроки КАК НомерСтроки,
    |	ВТ_СписокГруппВУчебномГоду.Группа КАК Группа
    |ИЗ
    |	ВТ_СписокСпортсменовТекущаяГруппа КАК ВТ_СписокСпортсменовТекущаяГруппа
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокГруппВУчебномГоду КАК ВТ_СписокГруппВУчебномГоду
    |		ПО ВТ_СписокСпортсменовТекущаяГруппа.Спортсмен = ВТ_СписокГруппВУчебномГоду.Спортсмен
    |ГДЕ
    |	НЕ ВТ_СписокГруппВУчебномГоду.Спортсмен ЕСТЬ NULL
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_СписокСпортсменовТекущаяГруппа.Спортсмен КАК Спортсмен,
    |	ВТ_СписокСпортсменовТекущаяГруппа.НомерСтроки КАК НомерСтроки
    |ИЗ
    |	ВТ_СписокСпортсменовТекущаяГруппа КАК ВТ_СписокСпортсменовТекущаяГруппа
    |ГДЕ
    |	НЕ ВТ_СписокСпортсменовТекущаяГруппа.Спортсмен В
    |				(ВЫБРАТЬ
    |					ВТ_Заявления.Спортсмен
    |				ИЗ
    |					ВТ_Заявления)";
    
    Пакет = Запрос.ВыполнитьПакет();
    
    ВыборкаДублиПоГруппам = Пакет[4].Выбрать();
    Если НЕ ВыборкаДублиПоГруппам.Количество() = 0 Тогда
        Отказ = Истина;
    КонецЕсли;
    
    Пока ВыборкаДублиПоГруппам.Следующий() Цикл
        ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'Спортсмен %1 уже включен в группу %2
        |Нельзя включать спортсмена в две и более группы.'"),
        ВыборкаДублиПоГруппам.Спортсмен,
        НРег(ВыборкаДублиПоГруппам.Группа)); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Спортсмены["+(ВыборкаДублиПоГруппам.НомерСтроки-1) +"].Спортсмен","Объект.Спортсмены");
    КонецЦикла;
    
    ВыборкаЗаявления = Пакет[5].Выбрать();
    Если НЕ ВыборкаЗаявления.Количество() = 0 Тогда
        Отказ = Истина;
    КонецЕсли;
    
    Пока ВыборкаЗаявления.Следующий() Цикл
        ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'У спортсмена %1 не принято заявление на прием в группу тренера %2 на учебный год %3.'"),
        ВыборкаЗаявления.Спортсмен,
        Документ.ТренерСборной,
        НРег(Документ.УчебныйГод)); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Спортсмены["+СокрЛП(ВыборкаЗаявления.НомерСтроки-1) +"].Спортсмен","Объект.Спортсмены");
    КонецЦикла;
    
КонецПроцедуры

Процедура ПроверитьСоставГруппыНаВозможностьПеревода(Документ, Отказ) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ТаблицаСпортсменов" , Документ.Спортсмены.Выгрузить());
    Запрос.УстановитьПараметр("ДатаДокумента"      , Документ.ДатаПеревода);
    Запрос.УстановитьПараметр("Регистратор"        , Документ.Ссылка);
    Запрос.УстановитьПараметр("ВидСпорта"          , Документ.ВидСпорта);
    Запрос.УстановитьПараметр("Организация"        , Документ.Организация);
	Запрос.УстановитьПараметр("УчебныйГод"         , Документ.УчебныйГод);
	// {Рарус adilas #15349 -Перевод спортсменов между группами 2021.05.11
    Запрос.УстановитьПараметр("ТренерПредыдущий"   , Документ.ТренерСборнойПредыдущий);
    Запрос.УстановитьПараметр("ГруппаПредыдущая"   , Документ.ГруппаПредыдущая);
	Запрос.УстановитьПараметр("Тренер"             , Документ.ТренерСборной);
    Запрос.УстановитьПараметр("Группа"             , Документ.Группа);
    // }Рарус adilas #15349 -Перевод спортсменов между группами 2021.05.11
	ТекстЗапроса = "";
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
	ТекстЗапроса, 
	Новый Структура("Спортсмен, НомерСтроки"),
	"ВТ_Спортсмены",
	"ТаблицаСпортсменов");
    // {Рарус adilas #15349 -Перевод спортсменов между группами 2021.05.11
    Запрос.Текст = ТекстЗапроса +"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставГруппыСрезПоследних.Спортсмен КАК Спортсмен
	|ПОМЕСТИТЬ ВТ_МасксимальныйПериодПоИстории
	|ИЗ
	|	РегистрСведений.СоставГруппы.СрезПоследних(
	|			&ДатаДокумента,
	// {Рарус adilas #15349 -Перевод спортсменов между группами 2021.07.29
	// Убран НомерСтроки
	|			Спортсмен В
	|				(ВЫБРАТЬ
	|					ВТ_Спортсмены.Спортсмен КАК Спортсмен
	|				ИЗ
	|					ВТ_Спортсмены КАК ВТ_Спортсмены)) КАК СоставГруппыСрезПоследних
	// }Рарус adilas #15349 -Перевод спортсменов между группами 2021.07.29
	|ГДЕ
	|	(СоставГруппыСрезПоследних.ДатаИсключенияИзГруппы >= &ДатаДокумента
	|			ИЛИ СоставГруппыСрезПоследних.ДатаИсключенияИзГруппы = ДАТАВРЕМЯ(1, 1, 1))
	|	И СоставГруппыСрезПоследних.ТренерСборной = &ТренерПредыдущий
	|	И СоставГруппыСрезПоследних.Группа = &ГруппаПредыдущая
	|	И СоставГруппыСрезПоследних.Организация = &Организация
	|	И СоставГруппыСрезПоследних.ВидСпорта = &ВидСпорта
	|	И СоставГруппыСрезПоследних.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставГруппыСрезПоследних.Спортсмен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Спортсмены.Спортсмен КАК Спортсмен,
	|	ВТ_Спортсмены.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Спортсмены КАК ВТ_Спортсмены
	|ГДЕ
	// {Рарус adilas #15349 -Перевод спортсменов между группами 2021.07.29
	// Убран НомерСтроки
	|	НЕ ВТ_Спортсмены.Спортсмен В
	|				(ВЫБРАТЬ
	|					ВТ_МасксимальныйПериодПоИстории.Спортсмен
	|				ИЗ
	|					ВТ_МасксимальныйПериодПоИстории)
	// }Рарус adilas #15349 -Перевод спортсменов между группами 2021.07.29
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставГруппыСрезПоследних.Спортсмен КАК Спортсмен
	|ПОМЕСТИТЬ ВТ_СписокГруппВУчебномГоду
	|ИЗ
	|	РегистрСведений.СоставГруппы.СрезПоследних(
	|			&ДатаДокумента,
	|			Спортсмен В
	|					(ВЫБРАТЬ
	|						ВТ_Спортсмены.Спортсмен КАК Спортсмен
	|					ИЗ
	|						ВТ_Спортсмены КАК ВТ_Спортсмены)) КАК СоставГруппыСрезПоследних
	|ГДЕ
	|	(СоставГруппыСрезПоследних.ДатаИсключенияИзГруппы >= &ДатаДокумента
	|			ИЛИ СоставГруппыСрезПоследних.ДатаИсключенияИзГруппы = ДАТАВРЕМЯ(1, 1, 1))
	|	И СоставГруппыСрезПоследних.Регистратор <> &Регистратор
	|	И СоставГруппыСрезПоследних.Организация = &Организация
	|	И СоставГруппыСрезПоследних.ВидСпорта = &ВидСпорта
	|	И СоставГруппыСрезПоследних.УчебныйГод = &УчебныйГод
	|	И СоставГруппыСрезПоследних.ТренерСборной = &Тренер
	|	И СоставГруппыСрезПоследних.Группа = &Группа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спортсмен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Спортсмены.Спортсмен КАК Спортсмен,
	|	ВТ_Спортсмены.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Спортсмены КАК ВТ_Спортсмены
	|ГДЕ
	|	ВТ_Спортсмены.Спортсмен В
	|				(ВЫБРАТЬ
	|					ВТ_СписокГруппВУчебномГоду.Спортсмен КАК Спортсмен
	|				ИЗ
	|					ВТ_СписокГруппВУчебномГоду КАК ВТ_СписокГруппВУчебномГоду)";
    
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаНаличиеВГруппе = Пакет[2].Выбрать();
    Если НЕ ВыборкаНаличиеВГруппе.Количество() = 0 Тогда
        Отказ = Истина;
    КонецЕсли;
    
    Пока ВыборкаНаличиеВГруппе.Следующий() Цикл
         ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'Спортсмен %1 не зачислен группу %2 тренера %3. Осуществить перевод невозможно.'"),
            ВыборкаНаличиеВГруппе.Спортсмен,
            Документ.ГруппаПредыдущая,
            Документ.ТренерСборнойПредыдущий); 
            ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Объект.Спортсмены[" + СокрЛП(ВыборкаНаличиеВГруппе.НомерСтроки - 1) + "].Спортсмен",);
    КонецЦикла;
	
	ВыборкаДубли = Пакет[4].Выбрать();
    Если НЕ ВыборкаДубли.Количество() = 0 Тогда
        Отказ = Истина;
    КонецЕсли;
    
    Пока ВыборкаДубли.Следующий() Цикл
        ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'Спортсмен %1 уже включен в группу %2 тренера %3.
        |Нельзя включать спортсмена в две и более группы.'"),
        ВыборкаДубли.Спортсмен,
        Документ.Группа,
		Документ.ТренерСборной);
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Спортсмены[" + (ВыборкаДубли.НомерСтроки - 1) +"].Спортсмен", "Объект.Спортсмены");
	КонецЦикла;	
   	// }Рарус adilas #15349 -Перевод спортсменов между группами 2021.05.11 
КонецПроцедуры	

Функция СогласиеНаОбработкуПерсональныхДанныхПолучено(Спортсмен, ДатаАктуальности, ТекстСообщения) Экспорт
    
    Отказ = Ложь; 
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    Запрос.УстановитьПараметр("Дата", ДатаАктуальности);
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	СогласияНаОбработкуПерсональныхДанных.Субъект КАК Субъект,
    |	СогласияНаОбработкуПерсональныхДанных.СрокДействия КАК СрокДействия,
    |	СогласияНаОбработкуПерсональныхДанных.Действует КАК Действует
    |ИЗ
    |	РегистрСведений.СогласияНаОбработкуПерсональныхДанных.СрезПоследних(&Дата, Субъект = &Спортсмен) КАК СогласияНаОбработкуПерсональныхДанных" ;
    
    ТекстСообщения = "";
    Результат = Запрос.Выполнить();
    Если Результат.Пустой() Тогда
        Отказ = Истина;
        ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'У спортсмена %1 не получено согласие на обработку персональных данных.'"),
        Спортсмен);
    КонецЕсли;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        Если НЕ Выборка.Действует Тогда
            Отказ = Истина;
            ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'У спортсмена %1 нет действующего согласия на обработку персональных данных.
            |Создать согласие?'"),
            Спортсмен);
        ИначеЕсли Выборка.СрокДействия <> Дата(1,1,1) И Выборка.СрокДействия < ДатаАктуальности Тогда
            Отказ = Истина;
            ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'У спортсмена %1 закончился срок действия согласия на обработку персональных данных.
            |Срок %2.
            |Создать согласие?'"),
            Спортсмен,
            Формат(Выборка.СрокДействия,"ДЛФ=Д"));	
        КонецЕсли;	 
    КонецЦикла;
    
    Возврат Отказ
    
КонецФункции

#КонецОбласти