////////////////////////////////////////////////////////////////////////////////
// Бронирование помещений
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру настройки отбора броней.
//
// Параметры:
//  ПараметрМестоЗанятия		 - Массив, СправочникСсылка.ТерриторииИПомещения - МестоЗанятия, по которому необходимы брони.
//  ДатаНачала				 - Дата											 - Дата, с которой отбираются брони.
//  ДатаОкончания			 - Дата											 - Дата, по которую отбираются брони.
//  ПоказыватьУдаленные		 - Булево										 - Показывать помеченные на удаление брони.
//  Пользователь			 - СправочникСсылка.Пользователь				 - Пользователь, брони которого отбирать.
//  ПользовательИсключение	 - СправочникСсылка.Пользователь				 - Пользователь, брони которого не будут отобраны.
// 
// Возвращаемое значение:
//  Структура - Настройка отбора броней.
//   * ПараметрМестоЗанятия - Массив, СправочникСсылка.ТерриторииИПомещения - МестоЗанятия, по которому необходимы брони.
//   * ДатаНачала - Дата - Дата, с которой отбираются брони.
//   * ДатаОкончания - Дата - Дата, по которую отбираются брони.
//   * ПоказыватьУдаленные - Булево - Показывать помеченные на удаление брони.
//   * Пользователь - СправочникСсылка.Пользователь - Пользователь, брони которого отбирать.
//   * ПользовательИсключение - СправочникСсылка.Пользователь - Пользователь, брони которого не будут отобраны.
//
Функция ПолучитьНастройкуОтбораБроней(ПараметрСпортивныйОбъект, ПараметрМестоЗанятия, ПараметрТренер, ДатаНачала, ДатаОкончания, ПоказыватьУдаленные = Ложь) Экспорт

	НастройкаОтбораБроней = Новый Структура;
	НастройкаОтбораБроней.Вставить("СпортивныйОбъект", ПараметрСпортивныйОбъект);
	НастройкаОтбораБроней.Вставить("МестоЗанятия", ПараметрМестоЗанятия);
	НастройкаОтбораБроней.Вставить("Тренер", ПараметрТренер);
	НастройкаОтбораБроней.Вставить("ДатаНачала", ДатаНачала);
	НастройкаОтбораБроней.Вставить("ДатаОкончания", ДатаОкончания);
	НастройкаОтбораБроней.Вставить("ПоказыватьУдаленные", ПоказыватьУдаленные);
	
	Возврат НастройкаОтбораБроней;
	
КонецФункции

// Возвращает брони по переданным параметрам.
//
// Параметры:
//  НастройкаОтбораБроней	 - Структура - Настройки отбора броней.
//   Описание - см. параметры возвращаемые функцией БронированиеПомещений.ПолучитьНастройкуОтбораБроней().
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица броней.
//
Функция ПолучитьБрони(НастройкаОтбораБроней) Экспорт
	
	ТаблицаБроней = СформироватьТаблицуБроней();
	ЗаполнитьТаблицуБронями(ТаблицаБроней, НастройкаОтбораБроней);
	ЗаполнитьТаблицуПовторяющимисяБронями(ТаблицаБроней, НастройкаОтбораБроней);
	
	Возврат ТаблицаБроней;
	
КонецФункции

// Проверяет наличие пересекающихся броней по переданным параметрам.
//
// Параметры:
//  Бронь			 - ДокументОбъект.Бронь	 - Бронь.
//  БроньИсключение	 - ДокументСсылка.Бронь	 - Бронь, которую следует исключать из проверке.
//  ДатаИсключения	 - Дата					 - Дата исключения брони.
// 
// Возвращаемое значение:
//  Булево - Признак наличия пересечений с другими бронями.
//
Функция ЕстьПересекающиесяБрони(Бронь, БроньИсключение = Неопределено, ДатаИсключения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаБроней = ПолучитьПересекающиесяБрони(Бронь, БроньИсключение, ДатаИсключения);
	Возврат ТаблицаБроней.Количество() > 0;
	
КонецФункции

// Возвращает пересекающиеся брони по переданным параметрам.
//
// Параметры:
//  Бронь			 - ДанныеФормыСтруктура	 - Бронь.
//  БроньИсключение	 - ДокументСсылка.Бронь	 - Бронь, которую следует исключать из проверке.
//  ДатаИсключения	 - Дата					 - Дата исключения брони.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица броней.
//
Функция ПолучитьПересекающиесяБрони(Бронь, БроньИсключение = Неопределено, ДатаИсключения = Неопределено) Экспорт
	
	Если Бронь.ТипЗаписи <> Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
			Бронь.СпортивныйОбъект, Бронь.МестоЗанятия, Бронь.Тренер, Бронь.ДатаНачала, Бронь.ДатаОкончания);
		ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
		
	Иначе
		
		ТаблицаБроней = СформироватьТаблицуБроней();
		
		// Проверка пересечения повторяющейся брони с обычной бронью.
		ТаблицаВозможныхПересечений = СформироватьТаблицуБроней();
		НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
			Бронь.СпортивныйОбъект, Бронь.МестоЗанятия, Бронь.Тренер, Бронь.ДатаНачалаПовторения, Бронь.ДатаОкончанияПовторения);
		ЗаполнитьТаблицуБронями(ТаблицаВозможныхПересечений, НастройкаОтбораБроней);
		Для Каждого СтрокаПересечение Из ТаблицаВозможныхПересечений Цикл
			
			Если Не БрониПересекаются(Бронь, СтрокаПересечение) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаБроней.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПересечение);
			
		КонецЦикла;
		
		// Проверка пересечения повторяющейся брони с повторяющимися бронями.
		НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
			Бронь.СпортивныйОбъект, Бронь.МестоЗанятия, Бронь.Тренер, Бронь.ДатаНачалаПовторения, Бронь.ДатаОкончанияПовторения);
		РезультатЗапроса = ПолучитьРезультатЗапросаПовторяющихсяСобытий(НастройкаОтбораБроней);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не БрониПересекаются(Бронь, Выборка) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаБроней.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаНачала = Выборка.ДатаНачалаПовторения;
			НоваяСтрока.ДатаОкончания = Выборка.ДатаОкончанияПовторения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Ссылка", Бронь.Ссылка);
	СтрокиБроней = ТаблицаБроней.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаБрони Из СтрокиБроней Цикл
		ТаблицаБроней.Удалить(СтрокаБрони);
	КонецЦикла;
	
	УдалитьБроньИсключение(ТаблицаБроней, БроньИсключение, ДатаИсключения);
	
	Возврат ТаблицаБроней;
	
КонецФункции

// Возвращает таблицу рекомендаций по переданным параметрам.
//
// Параметры:
//  Бронь			 - ДанныеФормыСтруктура	 - Бронь, по времени которой формируется таблица.
//  БроньИсключение	 - ДокументСсылка.Бронь	 - Бронь, которую следует исключать из проверке.
//  ДатаИсключения	 - Дата					 - Дата исключения брони.
//  ВесьДень		 - Булево				 - Признак того что таблица формируется за весь день, а не за точное время.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица броней.
//
Функция ПолучитьТаблицуРекомендаций(Бронь,
	БроньИсключение = Неопределено, ДатаИсключения = Неопределено, ВесьДень = Истина) Экспорт
	
	// Формирование данных о бронях.
	//СпортивныйОбъект = Бронь.СпортивныйОбъект;
	//МестоЗанятия = Бронь.МестоЗанятия;
	Если Не ЗначениеЗаполнено(Бронь.МестоЗанятия) Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно получить таблицу рекомендаций - не указано место занятия.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Формирование таблицы рекомендаций.
	ТаблицаРекомендаций = Новый ТаблицаЗначений;
	ТаблицаРекомендаций.Колонки.Добавить(
		"ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"Занят", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗанятости"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"Отклонение", Новый ОписаниеТипов("Число"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"ОтклонениеСтрокой", Новый ОписаниеТипов("Строка"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"РекомендацияСтрокой", Новый ОписаниеТипов("Строка"));
	
	// Для повторяющихся событий рекомендации не рассчитываются.
	Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Возврат ТаблицаРекомендаций;
	КонецЕсли;
	
	ДатаНачала = Бронь.ДатаНачала;
	Если ВесьДень Тогда
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		ДатаНачала = НачалоДня(ДатаНачала);
	Иначе
		ОтображатьВремяС = ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
		ДатаНачала = НачалоДня(ДатаНачала) + ОтображатьВремяС * 3600;
	КонецЕсли;
	
	ДатаОкончания = Бронь.ДатаОкончания;
	Если ВесьДень Тогда
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = КонецДня(ДатаНачала);
		КонецЕсли;
		ДатаОкончания = КонецДня(ДатаОкончания);
	Иначе
		ОтображатьВремяПо = ПолучитьПерсональнуюНастройку("ОтображатьВремяПо");
		ДатаОкончания = НачалоДня(ДатаНачала) + (24 - ОтображатьВремяПо) * 3600;
	КонецЕсли;
	
	Длительность = Бронь.ДатаОкончания - Бронь.ДатаНачала;
	Если Не ЗначениеЗаполнено(Длительность) Тогда
		Длительность = 3600;
	КонецЕсли;
	
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		Бронь.СпортивныйОбъект, Бронь.МестоЗанятия, Бронь.Тренер, ДатаНачала, ДатаОкончания);
	ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
	
	ПараметрыОтбора = Новый Структура("Ссылка", Бронь.Ссылка);
	СтрокиБроней = ТаблицаБроней.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаБрони Из СтрокиБроней Цикл
		ТаблицаБроней.Удалить(СтрокаБрони);
	КонецЦикла;
	
	УдалитьБроньИсключение(ТаблицаБроней, БроньИсключение, ДатаИсключения);
	
	// Формирование таблицы занятости.
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить(
		"ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаЗанятости.Колонки.Добавить(
		"ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаЗанятости.Колонки.Добавить(
		"Занят", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗанятости"));
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Доступен;
	
	Для Каждого СтрокаБрони Из ТаблицаБроней Цикл
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Перечисления.СостоянияЗанятости.Занят,
			СтрокаБрони.ДатаНачала, СтрокаБрони.ДатаОкончания,
			ДатаНачала, ДатаОкончания);
	КонецЦикла;
	
	// Заполнение таблицы рекомендаций.
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаРекомендаций, Перечисления.СостоянияЗанятости.Доступен,
			СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	Для Каждого СтрокаРекомендации Из ТаблицаРекомендаций Цикл
		
		СтрокаРекомендации.РекомендацияСтрокой =
			ПолучитьРекомендациюСтрокой(СтрокаРекомендации.ДатаНачала, СтрокаРекомендации.ДатаОкончания);
		ДлительностьРекомендации = СтрокаРекомендации.ДатаОкончания - СтрокаРекомендации.ДатаНачала;
		
		Если ДлительностьРекомендации >= Длительность Тогда
			СтрокаРекомендации.Отклонение = 0;
			СтрокаРекомендации.ОтклонениеСтрокой = "";
			Продолжить;
		КонецЕсли;
		
		Отклонение = Длительность - ДлительностьРекомендации;
		
		Часов = Цел((Отклонение) / 3600);
		ПодписьЧасов = БронированиеПомещенийКлиентСервер.ПолучитьПодписьЧасов(Часов);
		
		Минут = Цел((Отклонение - Часов * 3600) / 60);
		ПодписьМинут = БронированиеПомещенийКлиентСервер.ПолучитьПодписьМинут(Минут);
		
		Если Часов + Минут = 0 Тогда
			СтрокаРекомендации.Отклонение = 0;
			СтрокаРекомендации.ОтклонениеСтрокой = "";
			Продолжить;
		КонецЕсли;
		
		ПодписьЧасовМинут = "";
		Если Часов <> 0 Тогда
			ПодписьЧасов = Строка(Часов) + " " + ПодписьЧасов;
			// {Рарус adilas #11249 -Расписание на планировщике 2021.04.13
			// Перенос процедур/функций в рамках опитмизации общих модулей
			БронированиеПомещенийКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьЧасовМинут, " ", ПодписьЧасов);
			// }Рарус adilas #11249 -Расписание на планировщике 2021.04.13
		КонецЕсли;
		
		Если Минут <> 0 Тогда
			ПодписьМинут = Строка(Минут) + " " + ПодписьМинут;
			// {Рарус adilas #11249 -Расписание на планировщике 2021.04.13
			// Перенос процедур/функций в рамках опитмизации общих модулей
			БронированиеПомещенийКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьЧасовМинут, " ", ПодписьМинут);
			// }Рарус adilas #11249 -Расписание на планировщике 2021.04.13
		КонецЕсли;
		
		СтрокаРекомендации.Отклонение = Отклонение;
		СтрокаРекомендации.ОтклонениеСтрокой =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Меньше нужного на %1'"), ПодписьЧасовМинут);
		
	КонецЦикла;
	
	ТаблицаРекомендаций.Сортировать("Отклонение, ДатаНачала");
	
	Возврат ТаблицаРекомендаций;
	
КонецФункции

// Формирует список рекомендаций других помещений для брони.
//
// Параметры:
//  Бронь - ДанныеФормыСтруктура - Бронь, по которой формируются рекомендации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Рекомендации помещений.
//
Функция РекомендацииПомещений(Бронь) Экспорт
	
	//// Формирование данных о брони.
	//Если Не ЗначениеЗаполнено(Бронь.ДатаНачала) Или Не ЗначениеЗаполнено(Бронь.ДатаОкончания) Тогда
	//	ТекстОшибки = НСтр("ru = 'Невозможно получить рекомендации мест занятий - не указано время брони.'");
	//	ВызватьИсключение ТекстОшибки;
	//КонецЕсли;
	//
	//// Формирование таблицы рекомендаций.
	//ТаблицаРекомендаций = Новый ТаблицаЗначений;
	//ТаблицаРекомендаций.Колонки.Добавить(
	//	"МестоЗанятия", Новый ОписаниеТипов("СправочникСсылка.МестаЗанятий"));
	//ТаблицаРекомендаций.Колонки.Добавить(
	//	"Представление", Новый ОписаниеТипов("Строка"));
	//ТаблицаРекомендаций.Колонки.Добавить(
	//	"ДоступнаСхема", Новый ОписаниеТипов("Булево"));
	//
	//// Для повторяющихся событий рекомендации не рассчитываются.
	//Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
	//	Возврат ТаблицаРекомендаций;
	//КонецЕсли;
	//
	//// Подбор рекомендации на отображаемых территориях.
	//ОтображаемыеТерритории = БронированиеПомещений.ПолучитьПерсональнуюНастройку("ОтображаемыеТерритории");
	//
	//ОтображаемыеМестаЗанятий = ПолучитьОтображаемыеМестаЗанятий(ОтображаемыеТерритории);
	//ИндексИсходногоПомещения = ОтображаемыеПомещения.Найти(Бронь.МестоЗанятия);
	//Если ИндексИсходногоПомещения <> Неопределено Тогда
	//	ОтображаемыеПомещения.Удалить(ИндексИсходногоПомещения);
	//КонецЕсли;
	//
	//ОтображаемыеБрони = ПолучитьОтображаемыеБрони(
	//	Бронь.ДатаНачала, Бронь.ДатаОкончания, ОтображаемыеПомещения);
	//
	//Для Каждого ОтображаемаяБронь Из ОтображаемыеБрони Цикл
	//	
	//	ИндексПомещения = ОтображаемыеПомещения.Найти(ОтображаемаяБронь.МестоЗанятия);
	//	Если ИндексПомещения = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ОтображаемаяБронь.ДатаНачала < Бронь.ДатаОкончания
	//		И ОтображаемаяБронь.ДатаОкончания > Бронь.ДатаНачала Тогда
	//		ОтображаемыеПомещения.Удалить(ИндексПомещения);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Если ОтображаемыеПомещения.Количество() = 0 Тогда
	//	Возврат ТаблицаРекомендаций;
	//КонецЕсли;
	//
	//// Сортировка по удаленности.
	//РодительИсходногоПомещения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Бронь.МестоЗанятия, "Родитель");
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ТерриторииИПомещения.Ссылка КАК Ссылка,
	//	|	ТерриторииИПомещения.Наименование КАК Наименование,
	//	|	ТерриторииИПомещения.Родитель КАК Родитель,
	//	|	ПРЕДСТАВЛЕНИЕ(ТерриторииИПомещения.Родитель) КАК РодительПредставление,
	//	|	ТерриторииИПомещения.Вместимость КАК Вместимость,
	//	|	ТерриторииИПомещения.ДоступнаСхема
	//	|ИЗ
	//	|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
	//	|ГДЕ
	//	|	ТерриторииИПомещения.Ссылка В(&ОтображаемыеПомещения)
	//	|	И ТерриторииИПомещения.Родитель = &РодительИсходногоПомещения
	//	|	И ТерриторииИПомещения.ДоступноБронирование = ИСТИНА
	//	|	И ТерриторииИПомещения.ПометкаУдаления = ЛОЖЬ
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Наименование
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТерриторииИПомещения.Ссылка КАК Ссылка,
	//	|	ТерриторииИПомещения.Наименование КАК Наименование,
	//	|	ТерриторииИПомещения.Родитель КАК Родитель,
	//	|	ТерриторииИПомещенияРодители.Представление КАК РодительПредставление,
	//	|	ТерриторииИПомещения.Вместимость КАК Вместимость,
	//	|	ТерриторииИПомещения.ДоступнаСхема
	//	|ИЗ
	//	|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТерриторииИПомещения КАК ТерриторииИПомещенияРодители
	//	|		ПО ТерриторииИПомещения.Родитель = ТерриторииИПомещенияРодители.Ссылка
	//	|ГДЕ
	//	|	ТерриторииИПомещения.Ссылка В(&ОтображаемыеПомещения)
	//	|	И ТерриторииИПомещения.Родитель <> &РодительИсходногоПомещения
	//	|	И ТерриторииИПомещения.ДоступноБронирование = ИСТИНА
	//	|	И ТерриторииИПомещения.ПометкаУдаления = ЛОЖЬ
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	РодительПредставление,
	//	|	Наименование";
	//Запрос.УстановитьПараметр("ОтображаемыеПомещения", ОтображаемыеПомещения);
	//Запрос.УстановитьПараметр("РодительИсходногоПомещения", РодительИсходногоПомещения);
	//Результат = Запрос.ВыполнитьПакет();
	//
	//// Помещения с тем же родителем.
	//Выборка = Результат[0].Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ПредставлениеПомещения = БронированиеПомещений.ФорматированноеПредставлениеПомещения(
	//		Выборка.Наименование, Выборка.Вместимость, Выборка.РодительПредставление);
	//	НоваяСтрока = ТаблицаРекомендаций.Добавить();
	//	НоваяСтрока.МестоЗанятия = Выборка.Ссылка;
	//	НоваяСтрока.Представление = Строка(ПредставлениеПомещения);
	//	НоваяСтрока.ДоступнаСхема = Выборка.ДоступнаСхема;
	//КонецЦикла;
	//
	//// Остальные помещения.
	//Выборка = Результат[1].Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ПредставлениеПомещения = БронированиеПомещений.ФорматированноеПредставлениеПомещения(
	//		Выборка.Наименование, Выборка.Вместимость, Выборка.РодительПредставление);
	//	НоваяСтрока = ТаблицаРекомендаций.Добавить();
	//	НоваяСтрока.МестоЗанятия = Выборка.Ссылка;
	//	НоваяСтрока.Представление = Строка(ПредставлениеПомещения);
	//	НоваяСтрока.ДоступнаСхема = Выборка.ДоступнаСхема;
	//КонецЦикла;
	//
	//Возврат ТаблицаРекомендаций;
	
КонецФункции

// Возвращает текстовое описание брони.
//
// Параметры:
//  Бронь			 - ДокументСсылка.Бронь	 - Бронь.
//  ПолноеОписание	 - Булево				 - Признак того что требуется формировать полное описание.
// 
// Возвращаемое значение:
//  Строка - Описание брони.
//
Функция ПолучитьОписаниеБрони(Бронь, ПолноеОписание = Истина) Экспорт
	
	ОписаниеБрони = "";
	Если Не ЗначениеЗаполнено(Бронь) Тогда
		Возврат ОписаниеБрони;
	КонецЕсли;
	
	ДанныеБрони = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Бронь,
		"Ссылка, МестоЗанятия, ДатаНачала, ДатаОкончания, ВесьДень");
	
	ОписаниеМестаЗанятия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Бронь места занятия %1'"), ДанныеБрони.МестоЗанятия);
	ОписаниеКогда = БронированиеПомещенийКлиентСервер.СформироватьДатыБрони(
		ДанныеБрони.ДатаНачала,
		ДанныеБрони.ДатаОкончания,
		ДанныеБрони.ВесьДень);
	
	БронированиеПомещенийКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеБрони, Символы.ПС, ОписаниеМестаЗанятия);
	БронированиеПомещенийКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеБрони, Символы.ПС, ОписаниеКогда);
	
	Если ПолноеОписание Тогда
		ОписаниеБрони = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 забронировал место занятия %2 %3.'"),
			ДанныеБрони.Пользователь,
			ДанныеБрони.МестоЗанятия,
			ОписаниеКогда);
		БронированиеПомещенийКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеБрони, Символы.ПС, ДанныеБрони.Комментарий);
	Иначе
		ОписаниеКогда = БронированиеПомещенийКлиентСервер.СформироватьТекстовоеОписаниеДаты(
			ДанныеБрони.ДатаНачала, Истина);
		ОписаниеБрони = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Забронировано место занятия %1 %2'"),
			ДанныеБрони.МестоЗанятия,
			ОписаниеКогда);
	КонецЕсли;
	
	Возврат ОписаниеБрони;
	
КонецФункции

// Возвращает персональную настройку текущего пользователя по ключу.
//
// Параметры:
//  Настройка	 - Строка	 - Ключ настройки.
// 
// Возвращаемое значение:
//  Любой - Значение настройки.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ОтображатьВремяС" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"ОтображатьВремяС",
			6);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"ОтображатьВремяПо",
			0);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"РазмерЯчейкиВремени",
			15);
		
	ИначеЕсли Настройка = "ПоказыватьУдаленные" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"ПоказыватьУдаленные",
			Ложь);
		
	//ИначеЕсли Настройка = "ОтображаемыеТерритории" Тогда
	//	
	//	Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	//		"БронированиеПомещений",
	//		"ОтображаемыеТерритории",
	//		Неопределено);
	//	Если Значение = Неопределено Тогда
	//		Значение = ОтображаемыеТерриторииПользователяПоУмолчанию();
	//	КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку текущего пользователя.
//
// Параметры:
//  Настройка	 - Строка	 - Ключ настройки.
//  Значение	 - Любой	 - Значение настройки.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ОтображатьВремяС" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ОтображатьВремяС",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ОтображатьВремяПо",
			Значение);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"РазмерЯчейкиВремени",
			Значение);
		
	ИначеЕсли Настройка = "ПоказыватьУдаленные" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ПоказыватьУдаленные",
			Значение);
		
	ИначеЕсли Настройка = "ОтображаемыеТерритории" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ОтображаемыеТерритории",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Отображает планировщик броней.
//
// Параметры:
//  Планировщик	 - Планировщик	 - Планировщик.
//  Параметры	 - Структура	 - Параметры броней.
// 
// Возвращаемое значение:
//  Булево - Признак того что в планировщике есть данные для отображения.
//
Процедура ОтобразитьПланировщикБроней(Планировщик, Параметры) Экспорт
	
	// Установка настроек отображения планировщика.
	УстановитьНастройкиОтображения(Планировщик);
	
	// Установка шкалы времени планировщика.
	РазмерЯчейкиВремени = ПолучитьПерсональнуюНастройку("РазмерЯчейкиВремени");
	УстановитьШкалуВремени(Планировщик, РазмерЯчейкиВремени);
		
	// Отбор помещений по расположению и вместимости.
	ОтображаемыйСпортивныйОбъект = Параметры.СпортивныйОбъект;
	
	// Получение отображаемых броней.
	ОтображаемыеБрони = ПолучитьОтображаемыеБрони(Параметры.ВремяНачала, Параметры.ВремяОкончания, ОтображаемыйСпортивныйОбъект);
	
	Если Параметры.ВариантРасписания = ПредопределенноеЗначение("Перечисление.ВариантРасписания.ПоМестам") Тогда
				
		РезультатЗапроса = ТренераИМестаЗанятий(ОтображаемыйСпортивныйОбъект);
		
		тзТренеры = РезультатЗапроса[0].Выгрузить();
		тзМестаЗанятий = РезультатЗапроса[1].Выгрузить(); 
			
		// Установка измерений планировщика.
		УстановитьИзмеренияПланировщика(Планировщик, тзТренеры, тзМестаЗанятий);
		
	Иначе	
		Планировщик.Измерения.Очистить();		
	КонецЕсли;
		
	// Заполнение элементов планировщика
	Планировщик.Элементы.Очистить();
	Для Каждого Бронь Из ОтображаемыеБрони Цикл
		
		Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
			ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся;
		Иначе
			ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.Событие;
		КонецЕсли;
		
		Тренер = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Бронь.ТренерПредставление);
		
		Элемент = Планировщик.Элементы.Добавить(?(Бронь.ВесьДень, Бронь.ДатаНачала, Бронь.ДатаНачала), ?(Бронь.ВесьДень, Бронь.ДатаОкончания, Бронь.ДатаОкончания));
		Элемент.Текст = Новый ФорматированнаяСтрока(Строка(Формат(Бронь.ДатаНачала, "ДФ=ЧЧ:мм")) + " - " 
									+ Строка(Формат(Бронь.ДатаОкончания, "ДФ=ЧЧ:мм")) + Символы.ПС 
									+ Бронь.ВидСпортаПредставление + Символы.ПС + Тренер + Символы.ПС + Бронь.ЭтапПредставление,,,,);
			                                 
		Элемент.ЦветФона  = Новый Цвет(Бронь.Красный, Бронь.Зеленый, Бронь.Синий);
		Элемент.ЦветРамки = WebЦвета.Черный;
		
		Если Параметры.ВариантРасписания = ПредопределенноеЗначение("Перечисление.ВариантРасписания.ПоМестам") Тогда
			
			// {Рарус adilas #16045 -Сворачиваемые группировки в расписании 2021.05.07
			УИДТренер = Бронь.Тренер.УникальныйИдентификатор();
			УИДУИДТренерСтрока = Строка(УИДТренер);
			
			УИДМестоЗанятий = Бронь.МестоЗанятия.УникальныйИдентификатор();
			УИДМестоЗанятийСтрока = Строка(УИДМестоЗанятий);
			ЭлементМестоЗанятия =  УИДМестоЗанятийСтрока + "(-)" + УИДУИДТренерСтрока;
			
			// Связка записей с измерениями выполняется через соответствия
			СоответствиеЗначений = Новый Соответствие;
			СоответствиеЗначений.Вставить("Тренер, инструктор по спорту", ЭлементМестоЗанятия);
			//СоответствиеЗначений.Вставить("Место занятий", Бронь.МестоЗанятия);
			Элемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначений);
		
			// }Рарус adilas #16045 -Сворачиваемые группировки в расписании 2021.05.07
			
		КонецЕсли;
		
		Элемент.Значение = Новый Структура(
			"Ссылка, ДатаНачала, ДатаОкончания, ВесьДень, ТипЗаписи, Тренер, ВидСпорта, Этап, СпортивныйОбъект, МестоЗанятия, ПометкаУдаления, ДатаНачалаИсходная, ВидЭлемента");
				
		ЗаполнитьЗначенияСвойств(Элемент.Значение, Бронь);
		Элемент.Значение.ВидЭлемента = ВидЭлемента;
		Элемент.Значение.ДатаНачалаИсходная = Бронь.ДатаНачала;
		
		Если Бронь.ПометкаУдаления Тогда
			Элемент.Картинка = БиблиотекаКартинок.ЗаписьКалендаряУдалена;
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьОтображаемыеЧасы(Планировщик);
	
КонецПроцедуры

// Обработчик подписки БронированиеПередЗаписьюПредмета.
//
Процедура БронированиеПередЗаписьюПредмета(Источник, Отказ) Экспорт
	
	//// Подписка ничего не делает при обмене данными.
	//Если Источник.ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Подписка ничего не делает, если отключено бронирование помещений.
	//Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Запоминаем предыдущие значения реквизитов для проверки на изменении в подписке ПриЗаписи.
	//ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоЭтоНовый(Источник);
	//ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(Источник);
	
КонецПроцедуры

// Обработчик подписки БронированиеПриЗаписиПредмета.
//
Процедура БронированиеПриЗаписиПредмета(Источник, Отказ) Экспорт
	
	//// Подписка ничего не делает при обмене данными.
	//Если Источник.ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Подписка ничего не делает, если отключено бронирование помещений.
	//Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Обрабатываем изменение реквизитов предмета.
	//Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов") Тогда
	//	ОбработатьИзменениеРеквизитовПредмета(Источник,
	//		Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов);
	//КонецЕсли;
	//
	//// Если предмет помечен на удаление, то бронировать МестоЗанятия не нужно.
	//Если Источник.ПометкаУдаления Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Выполняем попытку забронировать МестоЗанятия.
	//ДопустимыеПользователи = Новый Массив;
	//ДопустимыеПользователи.Добавить(Источник.Организатор);
	//Если ЗначениеЗаполнено(Источник.Куратор) Тогда
	//	ДопустимыеПользователи.Добавить(Источник.Куратор);
	//КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки БронированиеПриЗаписиРегистра.
//
Процедура БронированиеПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	//// Подписка ничего не делает при обмене данными.
	//Если Источник.ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Подписка ничего не делает, если отключено бронирование помещений.
	//Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СостоянияМероприятий") Тогда
	//	
	//	Для Каждого ЗаписьСостояния Из Источник Цикл
	//		
	//		Если ЗаписьСостояния.Состояние = Перечисления.СостоянияМероприятий.МероприятиеОтменено Тогда
	//			
	//			УдалитьАвтоматическиеБрониПоПредмету(ЗаписьСостояния.Мероприятие);
	//			
	//		ИначеЕсли ЗаписьСостояния.Состояние = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки
	//			Или ЗаписьСостояния.Состояние = Перечисления.СостоянияМероприятий.МероприятиеПроведено Тогда
	//			
	//			// Выполняем попытку забронировать МестоЗанятия.
	//			МероприятиеПомеченоНаУдаление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	//				ЗаписьСостояния.Мероприятие, "ПометкаУдаления");
	//			Если Не МероприятиеПомеченоНаУдаление Тогда
	//				
	//				МероприятиеОбъект = ЗаписьСостояния.Мероприятие.ПолучитьОбъект();
	//				ДопустимыеПользователи = Новый Массив;
	//				ДопустимыеПользователи.Добавить(МероприятиеОбъект.Организатор);
	//				Если ЗначениеЗаполнено(МероприятиеОбъект.Куратор) Тогда
	//					ДопустимыеПользователи.Добавить(МероприятиеОбъект.Куратор);
	//				КонецЕсли;
	//				ЗабронироватьПомещение(
	//					МероприятиеОбъект.МестоЗанятия,
	//					МероприятиеОбъект.ДатаНачала,
	//					МероприятиеОбъект.ДатаОкончания,
	//					МероприятиеОбъект.Организатор,
	//					МероприятиеОбъект,
	//					ДопустимыеПользователи);
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность брони помещения.
//
// Параметры:
//  МестоЗанятия		 - СправочникСсылка.ТерриторииИПомещения - МестоЗанятия.
//  ДатаНачала		 - Дата									 - Дата, с которой отбираются брони.
//  ДатаОкончания	 - Дата									 - Дата, по которую отбираются брони.
//  ДопустимыеПользователи - Массив - Пользователи, брони которых можно использовать.
//  Предмет			 - СправочникСсылка.Мероприятие			 - Предмет, на основании которого создается бронь.
//  ТекстОшибки		 - Строка								 - Текст ошибки брони помещения.
//  ВременаБезБрони	 - Массив								 - Возвращаемый массив времен без брони.
//  БрониБезСвязи	 - СправочникСсылка.Мероприятие			 - Возвращаемый массив броней без связи.
// 
// Возвращаемое значение:
//  Булево - Бронирование помещения возможно.
//
Функция ВозможнаБроньПомещения(СпортивныйОбъект, МестоЗанятия, ДатаНачала, ДатаОкончания, ДопустимыеПользователи, Предмет,
	ТекстОшибки, ВременаБезБрони = Неопределено, БрониБезСвязи = Неопределено) Экспорт
	
	Если ВременаБезБрони = Неопределено Тогда
		ВременаБезБрони = Новый Массив;
	КонецЕсли;
	
	Если БрониБезСвязи = Неопределено Тогда
		БрониБезСвязи = Новый Массив;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МестоЗанятия)
		Или Не ЗначениеЗаполнено(ДатаНачала)
		Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыПомещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МестоЗанятия, "ДоступноБронирование, Ответственный");
	Если Не РеквизитыПомещения.ДоступноБронирование Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Если ЕстьБрони(МестоЗанятия, ДатаНачала, ДатаОкончания, ДопустимыеПользователи) Тогда
	//	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'МестоЗанятия %1 уже забронировано другим пользователем.'"),
	//		МестоЗанятия);
	//	Возврат Ложь;
	//КонецЕсли;
	
	ВременаБезБрони = Новый Массив;
	БрониБезСвязи = Новый Массив;
	Если ПроверитьНаличиеБрони(СпортивныйОбъект, МестоЗанятия, ДатаНачала, ДатаОкончания, ДопустимыеПользователи, Предмет,
		ВременаБезБрони, БрониБезСвязи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Если ВременаБезБрони.Количество() <> 0 Тогда
	//	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'МестоЗанятия %1 разрешено бронировать только ответственному за него (%2).'"),
	//		МестоЗанятия,
	//		РеквизитыПомещения.Ответственный);
	//	Возврат Ложь;
	//КонецЕсли;
	
	Для Каждого Бронь Из БрониБезСвязи Цикл
		Если ЗначениеЗаполнено(Бронь.Предмет) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'МестоЗанятия %1 уже забронировано для %2.'"),
				МестоЗанятия,
				Бронь.Предмет);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает отображаемые территории, получая данные из дерева территорий.
//
// Параметры:
//  Дерево - ДеревоЗначений - Дерево территорий, из которого берутся данные об отображаемых территориях.
//
// Возвращаемое значение:
//  Массив - Отображаемые территории.
//
Функция ОтображаемыеТерриторииИзДереваТерриторий(Дерево) Экспорт
	
	//ОтображаемыеТерритории = Новый Массив;
	//
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("ОтображатьТерриторию", Истина);
	//НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина); 
	//Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//	ОтображаемыеТерритории.Добавить(НайденнаяСтрока.Ссылка);
	//КонецЦикла;
	//
	//Возврат ОтображаемыеТерритории;
	
КонецФункции

// Устанавливает условное оформление территорий на форме.
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформлениеКомпоновкиДанных	 - Содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеТерритории(УсловноеОформление) Экспорт
	
	//// Помеченные на удаление элементы.
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//Поля = Элемент.Поля.Элементы;
	//Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииНаименование");
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ПометкаУдаления");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра(
	//	"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	//
	//// Доступные для бронирования территории.
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//Поля = Элемент.Поля.Элементы;
	//Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииНаименование");
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ДоступноБронирование");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра(
	//	"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));

	//// Помеченные на удаление доступные для бронирования территории.
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//Поля = Элемент.Поля.Элементы;
	//Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииНаименование");
	//
	//ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//
	//ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ПометкаУдаления");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ДоступноБронирование");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра(
	//	"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, , , Истина));
	//
	//// Гиперссылка схемы территории.
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//Поля = Элемент.Поля.Элементы;
	//Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииДоступнаСхема");
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ДоступнаСхема");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Формирует форматированное представление помещения.
//
// Параметры:
//  Наименование - Строка - Наименование помещения.
//  Вместимость - Число - Вместимость помещения.
//  Родитель - Строка - Представление территории верхнего уровня.
//  СловаПоиска - Массив - Слова поиска, которые необходимо выделить.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Форматированное представление помещения.
//
Функция ФорматированноеПредставлениеПомещения(Наименование, Вместимость, Родитель, СловаПоиска = Неопределено) Экспорт
	
	//Если СловаПоиска = Неопределено Тогда
	//	СловаПоиска = Новый Массив;
	//КонецЕсли;
	//
	//ПредставлениеПомещения = Новый Массив;
	//ПредставлениеПомещения.Добавить(Наименование);
	//
	//// Выделяем найденные слова поиска.
	//Для Каждого СловоПоиска Из СловаПоиска Цикл
	//	
	//	ДлинаСловаПоиска = СтрДлина(СловоПоиска);
	//	
	//	НовоеПредставлениеПомещения = Новый Массив;
	//	НайденоСловоПоиска = Ложь;
	//	Для Каждого СловоПредставления Из ПредставлениеПомещения Цикл
	//		
	//		Если НайденоСловоПоиска Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ТипЗнч(СловоПредставления) = Тип("ФорматированнаяСтрока") Тогда
	//			НовоеПредставлениеПомещения.Добавить(СловоПредставления);
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ПозицияСловаПоиска = СтрНайти(СловоПредставления, СловоПоиска);
	//		Если ПозицияСловаПоиска = 0 Тогда
	//			НовоеПредставлениеПомещения.Добавить(СловоПредставления);
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		НовоеПредставлениеПомещения.Добавить(Лев(СловоПредставления, ПозицияСловаПоиска - 1));
	//		НовоеПредставлениеПомещения.Добавить(Новый ФорматированнаяСтрока(СловоПоиска,
	//			ШрифтыСтиля.ВыделениеТекстаВСпискеВыбораШрифт,
	//			ЦветаСтиля.ВыделениеТекстаВСпискеВыбораЦвет));
	//		НовоеПредставлениеПомещения.Добавить(Сред(СловоПредставления, ПозицияСловаПоиска + ДлинаСловаПоиска));
	//		
	//	КонецЦикла;
	//	ПредставлениеПомещения = НовоеПредставлениеПомещения;
	//	
	//КонецЦикла;
	//
	//// Добавляем описание вместимости.
	//Если ЗначениеЗаполнено(Вместимость) Тогда
	//	ПодписьЧеловек = НСтр("ru = 'чел.'");
	//	ПредставлениеВместимости = СтрШаблон(", %1 %2", Вместимость, ПодписьЧеловек);
	//	ПредставлениеПомещения.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВместимости, ,
	//		ЦветаСтиля.ВспомогательныйТекстТерриторий));
	//КонецЕсли;
	//
	//// Добавление описание территории верхнего уровня.
	//Если ЗначениеЗаполнено(Родитель) Тогда
	//	ПредставлениеРодитель = СтрШаблон(", %1", Родитель);
	//	ПредставлениеПомещения.Добавить(Новый ФорматированнаяСтрока(ПредставлениеРодитель, ,
	//		ЦветаСтиля.ВспомогательныйТекстТерриторий));
	//КонецЕсли;
	//
	//Возврат Новый ФорматированнаяСтрока(ПредставлениеПомещения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает пустую таблицу броней.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица броней.
//
Функция СформироватьТаблицуБроней()
	
	ТаблицаБроней = Новый ТаблицаЗначений;
	
	ТаблицаБроней.Колонки.Добавить(
		"Ссылка", Новый ОписаниеТипов("ДокументСсылка.БроньСпортивногоОбъекта"));
	ТаблицаБроней.Колонки.Добавить(
		"ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаБроней.Колонки.Добавить(
		"ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаБроней.Колонки.Добавить(
		"ВесьДень", Новый ОписаниеТипов("Булево"));
	ТаблицаБроней.Колонки.Добавить(
		"ТипЗаписи", Новый ОписаниеТипов("ПеречислениеСсылка.ТипЗаписиКалендаря"));
	ТаблицаБроней.Колонки.Добавить(
		"СпортивныйОбъект", Новый ОписаниеТипов("СправочникСсылка.СпортивныеОбъекты"));
	ТаблицаБроней.Колонки.Добавить(
		"МестоЗанятия", Новый ОписаниеТипов("СправочникСсылка.МестаЗанятий"));
	ТаблицаБроней.Колонки.Добавить(
		"ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ТаблицаБроней.Колонки.Добавить(
		"ВидСпорта", Новый ОписаниеТипов("СправочникСсылка.ВидыСпорта"));
	ТаблицаБроней.Колонки.Добавить(
		"ВидСпортаПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаБроней.Колонки.Добавить(
		"Тренер", Новый ОписаниеТипов("СправочникСсылка.Тренеры"));
	ТаблицаБроней.Колонки.Добавить(
		"ТренерПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаБроней.Колонки.Добавить(
		"Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыСпортивнойПодготовки"));
	ТаблицаБроней.Колонки.Добавить(
		"ЭтапПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаБроней.Колонки.Добавить(
		"Зеленый", Новый ОписаниеТипов("Число"));
	ТаблицаБроней.Колонки.Добавить(
		"Красный", Новый ОписаниеТипов("Число"));
	ТаблицаБроней.Колонки.Добавить(
		"Синий", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаБроней;
	
КонецФункции

// Заполняет таблицу броней данными о бронях.
//
// Параметры:
//  ТаблицаБроней			 - ТаблицаЗначений	 - Таблица броней.
//  НастройкаОтбораБроней	 - Структура		 - Настройки отбора броней.
//
Процедура ЗаполнитьТаблицуБронями(ТаблицаБроней, НастройкаОтбораБроней)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БроньСпортивногоОбъекта.Ссылка КАК Ссылка,
		|	БроньСпортивногоОбъекта.ДатаНачала КАК ДатаНачала,
		|	БроньСпортивногоОбъекта.ДатаОкончания КАК ДатаОкончания,
		|	БроньСпортивногоОбъекта.ВесьДень КАК ВесьДень,
		|	БроньСпортивногоОбъекта.ТипЗаписи КАК ТипЗаписи,
		|	БроньСпортивногоОбъекта.МестоЗанятия КАК МестоЗанятия,
		|	БроньСпортивногоОбъекта.ПометкаУдаления КАК ПометкаУдаления,
		|	БроньСпортивногоОбъекта.ВидСпорта КАК ВидСпорта,
		|	БроньСпортивногоОбъекта.ВидСпорта.Представление КАК ВидСпортаПредставление,
		|	БроньСпортивногоОбъекта.Тренер КАК Тренер,
		|	БроньСпортивногоОбъекта.Тренер.Представление КАК ТренерПредставление,
		|	БроньСпортивногоОбъекта.Этап КАК Этап,
		|	БроньСпортивногоОбъекта.Этап.Представление КАК ЭтапПредставление,
		|	БроньСпортивногоОбъекта.Зеленый КАК Зеленый,
		|	БроньСпортивногоОбъекта.Красный КАК Красный,
		|	БроньСпортивногоОбъекта.Синий КАК Синий
		|ИЗ
		|	Документ.БроньСпортивногоОбъекта КАК БроньСпортивногоОбъекта
		|ГДЕ
		|	БроньСпортивногоОбъекта.ДатаНачала < &ДатаОкончания
		|	И БроньСпортивногоОбъекта.ДатаОкончания > &ДатаНачала
		|	И БроньСпортивногоОбъекта.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ
		|	И БроньСпортивногоОбъекта.СпортивныйОбъект = &СпортивныйОбъект
		|	И БроньСпортивногоОбъекта.Проведен = ИСТИНА
		// {Рарус adilas #21302 -Места занятий 2021.10.14
		// Убираем видимость объектов недоступных для бронирования
		|   %1
		|	И БроньСпортивногоОбъекта.МестоЗанятия.ДоступноБронирование = ИСТИНА";
		// }Рарус adilas #21302 -Места занятий 2021.10.14
		
	Если ЗначениеЗаполнено(НастройкаОтбораБроней.МестоЗанятия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", " И БроньСпортивногоОбъекта.МестоЗанятия = &МестоЗанятия");
		Запрос.УстановитьПараметр("МестоЗанятия", НастройкаОтбораБроней.МестоЗанятия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
	КонецЕсли;
	//
	//Если ЗначениеЗаполнено(НастройкаОтбораБроней.Тренер) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", " И БроньСпортивногоОбъекта.Тренер = &Тренер");
	//	Запрос.УстановитьПараметр("Тренер", НастройкаОтбораБроней.Тренер);
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", "");
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаОтбораБроней.ДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БроньСпортивногоОбъекта.ДатаНачала < &ДатаОкончания", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.ПоказыватьУдаленные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СпортивныйОбъект", НастройкаОтбораБроней.СпортивныйОбъект);
	Запрос.УстановитьПараметр("ДатаНачала", НастройкаОтбораБроней.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", НастройкаОтбораБроней.ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	                                                       
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаБроней.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу броней данными о повторяющихся бронях.
//
// Параметры:
//  ТаблицаБроней - ТаблицаЗначений - Возвращаемый параметр. Таблица броней.
//  НастройкаОтбораБроней - Структура - Настройки отбора броней.
//
Процедура ЗаполнитьТаблицуПовторяющимисяБронями(ТаблицаБроней, НастройкаОтбораБроней)
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПовторяющихсяСобытий(НастройкаОтбораБроней);
	Выборка = РезультатЗапроса.Выбрать();
	
	РаботаСРабочимКалендаремСервер.ЗаполнитьТаблицуПовторяющимисяСобытиями(ТаблицаБроней,
		Выборка, НастройкаОтбораБроней.ДатаНачала, НастройкаОтбораБроней.ДатаОкончания);
	
КонецПроцедуры

// Возвращает результат запроса повторяющихся событий.
//
// Параметры:
//  НастройкаОтбораБроней	 - Структура - Настройки отбора броней.
// 
// Возвращаемое значение:
//  РезультатЗапроса - Результат запроса повторяющихся событий.
//
Функция ПолучитьРезультатЗапросаПовторяющихсяСобытий(НастройкаОтбораБроней)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БроньСпортивногоОбъекта.Ссылка КАК Ссылка,
		|	БроньСпортивногоОбъекта.ДатаНачала КАК ДатаНачала,
		|	БроньСпортивногоОбъекта.ДатаОкончания КАК ДатаОкончания,
		|	БроньСпортивногоОбъекта.ВесьДень КАК ВесьДень,
		|	БроньСпортивногоОбъекта.ТипЗаписи КАК ТипЗаписи,
		|	БроньСпортивногоОбъекта.МестоЗанятия КАК МестоЗанятия,
		|	БроньСпортивногоОбъекта.ПометкаУдаления КАК ПометкаУдаления,
		|	БроньСпортивногоОбъекта.ВидСпорта КАК ВидСпорта,
		|	БроньСпортивногоОбъекта.ВидСпорта.Представление КАК ВидСпортаПредставление,
		|	БроньСпортивногоОбъекта.Тренер КАК Тренер,
		|	БроньСпортивногоОбъекта.Тренер.Представление КАК ТренерПредставление,
		|	БроньСпортивногоОбъекта.Этап КАК Этап,
		|	БроньСпортивногоОбъекта.Этап.Представление КАК ЭтапПредставление,
		|	БроньСпортивногоОбъекта.Зеленый КАК Зеленый,
		|	БроньСпортивногоОбъекта.Красный КАК Красный,
		|	БроньСпортивногоОбъекта.Синий КАК Синий,
		|	БроньСпортивногоОбъекта.ИсключенияПовторения.(
		|		ДатаИсключения КАК ДатаИсключения,
		|		ЗаписьИсключения КАК ЗаписьИсключения
		|	) КАК ИсключенияПовторения,
		|	БроньСпортивногоОбъекта.ПовторениеПоДням.(
		|		ДеньНедели КАК ДеньНедели,
		|		НомерВхождения КАК НомерВхождения
		|	) КАК ПовторениеПоДням,
		|	БроньСпортивногоОбъекта.ДатаНачалаПовторения КАК ДатаНачалаПовторения,
		|	БроньСпортивногоОбъекта.ДатаОкончанияПовторения КАК ДатаОкончанияПовторения,
		|	БроньСпортивногоОбъекта.ИнтервалПовторения КАК ИнтервалПовторения,
		|	БроньСпортивногоОбъекта.КоличествоПовторов КАК КоличествоПовторов,
		|	БроньСпортивногоОбъекта.ПовторениеПоДнямМесяца КАК ПовторениеПоДнямМесяца,
		|	БроньСпортивногоОбъекта.ПовторениеПоМесяцам КАК ПовторениеПоМесяцам,
		|	БроньСпортивногоОбъекта.ЧастотаПовторения КАК ЧастотаПовторения
		|ИЗ
		|	Документ.БроньСпортивногоОбъекта КАК БроньСпортивногоОбъекта
		|ГДЕ
		|	БроньСпортивногоОбъекта.ДатаНачалаПовторения < &ДатаОкончания
		|	И БроньСпортивногоОбъекта.ДатаОкончанияПовторения >= &ДатаНачала
		|	И БроньСпортивногоОбъекта.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ
		|	И БроньСпортивногоОбъекта.СпортивныйОбъект = &СпортивныйОбъект
		|	И БроньСпортивногоОбъекта.Проведен = ИСТИНА
		|   %1
		// {Рарус adilas #21302 -Места занятий 2021.10.14
		// Убираем видимость объектов недоступных для бронирования
		|	И БроньСпортивногоОбъекта.МестоЗанятия.ДоступноБронирование = ИСТИНА
		// }Рарус adilas #21302 -Места занятий 2021.10.14
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БроньСпортивногоОбъекта.Ссылка,
		|	БроньСпортивногоОбъекта.ДатаНачала,
		|	БроньСпортивногоОбъекта.ДатаОкончания,
		|	БроньСпортивногоОбъекта.ВесьДень,
		|	БроньСпортивногоОбъекта.ТипЗаписи,
		|	БроньСпортивногоОбъекта.МестоЗанятия,
		|	БроньСпортивногоОбъекта.ПометкаУдаления,
		|	БроньСпортивногоОбъекта.ВидСпорта,
		|	БроньСпортивногоОбъекта.ВидСпорта.Представление,
		|	БроньСпортивногоОбъекта.Тренер,
		|	БроньСпортивногоОбъекта.Тренер.Представление,
		|	БроньСпортивногоОбъекта.Этап,
		|	БроньСпортивногоОбъекта.Этап.Представление,
		|	БроньСпортивногоОбъекта.Зеленый,
		|	БроньСпортивногоОбъекта.Красный,
		|	БроньСпортивногоОбъекта.Синий,
		|	БроньСпортивногоОбъекта.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	),
		|	БроньСпортивногоОбъекта.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	),
		|	БроньСпортивногоОбъекта.ДатаНачалаПовторения,
		|	БроньСпортивногоОбъекта.ДатаОкончанияПовторения,
		|	БроньСпортивногоОбъекта.ИнтервалПовторения,
		|	БроньСпортивногоОбъекта.КоличествоПовторов,
		|	БроньСпортивногоОбъекта.ПовторениеПоДнямМесяца,
		|	БроньСпортивногоОбъекта.ПовторениеПоМесяцам,
		|	БроньСпортивногоОбъекта.ЧастотаПовторения
		|ИЗ
		|	Документ.БроньСпортивногоОбъекта КАК БроньСпортивногоОбъекта
		|ГДЕ
		|	БроньСпортивногоОбъекта.ДатаНачалаПовторения < &ДатаОкончания
		|	И БроньСпортивногоОбъекта.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
		|	И БроньСпортивногоОбъекта.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ
		|	И БроньСпортивногоОбъекта.СпортивныйОбъект = &СпортивныйОбъект
		|	И БроньСпортивногоОбъекта.Проведен = ИСТИНА
		|   %2
		// {Рарус adilas #21302 -Места занятий 2021.10.14
		|	И БроньСпортивногоОбъекта.МестоЗанятия.ДоступноБронирование = ИСТИНА";
	    // }Рарус adilas #21302 -Места занятий 2021.10.14
		
	Если ЗначениеЗаполнено(НастройкаОтбораБроней.МестоЗанятия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", " И БроньСпортивногоОбъекта.МестоЗанятия = &МестоЗанятия");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", " И БроньСпортивногоОбъекта.МестоЗанятия = &МестоЗанятия");
		Запрос.УстановитьПараметр("МестоЗанятия", НастройкаОтбораБроней.МестоЗанятия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", "");
	КонецЕсли;
	//
	//Если ЗначениеЗаполнено(НастройкаОтбораБроней.Тренер) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%3", " И БроньСпортивногоОбъекта.МестоЗанятия = &Тренер");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%4", " И БроньСпортивногоОбъекта.МестоЗанятия = &Тренер");
	//	Запрос.УстановитьПараметр("Тренер", НастройкаОтбораБроней.Тренер);
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%3", "");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%4", "");
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаОтбораБроней.ДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И БроньСпортивногоОбъекта.ДатаНачалаПовторения < &ДатаОкончания", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.ПоказыватьУдаленные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СпортивныйОбъект", НастройкаОтбораБроней.СпортивныйОбъект);
	Запрос.УстановитьПараметр("ДатаНачала", НастройкаОтбораБроней.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", НастройкаОтбораБроней.ДатаОкончания);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет пересечение с повторяющимся событием.
//
// Параметры:
//  ДанныеПовторяющейсяБрони - ДанныеФормыСтруктура	 - Данные повторяющейся брони.
//  ДанныеБрони				 - СтрокаТаблицыЗначений - Данные брони.
// 
// Возвращаемое значение:
//  Булево - Признак того что брони пересекаются.
//
Функция БрониПересекаются(ДанныеПовторяющейсяБрони, ДанныеБрони)
	
	СтруктураПравилаПовторения = РаботаСРабочимКалендаремСервер.ПолучитьСтруктуруПравилаПовторения();
	ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, ДанныеПовторяющейсяБрони);
	СтруктураПравилаПовторения.ИсключенияПовторения = ДанныеПовторяющейсяБрони.ИсключенияПовторения.Выгрузить();
	СтруктураПравилаПовторения.ПовторениеПоДням = ДанныеПовторяющейсяБрони.ПовторениеПоДням.Выгрузить();
	
	Если ДанныеБрони.ТипЗаписи <> Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		// Бронь
		ДатаНачала = ДанныеБрони.ДатаНачала;
		ДатаОкончания = ДанныеБрони.ДатаОкончания;
		
		ПроверяемаяДата = НачалоДня(ДатаНачала);
		Пока ПроверяемаяДата < ДатаОкончания Цикл
			
			Если РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
				ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
				
				ДатаНачалаЭлементаПовторения = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаНачала - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				ДатаОкончанияЭлементаПовторения = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаОкончания - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				
				Если ДатаНачала < ДатаОкончанияЭлементаПовторения И ДатаОкончания > ДатаНачалаЭлементаПовторения Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
	Иначе
		
		// Повторяющаяся бронь
		
		// Пересечение дат повторения
		Если Не ((ДанныеБрони.ДатаНачалаПовторения < ДанныеПовторяющейсяБрони.ДатаОкончанияПовторения
				Или Не ЗначениеЗаполнено(ДанныеПовторяющейсяБрони.ДатаОкончанияПовторения))
			И (ДанныеБрони.ДатаОкончанияПовторения > ДанныеПовторяющейсяБрони.ДатаНачалаПовторения)
				Или Не ЗначениеЗаполнено(ДанныеБрони.ДатаОкончанияПовторения)) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Пересечение времен
		ВремяНачалаПовторяющегося =
			ДанныеПовторяющейсяБрони.ДатаНачала - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала);
		ВремяОкончанияПовторяющегося =
			ДанныеПовторяющейсяБрони.ДатаОкончания - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала);
		ВремяНачалаПроверяемого =
			ДанныеБрони.ДатаНачала - НачалоДня(ДанныеБрони.ДатаНачала);
		ВремяОкончанияПроверяемого =
			ДанныеБрони.ДатаОкончания - НачалоДня(ДанныеБрони.ДатаНачала);
		ЗанимаютВесьДень =
			((ВремяОкончанияПовторяющегося - ВремяНачалаПовторяющегося) >= 86400)
			Или ((ВремяОкончанияПроверяемого - ВремяНачалаПроверяемого) >= 86400);
		ПересекаютсяВремена = (ВремяНачалаПроверяемого < ВремяОкончанияПовторяющегося
			И ВремяОкончанияПроверяемого > ВремяНачалаПовторяющегося);
		Если Не (ЗанимаютВесьДень Или ПересекаютсяВремена) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Пересечение по конкретным датам
		ГоризонтПланирования = 94608000; // 3 года - 3*365*86400
		ДатаНачала = Макс(ДанныеПовторяющейсяБрони.ДатаНачалаПовторения, ДанныеБрони.ДатаНачалаПовторения);
		ДатаОкончания = Мин(ДанныеПовторяющейсяБрони.ДатаОкончанияПовторения, ДанныеБрони.ДатаОкончанияПовторения);
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = ДатаНачала + ГоризонтПланирования;
		КонецЕсли;
		ПроверяемаяДата = НачалоДня(ДатаНачала);
		Пока ПроверяемаяДата < ДатаОкончания Цикл
			
			СтруктураПравилаПроверяемого = РаботаСРабочимКалендаремСервер.ПолучитьСтруктуруПравилаПовторения();
			ЗаполнитьЗначенияСвойств(СтруктураПравилаПроверяемого, ДанныеБрони);
			СтруктураПравилаПроверяемого.ИсключенияПовторения = ДанныеБрони.ИсключенияПовторения.Выгрузить();
			СтруктураПравилаПроверяемого.ПовторениеПоДням = ДанныеБрони.ПовторениеПоДням.Выгрузить();
			
			Если РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
				И РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПроверяемого) Тогда
				
				ДатаНачалаПовторяющегося = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаНачала - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				ДатаОкончанияПовторяющегося = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаОкончания - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				ДатаНачалаПроверяемого = НачалоДня(ПроверяемаяДата)
					+ (ДанныеБрони.ДатаНачала - НачалоДня(ДанныеБрони.ДатаНачала));
				ДатаОкончанияПроверяемого = НачалоДня(ПроверяемаяДата)
					+ (ДанныеБрони.ДатаОкончания - НачалоДня(ДанныеБрони.ДатаНачала));
				
				Если ДатаНачалаПроверяемого < ДатаОкончанияПовторяющегося И ДатаОкончанияПроверяемого > ДатаНачалаПовторяющегося Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает массив помещений из параметра помещения.
//
// Параметры:
//  ПараметрМестоЗанятия	 - Массив, СправочникСсылка.ТерриторииИПомещения - МестоЗанятия, по которому необходимы брони.
// 
// Возвращаемое значение:
//  Массив - Массив помещений.
//
Функция ПолучитьМассивСпортивныхОбъектов(ПараметрСпортивныйОбъект)
	
	//Если ТипЗнч(ПараметрСпортивныйОбъект) = Тип("Массив") Тогда
	//	МассивСпортивныхОбъектов = ПараметрСпортивныйОбъект;
	//ИначеЕсли ТипЗнч(ПараметрСпортивныйОбъект) = Тип("СправочникСсылка.СпортивныеОбъекты") Тогда
	//	МассивСпортивныхОбъектов = Новый Массив;
	//	МассивСпортивныхОбъектов.Добавить(ПараметрСпортивныйОбъект);
	//Иначе
	//	МассивСпортивныхОбъектов = Новый Массив;
	//КонецЕсли;
	//
	//Возврат МассивСпортивныхОбъектов;
	
КонецФункции

// Устанавливает настройки отображения планировщика в соответствии с персональными настройками.
//
// Параметры:
//  Планировщик	 - Планировщик	 - Планировщик.
//
Процедура УстановитьНастройкиОтображения(Планировщик)

	Планировщик.ТипТекстаНовыхЭлементов = ТипТекстаНовыхЭлементовПланировщика.Строка;
	Планировщик.ОтображатьТекущуюДату = Истина;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	Планировщик.ОтступСНачалаПереносаШкалыВремени = ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
	Планировщик.ОтступСКонцаПереносаШкалыВремени = ПолучитьПерсональнуюНастройку("ОтображатьВремяПо");
	Планировщик.ЕдиницаПериодическогоВарианта   = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	Планировщик.ПоведениеЭлементовПриНедостаткеМеста = ПоведениеЭлементовПланировщикаПриНедостаткеМеста.ОтображатьВсеЭлементы;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ддд - д.ММ'";
	Планировщик.ФиксироватьЗаголовокИзмерений = Истина;
	Планировщик.ФиксироватьЗаголовокШкалыВремени = Истина;
	Планировщик.ЦветФона = ЦветаСтиля.ЗаголовокКалендаряБроньФон;
	//Планировщик.ЦветТекста = ЦветаСтиля.ЗаголовокКалендаряБроньЦветТекста;
	Планировщик.ЦветТекста = ЦветаСтиля.ЗаголовокКалендаряБроньЦветТекста;
	Планировщик.Шрифт = ШрифтыСтиля.ЗаголовокКалендаряБроньШрифт;
	
КонецПроцедуры

// Устанавливает измерения планировщика в соответствии с персональными настройками.
//
// Параметры:
//  Планировщик				 - Планировщик	 - Планировщик.
//  ОтображаемыеПомещения	 - Массив		 - Отображаемые в планировщике помещения.
//
Процедура УстановитьИзмеренияПланировщика(Планировщик, тзТренеры, тзМестаЗанятий)
	
	// {Рарус adilas #16045 -Сворачиваемые группировки в расписании 2021.05.07
	Планировщик.Измерения.Очистить();
	ИзмерениеПланировщикаТренер = Планировщик.Измерения.Добавить("Тренер, инструктор по спорту");
	//ИзмерениеПланировщикаМестоЗанятия = Планировщик.Измерения.Добавить("Места занятий");	
	Если НЕ тзТренеры.Количество() = 0 Тогда
		//ЭлементИзмеренияТренер = ИзмерениеПланировщикаТренер.Элементы.Добавить("Тренер");
		//ЭлементИзмеренияТренер.ОтображатьОбластьЭлементовТолькоДляПодчиненных = Истина;
	
		Для Каждого СтрокаТренер Из тзТренеры Цикл
			
			Тренер = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтрокаТренер.ТренерПредставление); 
			
			ЭлементЭлементаИзмеренияТренер = ИзмерениеПланировщикаТренер.Элементы.Добавить(СтрокаТренер.Тренер);
			ЭлементЭлементаИзмеренияТренер.Текст = Тренер;
			ЭлементЭлементаИзмеренияТренер.ОтображатьОбластьЭлементовТолькоДляПодчиненных = Истина;
			
			УИДТренер = СтрокаТренер.Тренер.УникальныйИдентификатор();
			УИДУИДТренерСтрока = Строка(УИДТренер);
			
			Если НЕ тзМестаЗанятий.Количество() = 0 Тогда	
				//ЭлементИзмеренияМестоЗанятия = ИзмерениеПланировщикаМестоЗанятия.Элементы.Добавить("Место занятия");
				//ЭлементИзмеренияМестоЗанятия.ОтображатьОбластьЭлементовТолькоДляПодчиненных = Истина;
				Для каждого СтрокаМестоЗанятия Из тзМестаЗанятий Цикл
					
					УИДМестоЗанятий = СтрокаМестоЗанятия.МестаЗанятий.УникальныйИдентификатор();
					УИДМестоЗанятийСтрока = Строка(УИДМестоЗанятий);
					ЭлементМестоЗанятия =  УИДМестоЗанятийСтрока + "(-)" + УИДУИДТренерСтрока;
					
					ЭлементЭлементаИзмеренияМестоЗанятия = ЭлементЭлементаИзмеренияТренер.Элементы.Добавить(ЭлементМестоЗанятия);
					ЭлементЭлементаИзмеренияМестоЗанятия.Текст = СтрокаМестоЗанятия.МестаЗанятийПредставление;
					ЭлементЭлементаИзмеренияМестоЗанятия.ОтображатьОбластьЭлементовТолькоДляПодчиненных = Истина;
					
				КонецЦикла;	
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
	// }Рарус adilas #16045 -Сворачиваемые группировки в расписании 2021.05.07
	
КонецПроцедуры

// Устанавливает шкалу времени планировщика в соответствии с персональными настройками.
//
// Параметры:
//  Планировщик			 - Планировщик	 - Планировщик.
//  РазмерЯчейкиВремени	 - Число		 - Периодичность при перетаскивании.
//
Процедура УстановитьШкалуВремени(Планировщик, РазмерЯчейкиВремени)
	
	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
		Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
	КонецЦикла;
	
	ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
	ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
	ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
	ШкалаВремениЧас.Кратность = 1;
	ШкалаВремениЧас.Формат = "ДФ=HH:mm";
	ШкалаВремениЧас.ЦветФона = ЦветаСтиля.ЗаголовокКалендаряБроньФон;
	ШкалаВремениЧас.ЦветТекста = ЦветаСтиля.ЗаголовокКалендаряБроньЦветТекста;
	
	ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
	ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
	ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
	ШкалаВремениМинута.Кратность = РазмерЯчейкиВремени;
	ШкалаВремениМинута.Формат = "";
	ШкалаВремениМинута.ЦветФона = ЦветаСтиля.ЗаголовокКалендаряБроньФон;
	ШкалаВремениМинута.ЦветТекста = ЦветаСтиля.ЗаголовокКалендаряБроньЦветТекста;
	
КонецПроцедуры

// Устанавливает значение измерения элемента планировщика.
//
// Параметры:
//  Элемент				 - ЭлементПланировщика	 - Элемент планировщика.
//  Измерение			 - Любой				 - Измерение планировщика.
//  ЗначениеИзмерения	 - Любой				 - Значение измерения планировщика.
//
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)
	
	//СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");
	//
	//СоответствиеИзмерений = Новый Соответствие();
	//СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	//СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);
	//
	//Элемент.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

// Удаляет бронь исключение из таблицы броней.
//
Процедура УдалитьБроньИсключение(ТаблицаБроней, БроньИсключение, ДатаИсключения)
	
	Если Не ЗначениеЗаполнено(БроньИсключение) Или Не ЗначениеЗаполнено(ДатаИсключения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Ссылка", БроньИсключение);
	СтрокиБроней = ТаблицаБроней.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаБрони Из СтрокиБроней Цикл
		Если НачалоДня(СтрокаБрони.ДатаНачала) <> НачалоДня(ДатаИсключения) Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаБроней.Удалить(СтрокаБрони);
	КонецЦикла;
	
КонецПроцедуры

// Вносит занятость в таблицу занятости.
//
Процедура ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Занят,
	Знач ДатаНачала, Знач ДатаОкончания, ДатаНачалаТаблицы, ДатаОкончанияТаблицы)
	
	Если ДатаОкончания <= ДатаНачалаТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончанияТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала < ДатаНачалаТаблицы Тогда
		ДатаНачала = ДатаНачалаТаблицы;
	КонецЕсли;
	
	Если ДатаОкончания > ДатаОкончанияТаблицы Тогда
		ДатаОкончания = ДатаОкончанияТаблицы;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	
	ЗаписьВнесенаВТаблице = Ложь;
	Для Каждого СтрокаЗанятости Из ТаблицаЗанятости Цикл
		
		// Разбиваем существующие строки занятости
		Если СтрокаЗанятости.ДатаНачала < ДатаОкончания
			И СтрокаЗанятости.ДатаОкончания > ДатаНачала
			И СтрокаЗанятости.Занят <> Занят Тогда
			
			Если СтрокаЗанятости.ДатаНачала < ДатаНачала Тогда
				СтрокаЗанятостиПерваяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиПерваяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиПерваяЧасть.ДатаОкончания = ДатаНачала;
			КонецЕсли;
			
			Если СтрокаЗанятости.ДатаОкончания > ДатаОкончания Тогда
				СтрокаЗанятостиВтораяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиВтораяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиВтораяЧасть.ДатаНачала = ДатаОкончания;
			КонецЕсли;
			
			СтрокиКУдалению.Добавить(СтрокаЗанятости);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗанятости.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Занят;
	
	СкорректироватьТаблицуЗанятости(ТаблицаЗанятости);
	
КонецПроцедуры

// Корректирует дубли и пересечение в таблице занятости.
//
Процедура СкорректироватьТаблицуЗанятости(ТаблицаЗанятости)
	
	ТребуетсяВнестиКоррективы = Истина;
	
	Пока ТребуетсяВнестиКоррективы Цикл
		
		ТребуетсяВнестиКоррективы = Ложь;
		
		ТаблицаЗанятостиКопия = ТаблицаЗанятости.Скопировать();
		
		ТаблицаЗанятости.Очистить();
		
		Для Каждого СтрокаЗанятости Из ТаблицаЗанятостиКопия Цикл
			
			ВнестиЗаписьВТаблицуЗанятости = Истина;
			
			Для Каждого ВнесеннаяСтрокаЗанятости Из ТаблицаЗанятости Цикл
				
				Если ЗанятостиСовпадают(СтрокаЗанятости, ВнесеннаяСтрокаЗанятости) Тогда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;
				
				Если СтрокаЗанятости.ДатаНачала <= ВнесеннаяСтрокаЗанятости.ДатаОкончания
					И СтрокаЗанятости.ДатаОкончания >= ВнесеннаяСтрокаЗанятости.ДатаНачала
					И СтрокаЗанятости.Занят = ВнесеннаяСтрокаЗанятости.Занят Тогда
					
					ВнесеннаяСтрокаЗанятости.ДатаНачала = Мин(
						ВнесеннаяСтрокаЗанятости.ДатаНачала, СтрокаЗанятости.ДатаНачала);
					ВнесеннаяСтрокаЗанятости.ДатаОкончания = Макс(
						ВнесеннаяСтрокаЗанятости.ДатаОкончания, СтрокаЗанятости.ДатаОкончания);
					
					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВнестиЗаписьВТаблицуЗанятости Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗанятости);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗанятости.Сортировать("ДатаНачала");
	
КонецПроцедуры

// Проверяет совпадение строк занятости.
//
Функция ЗанятостиСовпадают(Занятость1, Занятость2)
	
	Возврат Занятость1.ДатаНачала = Занятость2.ДатаНачала
		И Занятость1.ДатаОкончания = Занятость2.ДатаОкончания
		И Занятость1.Занят = Занятость2.Занят;
	
КонецФункции

// Формирует текстовое представление рекомендации
//
Функция ПолучитьРекомендациюСтрокой(РекомендацияДатаНачала, РекомендацияДатаОкончания)
	
	//МестнаяДатаНачала = РекомендацияДатаНачала;
	//МестнаяДатаОкончания = РекомендацияДатаОкончания;
	//ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
	//
	//РекомендацияСтрокой = Формат(МестнаяДатаНачала, "ДФ='ддд, д ММММ ЧЧ:мм'");
	//
	//Если НачалоДня(МестнаяДатаНачала) - НачалоДня(МестнаяДатаОкончания) <> 0 Тогда
	//	ФорматДатыОкончания = "ДФ='ддд, дд ММММ гггг ЧЧ:мм'";
	//Иначе
	//	ФорматДатыОкончания = "ДФ=ЧЧ:мм";
	//КонецЕсли;
	//ДобавитьЗначениеКСтрокеЧерезРазделитель(
	//	РекомендацияСтрокой, " - ", Формат(МестнаяДатаОкончания, ФорматДатыОкончания));
	//
	//Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
	//	РекомендацияСтрокой = РекомендацияСтрокой + " " + ПредставлениеМестногоЧасовогоПояса;
	//КонецЕсли;
	//
	//Возврат РекомендацияСтрокой;
	
КонецФункции

// Возвращает массив помещений на переданных территориях.
//
// Параметры:
//  Территории - Массив - Территории.
//
// Возвращаемое значение:
//  Массив - Помещения территорий.
//
Функция ПолучитьСпортивныеОбъекты(СпортивныйОбъект)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	СпортивныеОбъекты.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.СпортивныеОбъекты КАК СпортивныеОбъекты
	//	|ГДЕ
	//	|	СпортивныеОбъекты.Владелец = &Организация
	//	|	И СпортивныеОбъекты.Ссылка = &СпортивныйОбъект
	//	|	И СпортивныеОбъекты.ПометкаУдаления = ЛОЖЬ";
	//
	//Запрос.УстановитьПараметр("Организация", ПараметрыСеанса.ТекущаяОрганизация);
	//Запрос.УстановитьПараметр("СпортивныйОбъект", ПараметрыСеанса.СпортивныйОбъект);

	//Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает отображаемые помещения. Отображаемыми помещениями являются помещения на переданной
// территории. Если территории не переданы, или на них нет помещений - будут отображаться последние помещения.
//
// Параметры:
//  Расположение - Массив - Необходимое расположение.
//  Вместимость - Число - Необходимая вместимость.
//
// Возвращаемое значение:
//  Массив - Отображаемые помещения.
//
Функция ПолучитьОтображаемыеСпортивныеОбъекты(СпортивныйОбъект)
	
	//ОтображаемыеСпортивныеОбъекты = Новый Массив;
	//
	//ТаблицаСпортивныхОбъектов = ПолучитьСпортивныеОбъекты(СпортивныйОбъект);
	//
	//// Отбор по вместимости.
	//Для Каждого СпортивныйОбъект Из ТаблицаСпортивныхОбъектов Цикл
	//	ОтображаемыеСпортивныеОбъекты.Добавить(СпортивныйОбъект.Ссылка);
	//КонецЦикла;
	//
	//Возврат ОтображаемыеСпортивныеОбъекты;
	
КонецФункции

// Возвращает отображаемые брони.
//
// Параметры:
//  ОтображаемаяДатаНачала - Дата - Дата начала отображения.
//  ОтображаемаяДатаОкончания - Дата - Дата окончания отображения.
//  ОтображаемыеПомещения - Массив - Отображаемые брони.
//
// Возвращаемое значение:
//  Массив - Отображаемые брони.
//
Функция ПолучитьОтображаемыеБрони(
	ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ОтображаемыйСпортивныйОбъект) Экспорт
	
	ПоказыватьУдаленные = ПолучитьПерсональнуюНастройку("ПоказыватьУдаленные");
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		ОтображаемыйСпортивныйОбъект, , , ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПоказыватьУдаленные);
	
	Возврат ПолучитьБрони(НастройкаОтбораБроней);
	
КонецФункции

// Проверяет наличие броней на указанное время.
//
// Параметры:
//  МестоЗанятия - СправочникСсылка.ТерриторииИПомещения - МестоЗанятия.
//  ДатаНачала - Дата - Дата, с которой отбираются брони.
//  ДатаОкончания - Дата - Дата, по которую отбираются брони.
//  ПользователиИсключение - Массив - Пользователи, брони которых не учитываются.
//
// Возвращаемое значение:
//  Булево - Наличие броней.
//
Функция ЕстьБрони(СпортивныйОбъект, МестоЗанятия, ДатаНачала, ДатаОкончания, ПользователиИсключение)
	
	Если Не ЗначениеЗаполнено(МестоЗанятия)
		Или Не ЗначениеЗаполнено(ДатаНачала)
		Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		СпортивныйОбъект, МестоЗанятия, , ДатаНачала, ДатаОкончания, Ложь);
	ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
	
	Возврат ТаблицаБроней.Количество() <> 0;
	
КонецФункции

// Бронирует МестоЗанятия. При ошибке выполнения бронирования вызывает исключение.
//
// Параметры:
//  МестоЗанятия - СправочникСсылка.ТерриторииИПомещения - МестоЗанятия.
//  ДатаНачала - Дата - Дата, с которой отбираются брони.
//  ДатаОкончания - Дата - Дата, по которую отбираются брони.
//  Пользователь - СправочникСсылка.Пользователь - Пользователь, для которого выполняется бронь.
//  Источник - СправочникОбъект.Мероприятие - Предмет, на основании которого создается бронь.
//  ДопустимыеПользователи - Массив - Пользователи, брони которых можно использовать.
//
Процедура ЗабронироватьПомещение(МестоЗанятия, ДатаНачала, ДатаОкончания, Пользователь, Источник, ДопустимыеПользователи)
	
	//ТекстОшибки = "";
	//ВременаБезБрони = Новый Массив;
	//БрониБезСвязи = Новый Массив;
	//Если Не ВозможнаБроньПомещения(МестоЗанятия, ДатаНачала, ДатаОкончания, ДопустимыеПользователи,
	//	Источник.Ссылка, ТекстОшибки, ВременаБезБрони, БрониБезСвязи) Тогда
	//	// Если явно отключили, то подписка не вызывает исключение.
	//	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьПроверкуПересечениеБроней") Тогда
	//		Возврат;
	//	КонецЕсли;
	//	ВызватьИсключение ТекстОшибки;
	//КонецЕсли;
	//
	//Для Каждого Бронь Из БрониБезСвязи Цикл
	//	УстановитьПредметАвтоматическойБрони(Бронь, Источник.Ссылка);
	//КонецЦикла;
	//
	//Для Каждого Время Из ВременаБезБрони Цикл
	//	СоздатьАвтоматическуюБронь(МестоЗанятия, Время.ДатаНачала, Время.ДатаОкончания, Пользователь, Источник);
	//КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие брони на данное МестоЗанятия у указанного пользователя. Если брони нет,
// то заполняются массивы времен без брони и броней без связи.
//
// Параметры:
//  МестоЗанятия - СправочникСсылка.ТерриторииИПомещения - МестоЗанятия.
//  ДатаНачала - Дата - Дата, с которой отбираются брони.
//  ДатаОкончания - Дата - Дата, по которую отбираются брони.
//  ДопустимыеПользователи - Массив - Пользователи, брони которых можно использовать.
//  Предмет - СправочникСсылка.Мероприятие - Предмет, для которого проверяются связи.
//  ВременаБезБрони - Массив - Возвращаемый массив времен без брони.
//  БрониБезСвязи - СправочникСсылка.Мероприятие - Возвращаемый массив броней без связи.
//
// Возвращаемое значение:
//  Булево - Наличие брони.
//
Функция ПроверитьНаличиеБрони(СпортивныйОбъект, МестоЗанятия, ДатаНачала, ДатаОкончания, ДопустимыеПользователи, Предмет,
	ВременаБезБрони, БрониБезСвязи)
	
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		СпортивныйОбъект, МестоЗанятия, , ДатаНачала, ДатаОкончания, Ложь);
	ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
	ТаблицаБроней.Сортировать("ДатаНачала");
	
	ЕстьБронь = ТаблицаБроней.Количество() <> 0;
	ТекущаяДатаНачала = ДатаНачала;
	Для Каждого Бронь Из ТаблицаБроней Цикл
		
		ДатаНачалаБрони = Макс(ДатаНачала, Бронь.ДатаНачала);
		ДатаОкончанияБрони = Мин(ДатаОкончания, Бронь.ДатаОкончания);
		
		Если ДатаНачалаБрони <> ТекущаяДатаНачала Тогда
			ЕстьБронь = Ложь;
			Время = Новый Структура("ДатаНачала, ДатаОкончания", ТекущаяДатаНачала, ДатаНачалаБрони);
			ВременаБезБрони.Добавить(Время);
		КонецЕсли;
		
		Если Бронь.Предмет <> Предмет Тогда
			ЕстьБронь = Ложь;
			БрониБезСвязи.Добавить(Бронь);
		КонецЕсли;
		
		ТекущаяДатаНачала = ДатаОкончанияБрони;
		
	КонецЦикла;
	
	Если ТекущаяДатаНачала < ДатаОкончания Тогда
		ЕстьБронь = Ложь;
		Время = Новый Структура("ДатаНачала, ДатаОкончания", ТекущаяДатаНачала, ДатаОкончания);
		ВременаБезБрони.Добавить(Время);
	КонецЕсли;
	
	Возврат ЕстьБронь;
	
КонецФункции

// Создает документ бронь и записывает его в базу.
//
// Параметры:
//  МестоЗанятия - СправочникСсылка.ТерриторииИПомещения - МестоЗанятия.
//  ДатаНачала - Дата - Дата начала брони.
//  ДатаОкончания - Дата - Дата окончания брони.
//  Пользователь - СправочникСсылка.Пользователь - Пользователь, для которого предназначена бронь.
//  Источник - СправочникОбъект.Мероприятие - Предмет брони.
//
Процедура СоздатьАвтоматическуюБронь(МестоЗанятия, ДатаНачала, ДатаОкончания, Пользователь, Источник)
	
	//НоваяБронь = Документы.Бронь.СоздатьДокумент();
	//НоваяБронь.Предмет = Источник.Ссылка;
	//НоваяБронь.МестоЗанятия = МестоЗанятия;
	//НоваяБронь.Пользователь = Пользователь;
	//НоваяБронь.ДатаНачала = ДатаНачала;
	//НоваяБронь.ДатаОкончания = ДатаОкончания;
	//НоваяБронь.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru = 'Бронь для мероприятия %1'"), Источник.Наименование);
	//НоваяБронь.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Автоматически;
	//НоваяБронь.Записать();
	
КонецПроцедуры

// Устанавливает предмет брони.
//
// Параметры:
//  Бронь - ДокументОбъект.Бронь - Бронь.
//  Предмет - СправочникСсылка.Мероприятие - Предмет брони.
//
Процедура УстановитьПредметАвтоматическойБрони(Бронь, Предмет)
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
	//	БроньОбъект = Документы.Бронь.СоздатьДокумент();
	//	БроньОбъект.Заполнить(Бронь.Ссылка);
	//	БроньОбъект.ДополнительныеСвойства.Вставить("ПовторяющаясяБронь", Бронь.Ссылка);
	//	БроньОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", Бронь.ДатаНачала);
	//	ЗаполнитьЗначенияСвойств(БроньОбъект, Бронь, "ДатаНачала, ДатаОкончания");
	//Иначе
	//	БроньОбъект = Бронь.Ссылка.ПолучитьОбъект();
	//	БроньОбъект.Заблокировать();
	//КонецЕсли;
	//
	//БроньОбъект.Предмет = Предмет;
	//БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.АвтоматическиУказанПредмет;
	//БроньОбъект.ДополнительныеСвойства.Вставить("ЭтоУстановкаПредметаАвтоматическойБрони");
	//БроньОбъект.Записать();
	
КонецПроцедуры

// Рассчитывает отображаемое время планировщика.
//
Процедура РассчитатьОтображаемыеЧасы(Планировщик)
	
	ОтображатьВремяС = ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
	ОтображатьВремяПо = ПолучитьПерсональнуюНастройку("ОтображатьВремяПо");
	Для Каждого Бронь Из Планировщик.Элементы Цикл
		
		Если ОтображатьВремяС = 0 И ОтображатьВремяПо = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Бронь.Значение.ВесьДень Тогда
			Продолжить;
		КонецЕсли;
		
		// Час окончания будет -1 для случая когда на следующий день конец приходится ровно на час, а начало в другом дне.
		ЧасНачала = Цел((Бронь.Начало - НачалоДня(Бронь.Начало)) / 3600);
		ЧасОкончания = Цел((Бронь.Конец - НачалоДня(Бронь.Конец) - 1) / 3600);
		МинВремя = Мин(ЧасНачала, ЧасОкончания);
		Если МинВремя < ОтображатьВремяС Тогда
			ОтображатьВремяС = МинВремя;
		КонецЕсли;
		
		// Час начала 1 для случая когда в этот день время приходится ровно на час, а конец в другом дне.
		ЧасНачала = Окр((Бронь.Начало - НачалоДня(Бронь.Начало) + 1) / 3600);
		ЧасОкончания = Окр((Бронь.Конец - НачалоДня(Бронь.Конец)) / 3600);
		МаксВремя = Макс(ЧасНачала, ЧасОкончания);
		ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
		Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
			ОтображатьВремяПо = 24 - МаксВремя;
		КонецЕсли;
		
	КонецЦикла;
	Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтображатьВремяС;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтображатьВремяПо;

КонецПроцедуры

// Обрабатывает изменение реквизитов предмета в подписке.
// При установке пометки удаления, очистке даты и очистке помещения удаляет брони по предмету.
// При изменение помещения или даты корректирует существующие брони по предмету.
//
Процедура ОбработатьИзменениеРеквизитовПредмета(Предмет, ПредыдущиеЗначенияРеквизитов)
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//// Проверка изменения реквизитов - МестоЗанятия.
	//ИзменилосьМестоЗанятия = ПредыдущиеЗначенияРеквизитов.МестоЗанятия <> Предмет.МестоЗанятия;
	//
	//// Проверка изменения реквизитов - Дата.
	//ИзмениласьДата = ПредыдущиеЗначенияРеквизитов.ДатаНачала <> Предмет.ДатаНачала
	//	Или ПредыдущиеЗначенияРеквизитов.ДатаОкончания <> Предмет.ДатаОкончания;
	//УказанаДата = ЗначениеЗаполнено(Предмет.ДатаНачала) И ЗначениеЗаполнено(Предмет.ДатаОкончания);
	//ОчистилиДату = ИзмениласьДата И Не УказанаДата;
	//ИзменилиДату = ИзмениласьДата И УказанаДата;
	//
	//// Проверка изменения реквизитов - Пометка удаления.
	//ИзмениласьПометкаУдаления =
	//	ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Предмет.ПометкаУдаления;
	//УстановилиПометкуУдаления = ИзмениласьПометкаУдаления И Предмет.ПометкаУдаления;
	//
	//Если УстановилиПометкуУдаления Или ОчистилиДату Или ИзменилосьМестоЗанятия Тогда
	//	УдалитьАвтоматическиеБрониПоПредмету(Предмет);
	//ИначеЕсли ИзменилиДату Тогда
	//	СкорректироватьАвтоматическиеБрониПоПредмету(Предмет);
	//КонецЕсли;
	
КонецПроцедуры

// Удаляет брони по предмету в подписке при изменении предмета.
//
Процедура УдалитьАвтоматическиеБрониПоПредмету(МестоЗанятия)
	
	//Брони = ПолучитьАвтоматическиеБрониПоПредмету(МестоЗанятия.Ссылка);
	//Для Каждого Бронь Из Брони Цикл
	//	УдалитьАвтоматическуюБронь(Бронь.Ссылка);
	//КонецЦикла;
	
КонецПроцедуры

// Корректирует брони по предмету в подписке при изменении предмета.
//
Процедура СкорректироватьАвтоматическиеБрониПоПредмету(Предмет)
	
	//Брони = ПолучитьАвтоматическиеБрониПоПредмету(Предмет.Ссылка);
	//Для Каждого Бронь Из Брони Цикл
	//	
	//	ДатаНачалаБрониКорректна = Бронь.ДатаНачала >= Предмет.ДатаНачала
	//		И Бронь.ДатаНачала < Предмет.ДатаОкончания;
	//	ДатаОкончанияБрониКорректна = Бронь.ДатаОкончания > Предмет.ДатаНачала
	//		И Бронь.ДатаОкончания <= Предмет.ДатаОкончания;
	//	Если ДатаНачалаБрониКорректна И ДатаОкончанияБрониКорректна Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	УдалитьАвтоматическуюБронь(Бронь.Ссылка);
	//	
	//КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу броней по предмету, которые ведутся в автоматическом режиме.
//
Функция ПолучитьАвтоматическиеБрониПоПредмету(МестоЗанятия)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	БроньСпортивногоОбъекта.Ссылка,
	//	|	БроньСпортивногоОбъекта.ДатаНачала,
	//	|	БроньСпортивногоОбъекта.ДатаОкончания
	//	|ИЗ
	//	|	БроньСпортивногоОбъекта.Бронь КАК БроньСпортивногоОбъекта
	//	|ГДЕ
	//	|	БроньСпортивногоОбъекта.МестоЗанятия = &МестоЗанятия
	//	|	И БроньСпортивногоОбъекта.СпособСозданияБрони = ЗНАЧЕНИЕ(Перечисление.СпособыСозданияБрони.Автоматически)
	//	|	И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	БроньСпортивногоОбъекта.Ссылка,
	//	|	БроньСпортивногоОбъекта.ДатаНачала,
	//	|	БроньСпортивногоОбъекта.ДатаОкончания
	//	|ИЗ
	//	|	Документ.БроньСпортивногоОбъекта КАК БроньСпортивногоОбъекта
	//	|ГДЕ
	//	|	БроньСпортивногоОбъекта.МестоЗанятия = &МестоЗанятия
	//	|	И БроньСпортивногоОбъекта.СпособСозданияБрони = ЗНАЧЕНИЕ(Перечисление.СпособыСозданияБрони.АвтоматическиУказанПредмет)
	//	|	И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ";
	//
	//Запрос.УстановитьПараметр("МестоЗанятия", МестоЗанятия);
	//
	//Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Удаляет автоматическую бронь.
//
Процедура УдалитьАвтоматическуюБронь(Бронь)
	
	БроньОбъект = Бронь.ПолучитьОбъект();
	БроньОбъект.Заблокировать();
	Если БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Автоматически Тогда
		БроньОбъект.УстановитьПометкуУдаления(Истина);
	ИначеЕсли БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.АвтоматическиУказанПредмет Тогда
		БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Вручную;
		БроньОбъект.МестоЗанятия = Неопределено;
		БроньОбъект.Записать();
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно удалить бронь ""%1"", так как она не была создана автоматически.'"),
			Бронь);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Формирует отображаемые по умолчанию помещения пользователя.
// По умолчанию отображаются все помещения на территории пользователя.
//
// Возвращаемое значение:
//  Массив - Отображаемые по умолчанию территории для пользователя.
//
Функция ОтображаемыеТерриторииПользователяПоУмолчанию()
	
	//// По умолчанию отображаются все помещения на территории пользователя.
	//ОтображаемыеТерритории = Новый Массив;
	//ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	//МестоЗанятияПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "МестоЗанятия");
	//РодительПервогоУровня = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоЗанятияПользователя, "Родитель");
	//
	//// Заполняем все помещения, которые находятся на той же территории, что и пользователь.
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТерриторииИПомещения.Ссылка
	//	|ИЗ
	//	|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
	//	|ГДЕ
	//	|	ТерриторииИПомещения.Родитель В ИЕРАРХИИ(&Родитель)";
	//Запрос.УстановитьПараметр("Родитель", РодительПервогоУровня);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ОтображаемыеТерритории.Добавить(Выборка.Ссылка);
	//КонецЦикла;
	//
	//// Заполняем все территории, в которые входит МестоЗанятия пользователя.
	//МестоЗанятияРодитель = РодительПервогоУровня;
	//Пока ЗначениеЗаполнено(МестоЗанятияРодитель) Цикл
	//	ОтображаемыеТерритории.Добавить(МестоЗанятияРодитель);
	//	МестоЗанятияРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоЗанятияРодитель, "Родитель");
	//КонецЦикла;
	//
	//Возврат ОтображаемыеТерритории;
	
КонецФункции

// Измерения тренер и место занятия
Функция ТренераИМестаЗанятий(СпортивныйОбъект)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпортивныеОбъекты.Тренер КАК Тренер,
		|	СпортивныеОбъекты.Тренер.Представление КАК ТренерПредставление
		|ИЗ
		|	РегистрСведений.СпортивныеОбъекты КАК СпортивныеОбъекты
		|ГДЕ
		|	СпортивныеОбъекты.СпортивныйОбъект = &СпортивныйОбъект
		// {Рарус adilas #21535 -Тестирование релиза Альфа СПОРТ 1.0.0.4. Расписание занятий 2021.10.19
		|	И СпортивныеОбъекты.Тренер.СтатусТренера = ЗНАЧЕНИЕ(Перечисление.СтатусыТренеров.Работает)
		|	%2
		|   %1
		// }Рарус adilas #21535 -Тестирование релиза Альфа СПОРТ 1.0.0.4. Расписание занятий 2021.10.19
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаЗанятий.Ссылка КАК МестаЗанятий,
		|	МестаЗанятий.Представление КАК МестаЗанятийПредставление
		|ИЗ
		|	Справочник.МестаЗанятий КАК МестаЗанятий
		|ГДЕ
		|	МестаЗанятий.Владелец = &СпортивныйОбъект
		|	И МестаЗанятий.ДоступноБронирование = ИСТИНА";
		// }Рарус adilas #21302 -Места занятий 2021.10.14
		
	Запрос.УстановитьПараметр("СпортивныйОбъект", СпортивныйОбъект);
	
	// {Рарус ivaart IN-19390 отображение расписания СО для пользователей без организации 2021.08.30
	Если РольДоступна("Руководитель") Или РольДоступна("ПолныеПрава") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", "");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", " И СпортивныеОбъекты.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", ПараметрыСеанса.ТекущаяОрганизация);
	КонецЕсли;
	// {Рарус ivaart IN-19390 отображение расписания СО для пользователей без организации 2021.08.30
	Если РольДоступна("Тренер") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", " И СпортивныеОбъекты.Тренер = &Тренер");
		Запрос.УстановитьПараметр("Тренер", ПараметрыСеанса.ТекущийТренер);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат РезультатЗапроса; 
	
КонецФункции

Функция ЭтоТренер() Экспорт

	Если НЕ РольДоступна("Тренер") Тогда	
		ЭтоТренер = Ложь;
		Возврат ЭтоТренер;
	Иначе
		ЭтоТренер = Истина;
		Возврат ЭтоТренер;
	КонецЕсли;	
		
КонецФункции

Функция ЭтоРуководитель() Экспорт

	Если РольДоступна("Руководитель") Тогда	
		ЭтоРуководитель = Истина;
		Возврат ЭтоРуководитель;
	Иначе
		ЭтоРуководитель = Ложь;
		Возврат ЭтоРуководитель;
	КонецЕсли;	
		
КонецФункции 

#КонецОбласти