
#Область СлужебныеПроцедурыИФункции

Функция ДанныеПроводимыхСоревнований() Экспорт
    
    Структура = Новый Структура;
    МассивКонкурсов = Новый Массив;	
    МассивКомиссииПоДокументам = Новый Массив;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	СоревнованиеСоставУчастников.Спортсмен КАК Спортсмен,
    |	СоревнованиеСоставУчастников.GUIDУчастника КАК GUIDУчастника,
    |	СоревнованиеСоставУчастников.Ссылка КАК Ссылка,
    |	СоревнованиеСоставУчастников.Команда КАК Команда,
    |	СоревнованиеСоставУчастников.СтартовыйНомер КАК СтартовыйНомер,
    |	СоревнованиеСоставУчастников.МеждународнаяВозрастнаяГруппа КАК ВозрастнаяГруппа,
    |	СоревнованиеСоставУчастников.Тренер КАК Тренер,
    |	ЛОЖЬ КАК ОФП,
    |	NULL КАК Норматив,
    |	ФизическиеЛица.Пол КАК Пол,
    |	Тренеры.Наименование КАК ФИОТренера
    |ПОМЕСТИТЬ ТЗДанныеМероприятий
    |ИЗ
    |	Документ.Соревнование.СоставУчастников КАК СоревнованиеСоставУчастников
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спортсмены КАК Спортсмены
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |			ПО Спортсмены.ФизическоеЛицо = ФизическиеЛица.Ссылка
    |		ПО СоревнованиеСоставУчастников.Спортсмен = Спортсмены.Ссылка
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Тренеры КАК Тренеры
    |		ПО СоревнованиеСоставУчастников.Тренер = Тренеры.Ссылка
    |ГДЕ
    |	СоревнованиеСоставУчастников.Ссылка.ДатаНачалаСоревнования = &ДатаНачалаСоревнования
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Спортсмен,
    |	"""",
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Ссылка,
    |	"""",
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.СтартовыйНомер,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.МеждународнаяВозрастнаяГруппа,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Тренер,
    |	ИСТИНА,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Норматив,
    |	ФизическиеЛица.Пол,
    |	Тренеры.Наименование
    |ИЗ
    |	Документ.СоревнованиеОФПСдачаНормативов.СоставУчастников КАК СоревнованиеОФПСдачаНормативовСоставУчастников
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спортсмены КАК Спортсмены
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |			ПО Спортсмены.ФизическоеЛицо = ФизическиеЛица.Ссылка
    |		ПО СоревнованиеОФПСдачаНормативовСоставУчастников.Спортсмен = Спортсмены.Ссылка
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Тренеры КАК Тренеры
    |		ПО СоревнованиеОФПСдачаНормативовСоставУчастников.Тренер = Тренеры.Ссылка
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СоревнованиеОФПСдачаНормативов КАК СоревнованиеОФПСдачаНормативов
    |		ПО СоревнованиеОФПСдачаНормативовСоставУчастников.Ссылка = СоревнованиеОФПСдачаНормативов.Ссылка
    |ГДЕ
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Ссылка.ДатаНачалаСоревнования = &ДатаНачалаСоревнования
    |	И СоревнованиеОФПСдачаНормативов.ПометкаУдаления = ЛОЖЬ
    |	И СоревнованиеОФПСдачаНормативовСоставУчастников.Норматив <> ЗНАЧЕНИЕ(Справочник.Нормативы.ПустаяСсылка)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗДанныеМероприятий.Спортсмен КАК Спортсмен,
    |	ТЗДанныеМероприятий.GUIDУчастника КАК GUIDУчастника,
    |	ТЗДанныеМероприятий.Ссылка КАК Ссылка,
    |	ТЗДанныеМероприятий.Команда КАК Команда,
    |	ТЗДанныеМероприятий.СтартовыйНомер КАК СтартовыйНомер,
    |	ТЗДанныеМероприятий.ВозрастнаяГруппа КАК ВозрастнаяГруппа,
    |	ТЗДанныеМероприятий.Тренер КАК Тренер,
    |	ТЗДанныеМероприятий.ОФП КАК ОФП,
    |	ТЗДанныеМероприятий.Норматив КАК Норматив,
    |	ТЗДанныеМероприятий.Пол КАК Пол,
    |	ТЗДанныеМероприятий.ФИОТренера КАК ФИОТренера
    |ИЗ
    |	ТЗДанныеМероприятий КАК ТЗДанныеМероприятий
    |ИТОГИ ПО
    |	ОФП,
    |	Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗДанныеМероприятий.ВозрастнаяГруппа КАК ВозрастнаяГруппа,
    |	ТЗДанныеМероприятий.Норматив КАК Норматив
    |ПОМЕСТИТЬ ТЗНормативов
    |ИЗ
    |	ТЗДанныеМероприятий КАК ТЗДанныеМероприятий
    |ГДЕ
    |	ЕСТЬNULL(ТЗДанныеМероприятий.Норматив, 0) <> 0
    |
    |СГРУППИРОВАТЬ ПО
    |	ТЗДанныеМероприятий.ВозрастнаяГруппа,
    |	ТЗДанныеМероприятий.Норматив
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ОценкиПрохожденияНормативов.Норматив КАК Норматив,
    |	ОценкиПрохожденияНормативов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
    |	ОценкиПрохожденияНормативов.Пол КАК Пол,
    |	ОценкиПрохожденияНормативов.Балл КАК Балл,
    |	ОценкиПрохожденияНормативов.ТипПодсчетаРезультата КАК ТипПодсчетаРезультата,
    |	ВЫБОР
    |		КОГДА Нормативы.ТипРезультата = ЗНАЧЕНИЕ(Перечисление.ТипыРезультатов.Булево)
    |			ТОГДА ОценкиПрохожденияНормативов.РезультатБулево
    |		ИНАЧЕ ОценкиПрохожденияНормативов.РезультатЧисло
    |	КОНЕЦ КАК Результат,
    |	Нормативы.ТипРезультата КАК ТипРезультата,
    |	ОценкиПрохожденияНормативов.КоличествоПопыток КАК КоличествоПопыток
    |ПОМЕСТИТЬ ТЗДанныеНормативов
    |ИЗ
    |	РегистрСведений.ОценкиПрохожденияНормативов КАК ОценкиПрохожденияНормативов
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Нормативы КАК Нормативы
    |		ПО ОценкиПрохожденияНормативов.Норматив = Нормативы.Ссылка
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗНормативов КАК ТЗНормативов
    |		ПО ОценкиПрохожденияНормативов.Норматив = ТЗНормативов.Норматив
    |			И ОценкиПрохожденияНормативов.МеждународнаяВозрастнаяГруппа = ТЗНормативов.ВозрастнаяГруппа
    |ГДЕ
    |	(ОценкиПрохожденияНормативов.Балл = 3
    |			ИЛИ ОценкиПрохожденияНормативов.Балл = 5)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗДанныеНормативов.Норматив КАК Норматив,
    |	ТЗДанныеНормативов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
    |	ТЗДанныеНормативов.Пол КАК Пол,
    |	ТЗДанныеНормативов.Балл КАК Балл,
    |	ТЗДанныеНормативов.ТипПодсчетаРезультата КАК ТипПодсчетаРезультата,
    |	ТЗДанныеНормативов.Результат КАК Результат,
    |	ТЗДанныеНормативов.КоличествоПопыток КАК КоличествоПопыток
    |ПОМЕСТИТЬ ТЗНижнийПорогНормативов
    |ИЗ
    |	ТЗДанныеНормативов КАК ТЗДанныеНормативов
    |ГДЕ
    |	ТЗДанныеНормативов.Балл = 3
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗДанныеНормативов.Норматив КАК Норматив,
    |	ТЗДанныеНормативов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
    |	ТЗДанныеНормативов.Пол КАК Пол,
    |	ТЗДанныеНормативов.Балл КАК Балл,
    |	ТЗДанныеНормативов.ТипПодсчетаРезультата КАК ТипПодсчетаРезультата,
    |	ТЗДанныеНормативов.Результат КАК Результат,
    |	ТЗДанныеНормативов.КоличествоПопыток КАК КоличествоПопыток
    |ПОМЕСТИТЬ ТЗВерхнийПорогНормативов
    |ИЗ
    |	ТЗДанныеНормативов КАК ТЗДанныеНормативов
    |ГДЕ
    |	ТЗДанныеНормативов.Балл = 5
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗДанныеНормативов.Норматив КАК Норматив,
    |	ТЗДанныеНормативов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
    |	ТЗДанныеНормативов.Пол КАК Пол,
    |	ТЗДанныеНормативов.ТипРезультата КАК ТипРезультата
    |ПОМЕСТИТЬ ТЗВсеНормативы
    |ИЗ
    |	ТЗДанныеНормативов КАК ТЗДанныеНормативов
    |
    |СГРУППИРОВАТЬ ПО
    |	ТЗДанныеНормативов.Норматив,
    |	ТЗДанныеНормативов.МеждународнаяВозрастнаяГруппа,
    |	ТЗДанныеНормативов.Пол,
    |	ТЗДанныеНормативов.ТипРезультата
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗВсеНормативы.Норматив КАК Норматив,
    |	ТЗВсеНормативы.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
    |	ТЗВсеНормативы.Пол КАК Пол,
    |	ТЗВсеНормативы.ТипРезультата КАК ТипРезультата,
    |	ТЗНижнийПорогНормативов.Результат КАК РезультатНижняяГраница,
    |	ТЗНижнийПорогНормативов.ТипПодсчетаРезультата КАК ТипПодсчетаРезультатаНижняя,
    |	ТЗНижнийПорогНормативов.КоличествоПопыток КАК КоличествоПопытокНижняя,
    |	ТЗВерхнийПорогНормативов.ТипПодсчетаРезультата КАК ТипПодсчетаРезультатаВерхняя,
    |	ТЗВерхнийПорогНормативов.Результат КАК РезультатВерхняяГраница,
    |	ТЗВерхнийПорогНормативов.КоличествоПопыток КАК КоличествоПопытокВерхняя
    |ПОМЕСТИТЬ ТЗГраницыНормативов
    |ИЗ
    |	ТЗВсеНормативы КАК ТЗВсеНормативы
    |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗНижнийПорогНормативов КАК ТЗНижнийПорогНормативов
    |		ПО ТЗВсеНормативы.Норматив = ТЗНижнийПорогНормативов.Норматив
    |			И ТЗВсеНормативы.МеждународнаяВозрастнаяГруппа = ТЗНижнийПорогНормативов.МеждународнаяВозрастнаяГруппа
    |			И ТЗВсеНормативы.Пол = ТЗНижнийПорогНормативов.Пол
    |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗВерхнийПорогНормативов КАК ТЗВерхнийПорогНормативов
    |		ПО ТЗВсеНормативы.Норматив = ТЗВерхнийПорогНормативов.Норматив
    |			И ТЗВсеНормативы.МеждународнаяВозрастнаяГруппа = ТЗВерхнийПорогНормативов.МеждународнаяВозрастнаяГруппа
    |			И ТЗВсеНормативы.Пол = ТЗВерхнийПорогНормативов.Пол
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗГраницыНормативов.Норматив КАК Норматив,
    |	ТЗГраницыНормативов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
    |	ТЗГраницыНормативов.Пол КАК Пол,
    |	ТЗГраницыНормативов.ТипРезультата КАК ТипРезультата,
    |	ТЗГраницыНормативов.РезультатНижняяГраница КАК РезультатНижняяГраница,
    |	ТЗГраницыНормативов.ТипПодсчетаРезультатаНижняя КАК ТипПодсчетаРезультатаНижняя,
    |	ТЗГраницыНормативов.КоличествоПопытокНижняя КАК КоличествоПопытокНижняя,
    |	ТЗГраницыНормативов.ТипПодсчетаРезультатаВерхняя КАК ТипПодсчетаРезультатаВерхняя,
    |	ТЗГраницыНормативов.РезультатВерхняяГраница КАК РезультатВерхняяГраница,
    |	ТЗГраницыНормативов.КоличествоПопытокВерхняя КАК КоличествоПопытокВерхняя,
    |	ТЗДанныеМероприятий.Ссылка КАК Ссылка,
    |	ТЗДанныеМероприятий.ОФП КАК ОФП
    |ИЗ
    |	ТЗДанныеМероприятий КАК ТЗДанныеМероприятий
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗГраницыНормативов КАК ТЗГраницыНормативов
    |		ПО ТЗДанныеМероприятий.Норматив = ТЗГраницыНормативов.Норматив
    |			И ТЗДанныеМероприятий.ВозрастнаяГруппа = ТЗГраницыНормативов.МеждународнаяВозрастнаяГруппа
    |			И ТЗДанныеМероприятий.Пол = ТЗГраницыНормативов.Пол
    |ГДЕ
    |	ТЗДанныеМероприятий.ОФП = ИСТИНА
    |
    |СГРУППИРОВАТЬ ПО
    |	ТЗГраницыНормативов.Норматив,
    |	ТЗГраницыНормативов.МеждународнаяВозрастнаяГруппа,
    |	ТЗГраницыНормативов.Пол,
    |	ТЗГраницыНормативов.ТипРезультата,
    |	ТЗГраницыНормативов.ТипПодсчетаРезультатаНижняя,
    |	ТЗГраницыНормативов.ТипПодсчетаРезультатаВерхняя,
    |	ТЗДанныеМероприятий.Ссылка,
    |	ТЗДанныеМероприятий.ОФП,
    |	ТЗГраницыНормативов.РезультатНижняяГраница,
    |	ТЗГраницыНормативов.КоличествоПопытокНижняя,
    |	ТЗГраницыНормативов.РезультатВерхняяГраница,
    |	ТЗГраницыНормативов.КоличествоПопытокВерхняя";
    
    Попытка
        Запрос.УстановитьПараметр("ДатаНачалаСоревнования",НачалоДня(ТекущаяДатаСеанса()));
        
        РезультатЗапроса = Запрос.ВыполнитьПакет();
        
        ВыборкаНормативов  = РезультатЗапроса[8].Выбрать();
        
        МассивСоревнований = Новый Массив;
        
        ВыборкаОФП = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        
        Пока ВыборкаОФП.Следующий() Цикл
            
            ВыборкаДокумент = ВыборкаОФП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
            
            
            Пока ВыборкаДокумент.Следующий() Цикл
                
                ДокументПроведенияСоревнования = ВыборкаДокумент.Ссылка;
                ДатаПроведения = ДокументПроведенияСоревнования.ДатаНачалаСоревнования;
                МестоПроведения = ДокументПроведенияСоревнования.МестоПроведения;
                
                СтруктураСоревнование = Новый Структура;
                
                Если НЕ ВыборкаОФП.ОФП Тогда
                    
                    Соревнование = ДокументПроведенияСоревнования.Соревнование;
                    СтруктураСоревнование.Вставить("УИДСореванование", Строка(Соревнование.УникальныйИдентификатор()));
                    СтруктураСоревнование.Вставить("НазваниеСореванование", Соревнование.Наименование);
                    СтруктураСоревнование.Вставить("КоличествоПопыток",ДокументПроведенияСоревнования.КоличествоПараметров);
                    СтруктураСоревнование.Вставить("ТипРезультата",Строка(ДокументПроведенияСоревнования.ТипРезультата));
                    СтруктураСоревнование.Вставить("ТипПодсчетаРезультата",Строка(ДокументПроведенияСоревнования.ТипПодсчетаРезультата));
                    ОФПНорматив = Ложь;
                Иначе
                    ОФПНорматив = (ДокументПроведенияСоревнования.ТипСоревнования = ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Норматив"));
                    СтруктураСоревнование.Вставить("НазваниеСореванование", ДокументПроведенияСоревнования.Наименование);
                    СтруктураСоревнование.Вставить("УИДСореванование", Строка(ДокументПроведенияСоревнования.УникальныйИдентификатор()));
                КонецЕсли; 
                
                СтруктураСоревнование.Вставить("УИДДокумента", Строка(ДокументПроведенияСоревнования.УникальныйИдентификатор()));
                СтруктураСоревнование.Вставить("ДатаНачалаСоревнования",ДатаПроведения);
                СтруктураСоревнование.Вставить("МестоПроведения",МестоПроведения);
                
                СтруктураСоревнование.Вставить("ОФП",ВыборкаОФП.ОФП);
                СтруктураСоревнование.Вставить("ОФПНорматив",ОФПНорматив);
                
                МассивЖеребьевки = Новый Массив;
                
                Для каждого СтрокаЖеребьевки Из ДокументПроведенияСоревнования.Жеребьевка Цикл
                    
                    СтруктураЖеребьевки = Новый Структура;
                    СтруктураЖеребьевки.Вставить("ВозрастнаяГруппа",Строка(СтрокаЖеребьевки.МеждународнаяВозрастнаяГруппа.УникальныйИдентификатор()));
                    СтруктураЖеребьевки.Вставить("ВозрастнаяГруппаНаименование",СтрокаЖеребьевки.МеждународнаяВозрастнаяГруппа.Наименование);
                    СтруктураЖеребьевки.Вставить("Пол",Строка(СтрокаЖеребьевки.Пол));
                    СтруктураЖеребьевки.Вставить("НомерПозицииВГруппе",СтрокаЖеребьевки.НомерПозицииВГруппе);
                    
                    МассивЖеребьевки.Добавить(СтруктураЖеребьевки);
                    
                КонецЦикла; 
                
                СтруктураСоревнование.Вставить("МассивЖеребьевки",МассивЖеребьевки);
                
                ВыборкаУчастник = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
                МассивУчастников = Новый Массив;
                
                Пока ВыборкаУчастник.Следующий() Цикл
                    
                    СтруктураУчастника  = Новый Структура;
                    СтруктураУчастника.Вставить("УИДУчастника", Строка(ВыборкаУчастник.Спортсмен.УникальныйИдентификатор()));
                    СтруктураУчастника.Вставить("ФИОУчастника",Строка(ВыборкаУчастник.Спортсмен));
                    СтруктураУчастника.Вставить("GUIDУчастника",ВыборкаУчастник.GUIDУчастника);
                    СтруктураУчастника.Вставить("СтартовыйНомер",ВыборкаУчастник.СтартовыйНомер);
                    СтруктураУчастника.Вставить("Пол",Строка(ВыборкаУчастник.Спортсмен.ФизическоеЛицо.Пол));
                    СтруктураУчастника.Вставить("ДатаРождения",ВыборкаУчастник.Спортсмен.ФизическоеЛицо.ДатаРождения);
                    СтруктураУчастника.Вставить("УИДТренер",Строка(ВыборкаУчастник.Тренер.УникальныйИдентификатор()));
                    СтруктураУчастника.Вставить("ФИОТренера",ВыборкаУчастник.ФИОТренера);
                    СтруктураУчастника.Вставить("ВозрастнаяГруппа",Строка(ВыборкаУчастник.ВозрастнаяГруппа.УникальныйИдентификатор()));
                    СтруктураУчастника.Вставить("ВозрастнаяГруппаНаименование",ВыборкаУчастник.ВозрастнаяГруппа.Наименование);
                    
                    Если ВыборкаОФП.ОФП Тогда
                        
                        СтруктураНорматив = Новый Структура;
                        СтруктураНорматив.Вставить("Наименование",ВыборкаУчастник.Норматив.Наименование);
                        СтруктураНорматив.Вставить("УИДНорматива",Строка(ВыборкаУчастник.Норматив.УникальныйИдентификатор()));
                        //СтруктураНорматив.Вставить("ТипРезультата",Строка(ВыборкаУчастник.ТипРезультата));
                        
                        СтруктураУчастника.Вставить("Норматив",СтруктураНорматив);
                        
                    Иначе
                        
                        СтруктураКоманда = Новый Структура;
                        СтруктураКоманда.Вставить("Наименование",ВыборкаУчастник.Команда.Наименование);
                        СтруктураКоманда.Вставить("УИДКоманды",Строка(ВыборкаУчастник.Команда.УникальныйИдентификатор()));
                        
                        СтруктураУчастника.Вставить("Команда",СтруктураКоманда);
                        
                    КонецЕсли;
                    
                    Спортсмен = ВыборкаУчастник.Спортсмен;
                    Если ЗначениеЗаполнено(Спортсмен) и Не Спортсмен.Фото.Пустая() Тогда
                        Попытка
                            СтруктураУчастника.Вставить("Фотография",ПолучитьФотографиюСпортсмена(Спортсмен.Фото.ТекущаяВерсия));
                        Исключение
                            СтруктураУчастника.Вставить("Фотография",Неопределено);
                        КонецПопытки;
                    Иначе 
                        СтруктураУчастника.Вставить("Фотография",Неопределено);
                    КонецЕсли;
                    
                    МассивУчастников.Добавить(СтруктураУчастника);
                    
                КонецЦикла;
                
                СтруктураСоревнование.Вставить("МассивУчастников" , МассивУчастников);
                
                МассивСоревнований.Добавить(СтруктураСоревнование);
                
            КонецЦикла;
            
        КонецЦикла;
        
        Структура.Вставить("МассивСоревнований", МассивСоревнований);
        
        МассивНормативов = Новый Массив;
        
        Пока ВыборкаНормативов.Следующий() Цикл
            
            СтруктураДанныхНормативов = Новый Структура();
            
            СтруктураДанныхНормативов.Вставить("МероприятиеУИД",Строка(ВыборкаНормативов.Ссылка.УникальныйИдентификатор()));
            СтруктураДанныхНормативов.Вставить("НормативУИД",Строка(ВыборкаНормативов.Норматив.УникальныйИдентификатор()));
            СтруктураДанныхНормативов.Вставить("НормативНаименование",ВыборкаНормативов.Норматив.Наименование);
            СтруктураДанныхНормативов.Вставить("МеждународнаяВозрастнаяГруппаУИД",Строка(ВыборкаНормативов.МеждународнаяВозрастнаяГруппа.УникальныйИдентификатор()));
            СтруктураДанныхНормативов.Вставить("МеждународнаяВозрастнаяГруппаНаименование",ВыборкаНормативов.МеждународнаяВозрастнаяГруппа.Наименование);
            СтруктураДанныхНормативов.Вставить("Пол",Строка(ВыборкаНормативов.Пол));
            СтруктураДанныхНормативов.Вставить("ТипРезультата",Строка(ВыборкаНормативов.ТипРезультата));
            СтруктураДанныхНормативов.Вставить("РезультатНижняяГраница",ВыборкаНормативов.РезультатНижняяГраница);
            СтруктураДанныхНормативов.Вставить("ТипПодсчетаРезультатаНижняя",Строка(ВыборкаНормативов.ТипПодсчетаРезультатаНижняя));
            СтруктураДанныхНормативов.Вставить("КоличествоПопытокНижняя",ВыборкаНормативов.КоличествоПопытокНижняя);
            СтруктураДанныхНормативов.Вставить("РезультатВерхняяГраница",ВыборкаНормативов.РезультатВерхняяГраница);
            СтруктураДанныхНормативов.Вставить("ТипПодсчетаРезультатаВерхняя",Строка(ВыборкаНормативов.ТипПодсчетаРезультатаВерхняя));
            СтруктураДанныхНормативов.Вставить("КоличествоПопытокВерхняя",ВыборкаНормативов.КоличествоПопытокВерхняя);
            
            
            МассивНормативов.Добавить(СтруктураДанныхНормативов);
            
        КонецЦикла;
        
        Структура.Вставить("МассивДанныхНормативов",МассивНормативов);
        
    Исключение
        
        ЗаписьЖурналаРегистрации("ОшибкаМобИССпорт",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки(),);
        
    КонецПопытки;
    
    Возврат Структура;
    
КонецФункции

Функция ПолучитьФотографиюСпортсмена(ВерсияСсылка) Экспорт
    
    Возврат РаботаСФайлами.ДвоичныеДанныеФайла(ВерсияСсылка);
    
КонецФункции

Процедура ВнестиДанныеВПротокол(СтруктураРезультат, КодОтвета) Экспорт
    
    ОФП = СтруктураРезультат.ОФП;
    
    Если ОФП Тогда
        
        СформироватьПротоколОФП(СтруктураРезультат,КодОтвета);
        
    Иначе
        
        СформироватьПротоколСоревнования(СтруктураРезультат,КодОтвета);
        
    КонецЕсли; 
    
КонецПроцедуры

Процедура СформироватьЗаявление(СтруктураРезультат, КодОтвета) Экспорт
    
    УИДДокумента = СтруктураРезультат.УИДДокумента;
    ДокументЗаявление = Документы.ЗаявленияНаПриемВСпортивноеУчреждение.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДДокумента));
    ЗаявлениеОбъект = ДокументЗаявление.ПолучитьОбъект();
    
    Если НЕ ЗначениеЗаполнено(ЗаявлениеОбъект.Ссылка) Тогда
        
        ВидСпорта = Справочники.ВидыСпорта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураРезультат.ВидСпортаУИД));
        Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураРезультат.ОрганизацияУИД));
        ЗаявлениеОбъект = Документы.ЗаявленияНаПриемВСпортивноеУчреждение.СоздатьДокумент();
        ЗаявлениеОбъект.Дата = ТекущаяДатаСеанса();
        ЗаявлениеОбъект.ДатаЗаявления = СтруктураРезультат.ДатаЗаявления;
        ЗаявлениеОбъект.Организация = Организация;
        ЗаявлениеОбъект.ВидСпорта = ВидСпорта;
        ЗаявлениеОбъект.Комментарий = "Заявление получено из мобильного приложения";
        ЗаявлениеОбъект.СтатусЗаявления = Перечисления.СтатусыЗаявленийНаПриемВСпортивноеУчреждение.Подготовлено;
        ЗаявлениеОбъект.ЧерновикЗаявления = Новый ХранилищеЗначения(СтруктураРезультат);
        ЗаявлениеОбъект.ОписаниеЗаявления = Строка(СтруктураРезультат.ФамилияСпортсмена) + " " + Строка(СтруктураРезультат.ИмяСпортсмена) + " (" + НРег(Строка(ВидСпорта)) + ") Родитель: " + Строка(СтруктураРезультат.ФамилияРодителя) + " " + СтруктураРезультат.ИмяРодителя;
        ЗаявлениеОбъект.СогласиеНаОбработкуПерсональныхДанныхПолучено = Истина;
        ЗаявлениеОбъект.ПолученоИзВнешнегоИсточника = Истина;
        
        Попытка
            
            ЗаявлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
            КодОтвета = 200;
            
        Исключение
            
            ЗаписьЖурналаРегистрации("ОшибкаМобИССпорт", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
            КодОтвета = 500;
            
        КонецПопытки;
        
    КонецЕсли;
    
    МассивФайловЗаявления = СтруктураРезультат.МассивФайловЗаявления;
    Если ЗначениеЗаполнено(МассивФайловЗаявления) Тогда
        
        Для каждого СтрокаМассиваФайлов Из МассивФайловЗаявления Цикл
            НоваяСтрокаФайла = ЗаявлениеОбъект.ПредоставленныеДокументы.Добавить();
            НоваяСтрокаФайла.ВидДокумента = Справочники.ВидыДокументовДляПриемаВСпортивноеУчреждение[СтрокаМассиваФайлов.ВидДокумента];
            
            СтруктрураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СтрокаМассиваФайлов.ИмяФайла, Ложь);
            
            АдресВХранилище = ПоместитьВоВременноеХранилище(СтрокаМассиваФайлов.ДвоичныеДанныеФайла);
            ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
            ПараметрыФайла.Автор = ПараметрыСеанса.ТекущийПользователь.Наименование;
            ПараметрыФайла.ВладелецФайлов = ЗаявлениеОбъект.Ссылка;
            ПараметрыФайла.ИмяБезРасширения = СтруктрураФайла.ИмяБезРасширения;
            ПараметрыФайла.РасширениеБезТочки = СтрокаМассиваФайлов.Расширение;
            НоваяСсылкаНаФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище,,,Неопределено);
            
            НоваяСтрокаФайла.ПредоставленаКопия = Истина;
            НоваяСтрокаФайла.ФайлДокумента = НоваяСсылкаНаФайл;
            
            Попытка
                
                ЗаявлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
                КодОтвета = 200;
                
            Исключение
                
                ЗаписьЖурналаРегистрации("ОшибкаМобИССпорт", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
                КодОтвета = 500;
                
            КонецПопытки;
            
        КонецЦикла; 
        
    КонецЕсли;
    
КонецПроцедуры

Функция СобратьДанныеМероприятия(УИДДокумента, ОФП) Экспорт
    
    
    Если ОФП Тогда
        
        ДокументСоревнования = Документы.СоревнованиеОФПСдачаНормативов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДДокумента));
        
        ДействующийПротоколСоревнования = ДействующийПротоколОФП(ДокументСоревнования);
        
        Текст = 
        "ВЫБРАТЬ
        |	ПротоколОФПСдачаНормативовСоставУчастников.Спортсмен КАК Спортсмен,
        |	ПротоколОФПСдачаНормативовСоставУчастников.Норматив КАК Норматив,
        |	ПротоколОФПСдачаНормативовСоставУчастников.Норматив.ТипРезультата КАК ТипРезультата,
        |	ПротоколОФПСдачаНормативовПопытки.НомерПопытки КАК НомерПопытки,
        |	ПротоколОФПСдачаНормативовПопытки.РезультатЧисло КАК РезультатЧисло,
        |	ПротоколОФПСдачаНормативовПопытки.РезультатБулево КАК РезультатБулево
        |ИЗ
        |	Документ.ПротоколОФПСдачаНормативов.СоставУчастников КАК ПротоколОФПСдачаНормативовСоставУчастников
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколОФПСдачаНормативов.Попытки КАК ПротоколОФПСдачаНормативовПопытки
        |		ПО ПротоколОФПСдачаНормативовСоставУчастников.Ссылка = ПротоколОФПСдачаНормативовПопытки.Ссылка
        |			И ПротоколОФПСдачаНормативовСоставУчастников.УникальныйИдентификаторСтрокиНорматива = ПротоколОФПСдачаНормативовПопытки.УникальныйИдентификаторСтрокиНорматива
        |ГДЕ
        |	ПротоколОФПСдачаНормативовСоставУчастников.Ссылка = &ДействующийПротоколСоревнования";
        
    Иначе
        
        ДокументСоревнования = Документы.Соревнование.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДДокумента));
        
        ДействующийПротоколСоревнования = ДействующийПротокол(ДокументСоревнования);
        
        Текст = 
        "ВЫБРАТЬ
        |	ПротоколСоревнованияСоставУчастников.Спортсмен КАК Спортсмен,
        |	ПротоколСоревнованияПараметрыСоревнования.РезультатЧисло КАК РезультатЧисло,
        |	ПротоколСоревнованияПараметрыСоревнования.РезультатБулево КАК РезультатБулево,
        |	ПротоколСоревнованияПараметрыСоревнования.Параметр КАК НомерПопытки,
        |	ДокСоревнование.ТипРезультата КАК ТипРезультата,
        |	ЗНАЧЕНИЕ(Справочник.Нормативы.Пустаяссылка) КАК Норматив
        |ИЗ
        |	Документ.ПротоколСоревнования.СоставУчастников КАК ПротоколСоревнованияСоставУчастников
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколСоревнования.ПараметрыСоревнования КАК ПротоколСоревнованияПараметрыСоревнования
        |		ПО ПротоколСоревнованияСоставУчастников.Ссылка = ПротоколСоревнованияПараметрыСоревнования.Ссылка
        |			И ПротоколСоревнованияСоставУчастников.GUIDУчастника = ПротоколСоревнованияПараметрыСоревнования.GUIDУчастника
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколСоревнования КАК ПротоколСоревнования
        |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Соревнование КАК ДокСоревнование
        |			ПО ПротоколСоревнования.ДокументОснование = ДокСоревнование.Ссылка
        |		ПО ПротоколСоревнованияСоставУчастников.Ссылка = ПротоколСоревнования.Ссылка
        |ГДЕ
        |	ПротоколСоревнованияСоставУчастников.Ссылка = &ДействующийПротоколСоревнования";
        
    КонецЕсли; 
    
    Если НЕ ЗначениеЗаполнено(ДействующийПротоколСоревнования) Тогда
        
        Возврат Неопределено;
        
    КонецЕсли; 
    
    МассивРезультатов = Новый Массив;
    
    Запрос = Новый Запрос;
    Запрос.Текст = Текст;
    
    Запрос.УстановитьПараметр("ДействующийПротоколСоревнования", ДействующийПротоколСоревнования);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        СтруктураРезультатов = Новый Структура;
        СтруктураРезультатов.Вставить("Участник", Строка(ВыборкаДетальныеЗаписи.Спортсмен.УникальныйИдентификатор()));
        
        Если ОФП Тогда
            
            УИДНорматива = Строка(ВыборкаДетальныеЗаписи.Норматив.УникальныйИдентификатор());
            
        Иначе
            
            УИДНорматива = "";
            
        КонецЕсли; 
        
        СтруктураРезультатов.Вставить("Норматив", УИДНорматива);
        СтруктураРезультатов.Вставить("ТипРезультата", Строка(ВыборкаДетальныеЗаписи.ТипРезультата));
        СтруктураРезультатов.Вставить("Результат", ?(ВыборкаДетальныеЗаписи.ТипРезультата = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Булево"),?(ВыборкаДетальныеЗаписи.РезультатБулево = Истина,1,0),ВыборкаДетальныеЗаписи.РезультатЧисло));
        СтруктураРезультатов.Вставить("НомерПопытки", ВыборкаДетальныеЗаписи.НомерПопытки);	
        
        МассивРезультатов.Добавить(СтруктураРезультатов);
        
    КонецЦикла;
    
    ИтоговаяСтруктура = Новый Структура;
    ИтоговаяСтруктура.Вставить("МассивРезультатов", МассивРезультатов);
    
    Возврат ИтоговаяСтруктура;
    
КонецФункции

#Область ПротоколСоревнования

Процедура СформироватьПротоколСоревнования(СтруктураРезультат,КодОтвета) Экспорт
    
    УИДДокумента = СтруктураРезультат.УИДДокумента;
    УИДСоревнования = СтруктураРезультат.УИДМероприятия;
    
    ДокументСоревнования = Документы.Соревнование.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДДокумента));
    Соревнование = Справочники.Соревнование.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСоревнования));
    
    ДействующийПротоколСоревнования = ДействующийПротокол(ДокументСоревнования);
    
    Если ЗначениеЗаполнено(ДействующийПротоколСоревнования) Тогда
        
        ПротоколСоревнованияОбъект =  ДействующийПротоколСоревнования.ПолучитьОбъект();
        
    Иначе
        
        ПротоколСоревнованияОбъект = Документы.ПротоколСоревнования.СоздатьДокумент();
        ЗаполнитьПротоколПоСоревнованию(ПротоколСоревнованияОбъект,ДокументСоревнования);
        
    КонецЕсли; 
    
    ЗаполнитьПротоколРезультатамиСоревнования(ПротоколСоревнованияОбъект,СтруктураРезультат);
    
    Попытка
        
        ПротоколСоревнованияОбъект.Записать(РежимЗаписиДокумента.Запись);
        ПротоколСоревнованияОбъект.Записать(РежимЗаписиДокумента.Проведение);
        КодОтвета = 200;
        
    Исключение
        
        ЗаписьЖурналаРегистрации("ОшибкаМобИССпорт",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки(),);
        КодОтвета = 500;
        
    КонецПопытки;
    
КонецПроцедуры

Функция ДействующийПротокол(ДокументСоревнование)
    
    ДействующийПротоколСоревнования =  Документы.ПротоколСоревнования.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |	ПротоколСоревнования.Ссылка КАК Ссылка
    |ИЗ
    |	Документ.ПротоколСоревнования КАК ПротоколСоревнования
    |ГДЕ
    |	ПротоколСоревнования.ДокументОснование = &ДокументОснование
    |
    |УПОРЯДОЧИТЬ ПО
    |	ПротоколСоревнования.Дата УБЫВ";
    
    Запрос.УстановитьПараметр("ДокументОснование", ДокументСоревнование);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        ВыборкаДетальныеЗаписи.Следующий();
        ДействующийПротоколСоревнования = ВыборкаДетальныеЗаписи.Ссылка;
        
    КонецЕсли; 
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Возврат ДействующийПротоколСоревнования;
    
КонецФункции 

Процедура ЗаполнитьПротоколПоСоревнованию(ПротоколСоревнования,ДокументСоревнования)
    
    ЗаполнитьЗначенияСвойств(ПротоколСоревнования, ДокументСоревнования,,"Номер,Дата");
    
    ПротоколСоревнования.Дата = ТекущаяДатаСеанса();
    ПротоколСоревнования.Соревнование = ДокументСоревнования.Соревнование;
    ПротоколСоревнования.ДокументОснование = ДокументСоревнования;
    ПротоколСоревнования.Комментарий = "Создан автоматически из мобильного приложения";
    
    КоличествоПараметров = ДокументСоревнования.КоличествоПараметров;
    
    Для Каждого СтрокаУчастники Из ДокументСоревнования.СоставУчастников Цикл
        
        СтрокаСоставУчастников = ПротоколСоревнования.СоставУчастников.Добавить();
        
        ЗаполнитьЗначенияСвойств(СтрокаСоставУчастников,СтрокаУчастники);
        
        Для Индекс = 1 По КоличествоПараметров Цикл
            
            СтрокаПараметр = ПротоколСоревнования.ПараметрыСоревнования.Добавить();
            СтрокаПараметр.Параметр = Индекс;
            СтрокаПараметр.GUIDУчастника = СтрокаСоставУчастников.GUIDУчастника;
            
        КонецЦикла;	
        
    КонецЦикла;	
    
КонецПроцедуры

Процедура ЗаполнитьПротоколРезультатамиСоревнования(ПротоколСоревнования,СтруктураРезультат)
    
    РезультатыУчастников = СтруктураРезультат.РезультатыУчастников;
    СоставУчастников = ПротоколСоревнования.СоставУчастников;
    ПараметрыСоревнования = ПротоколСоревнования.ПараметрыСоревнования;
    
    Для каждого ЭлемРезультат Из РезультатыУчастников Цикл
        
        Участник = Справочники.Спортсмены.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлемРезультат.Участник));
        СтруктураРезультатУчастника = ЭлемРезультат.СтруктураРезультатУчастника;
        МассивПараметровУчастника = ЭлемРезультат.МассивПараметровУчастника;
        
        ОтборСтрок = Новый Структура;
        ОтборСтрок.Вставить("Спортсмен",Участник);
        
        НайденныеСтроки = СоставУчастников.НайтиСтроки(ОтборСтрок);
        
        Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
            
            ЗаполнитьЗначенияСвойств(НайденнаяСтрока,СтруктураРезультатУчастника);
            
            ОтборСтрокПараметров = Новый Структура("GUIDУчастника,Параметр");
            ОтборСтрокПараметров.GUIDУчастника = НайденнаяСтрока.GUIDУчастника;
            
            Для каждого ЭлемПараметр Из МассивПараметровУчастника Цикл
                
                ОтборСтрокПараметров.Параметр = ЭлемПараметр.Параметр;
                
                НайденныеСтрокиПараметров =  ПараметрыСоревнования.НайтиСтроки(ОтборСтрокПараметров);
                
                Для каждого НайденнаяСтрокаПараметров Из НайденныеСтрокиПараметров Цикл
                    
                    ЗаполнитьЗначенияСвойств(НайденнаяСтрокаПараметров,ЭлемПараметр);
                    
                КонецЦикла; 
                
            КонецЦикла; 
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#Область ПротоколОФП

Процедура СформироватьПротоколОФП(СтруктураРезультат,КодОтвета) Экспорт
    
    УИДДокумента = СтруктураРезультат.УИДДокумента;
    УИДСоревнования = СтруктураРезультат.УИДМероприятия;
    
    ДокументСоревнования = Документы.СоревнованиеОФПСдачаНормативов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДДокумента));
    //Соревнование = Справочники.Соревнование.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСоревнования));
    
    ДействующийПротоколСоревнования = ДействующийПротоколОФП(ДокументСоревнования);
    
    Если ЗначениеЗаполнено(ДействующийПротоколСоревнования) Тогда
        
        ПротоколСоревнованияОбъект =  ДействующийПротоколСоревнования.ПолучитьОбъект();
        
    Иначе
        
        ПротоколСоревнованияОбъект = Документы.ПротоколОФПСдачаНормативов.СоздатьДокумент();
        ЗаполнитьПротоколПоОФП(ПротоколСоревнованияОбъект,ДокументСоревнования);
        
    КонецЕсли; 
    
    ЗаполнитьПротоколРезультатамиОФП(ПротоколСоревнованияОбъект,СтруктураРезультат);
    
    Попытка
        
        ПротоколСоревнованияОбъект.Записать(РежимЗаписиДокумента.Запись);
        КодОтвета = 200;
        
    Исключение
        
        ЗаписьЖурналаРегистрации("ОшибкаМобИССпорт",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки(),);
        КодОтвета = 500;
        
    КонецПопытки;
    
    Если КодОтвета = 200 Тогда
        
        Попытка
            
            ПротоколСоревнованияОбъект.Записать(РежимЗаписиДокумента.Проведение);
            
        Исключение
            
            ЗаписьЖурналаРегистрации("ОшибкаМобИССпорт",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки(),);
            
        КонецПопытки;
        
    КонецЕсли; 
    
КонецПроцедуры

Функция ДействующийПротоколОФП(ДокументСоревнование)
    
    ДействующийПротоколСоревнования =  Документы.ПротоколСоревнования.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |	ПротоколОФПСдачаНормативов.Ссылка КАК Ссылка
    |ИЗ
    |	Документ.ПротоколОФПСдачаНормативов КАК ПротоколОФПСдачаНормативов
    |ГДЕ
    |	ПротоколОФПСдачаНормативов.ДокументОснование = &ДокументОснование
    |	И ПротоколОФПСдачаНормативов.ПометкаУдаления = ЛОЖЬ
    |
    |УПОРЯДОЧИТЬ ПО
    |	ПротоколОФПСдачаНормативов.Дата УБЫВ";
    
    Запрос.УстановитьПараметр("ДокументОснование", ДокументСоревнование);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        ВыборкаДетальныеЗаписи.Следующий();
        ДействующийПротоколСоревнования = ВыборкаДетальныеЗаписи.Ссылка;
        
    КонецЕсли; 
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Возврат ДействующийПротоколСоревнования;
    
КонецФункции 

Процедура ЗаполнитьПротоколПоОФП(ПротоколСоревнования,ДокументСоревнования)
    
    ЗаполнитьЗначенияСвойств(ПротоколСоревнования, ДокументСоревнования,,"Номер,Дата");
    
    ПротоколСоревнования.Дата = ТекущаяДатаСеанса();
    ПротоколСоревнования.ДокументОснование = ДокументСоревнования;
    ПротоколСоревнования.Комментарий = "Создан автоматически из мобильного приложения";
    
    Для Каждого СтрокаНорматив Из ДокументСоревнования.ЗаявленныеНормативы Цикл
        
        СтрокаЗаявленныйНорматив                                                   = ПротоколСоревнования.ЗаявленныеНормативы.Добавить();
        СтрокаЗаявленныйНорматив.Норматив                                          = СтрокаНорматив.Норматив;
        СтрокаЗаявленныйНорматив.УникальныйИдентификаторСтрокиЗаявленногоНорматива = СтрокаНорматив.УникальныйИдентификаторНорматива;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 	"ВЫБРАТЬ
    |	ЕСТЬNULL(ОценкиПрохожденияНормативов.КоличествоПопыток, 1) КАК КоличествоПопыток,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Ссылка КАК Ссылка,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.НомерСтроки КАК НомерСтроки,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.СтартовыйНомер КАК СтартовыйНомер,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Спортсмен КАК Спортсмен,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Пол КАК Пол,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Тренер КАК Тренер,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Норматив КАК Норматив,
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.УникальныйИдентификаторНорматива КАК УникальныйИдентификаторНорматива
    |ИЗ
    |	Документ.СоревнованиеОФПСдачаНормативов.СоставУчастников КАК СоревнованиеОФПСдачаНормативовСоставУчастников
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиПрохожденияНормативов КАК ОценкиПрохожденияНормативов
    |		ПО СоревнованиеОФПСдачаНормативовСоставУчастников.Норматив = ОценкиПрохожденияНормативов.Норматив
    |			И СоревнованиеОФПСдачаНормативовСоставУчастников.МеждународнаяВозрастнаяГруппа = ОценкиПрохожденияНормативов.МеждународнаяВозрастнаяГруппа
    |			И СоревнованиеОФПСдачаНормативовСоставУчастников.Пол = ОценкиПрохожденияНормативов.Пол
    |ГДЕ
    |	СоревнованиеОФПСдачаНормативовСоставУчастников.Ссылка = &ДокументСоревнования
    |	И ОценкиПрохожденияНормативов.Балл = 3";
    
    Запрос.УстановитьПараметр("ДокументСоревнования",ДокументСоревнования);
    РезультатЗапроса = Запрос.Выполнить();
    
    Выборка = РезультатЗапроса.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        
        СтрокаСоставУчастников = ПротоколСоревнования.СоставУчастников.Добавить();
        
        ЗаполнитьЗначенияСвойств(СтрокаСоставУчастников,Выборка);
        СтрокаСоставУчастников.УникальныйИдентификаторСтрокиЗаявленногоНорматива = СтрЗаменить(Выборка.УникальныйИдентификаторНорматива,"_","-");
        
        УникальныйИдентификаторСтрокиНорматива = Новый УникальныйИдентификатор();
        
        СтрокаСоставУчастников.УникальныйИдентификаторСтрокиНорматива = УникальныйИдентификаторСтрокиНорматива;
        
        КоличествоПараметров =  Выборка.КоличествоПопыток;
        
        Для Индекс = 1 По КоличествоПараметров Цикл
            
            СтрокаПараметр = ПротоколСоревнования.Попытки.Добавить();
            СтрокаПараметр.НомерПопытки = Индекс;
            СтрокаПараметр.УникальныйИдентификаторСтрокиНорматива = УникальныйИдентификаторСтрокиНорматива;
            
        КонецЦикла;	
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаполнитьПротоколРезультатамиОФП(ПротоколСоревнования,СтруктураРезультат)
    
    РезультатыУчастников = СтруктураРезультат.РезультатыУчастников;
    СоставУчастников = ПротоколСоревнования.СоставУчастников;
    ПараметрыСоревнования = ПротоколСоревнования.Попытки;
    
    Для каждого ЭлемРезультат Из РезультатыУчастников Цикл
        
        Участник = Справочники.Спортсмены.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлемРезультат.Участник));
        Норматив = Справочники.Нормативы.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлемРезультат.Норматив));
        СтруктураРезультатУчастника = ЭлемРезультат.СтруктураРезультатУчастника;
        МассивПараметровУчастника = ЭлемРезультат.МассивПараметровУчастника;
        
        ОтборСтрок = Новый Структура;
        ОтборСтрок.Вставить("Спортсмен",Участник);
        ОтборСтрок.Вставить("Норматив",Норматив);
        
        НайденныеСтроки = СоставУчастников.НайтиСтроки(ОтборСтрок);
        
        Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
            
            ЗаполнитьЗначенияСвойств(НайденнаяСтрока,СтруктураРезультатУчастника);
            
            ОтборСтрокПараметров = Новый Структура("УникальныйИдентификаторСтрокиНорматива,НомерПопытки");
            ОтборСтрокПараметров.УникальныйИдентификаторСтрокиНорматива = НайденнаяСтрока.УникальныйИдентификаторСтрокиНорматива;
            
            Для каждого ЭлемПараметр Из МассивПараметровУчастника Цикл
                
                ОтборСтрокПараметров.НомерПопытки = ЭлемПараметр.Параметр;
                
                НайденныеСтрокиПараметров =  ПараметрыСоревнования.НайтиСтроки(ОтборСтрокПараметров);
                
                Для каждого НайденнаяСтрокаПараметров Из НайденныеСтрокиПараметров Цикл
                    
                    ЗаполнитьЗначенияСвойств(НайденнаяСтрокаПараметров,ЭлемПараметр);
                    
                КонецЦикла; 
                
            КонецЦикла; 
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#Область Авторизация

Функция ВернутьРольПоАвторизации(Логин, Пароль)  Экспорт
    
    ВозвращаемоеЗначение =  Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   ДанныеАвторизацииФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
    |   ДанныеАвторизацииФизлиц.РольАвторизации КАК РольАвторизации
    |ИЗ
    |   РегистрСведений.ДанныеАвторизацииФизлиц КАК ДанныеАвторизацииФизлиц
    |ГДЕ
    |   ДанныеАвторизацииФизлиц.Логин = &Логин
    |   И ДанныеАвторизацииФизлиц.Пароль = &Пароль";
    
    Запрос.УстановитьПараметр("Логин", Логин);
    Запрос.УстановитьПараметр("Пароль", Пароль);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            ВозвращаемоеЗначение = Новый Структура("РольАвторизации, ФизическоеЛицо");
            ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение,ВыборкаДетальныеЗаписи);
        КонецЦикла;
        
    КонецЕсли; 
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции // ВернутьРольПоАвторизации()

Функция ВернутьСпортсменаПоРодителю(ФизическоеЛицо) Экспорт

	МассивСпортсменов = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СоставыСемейСпортсменов.Спортсмен КАК Спортсмен
        |ИЗ
        |   РегистрСведений.СоставыСемейСпортсменов КАК СоставыСемейСпортсменов
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодителиЗаконныеПредставителиСпортсменов КАК РодителиЗаконныеПредставителиСпортсменов
        |       ПО СоставыСемейСпортсменов.Родитель = РодителиЗаконныеПредставителиСпортсменов.Ссылка
        |ГДЕ
        |   РодителиЗаконныеПредставителиСпортсменов.ФизическоеЛицо = &ФизическоеЛицо";
    
    Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
    
    	    МассивСпортсменов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Спортсмен");    
    
    КонецЕсли; 
    
    Возврат МассивСпортсменов;

КонецФункции // ВернутьСпортсменаПоРодителю()

Функция ВернутьСпортсменаПоФЛ(ФизическоеЛицо) Экспорт

	МассивСпортсменов = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Спортсмены.Ссылка КАК Спортсмен
        |ИЗ
        |   Справочник.Спортсмены КАК Спортсмены
        |ГДЕ
        |   Спортсмены.ФизическоеЛицо = &ФизическоеЛицо
        |   И Спортсмены.ПометкаУдаления = ЛОЖЬ";
    
    Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
    
    	    МассивСпортсменов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Спортсмен");    
    
    КонецЕсли; 
    
    Возврат МассивСпортсменов;

КонецФункции // ВернутьСпортсменаПоРодителю()

#КонецОбласти

#Область КабинетРодителя

#Область СборДанныхПоСпортсмену

Функция СобратьДанныеСпортсменов(МассивСпортсменов)Экспорт
    
    ВозвращаемоеЗначение = Новый Структура;
    
    МассивДанныхСпортсменов = Новый Массив;
    
    Для каждого Спортсмен Из МассивСпортсменов Цикл
    
    	СтруктураСпортсмена = СобратьДанныеСпортсмена(Спортсмен);
        МассивДанныхСпортсменов.Добавить(СтруктураСпортсмена);
    
    КонецЦикла; 
    
    ВозвращаемоеЗначение.Вставить("МассивДанныхСпортсменов",МассивДанныхСпортсменов);
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции

Функция СобратьДанныеОрганизаций() Экспорт

    ВозвращаемоеЗначение = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
        |   ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
        |   ОрганизацииКонтактнаяИнформация.Тип КАК Тип,
        |   ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
        |ПОМЕСТИТЬ ВсяКонтактная
        |ИЗ
        |   Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
        |       ПО ОрганизацииКонтактнаяИнформация.Ссылка = Организации.Ссылка
        |ГДЕ
        |   Организации.ПометкаУдаления = ЛОЖЬ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВсяКонтактная.Представление КАК Представление,
        |   ВсяКонтактная.Вид КАК Вид,
        |   ВсяКонтактная.Тип КАК Тип,
        |   ВсяКонтактная.Ссылка КАК Ссылка
        |ПОМЕСТИТЬ ВТЭлектронныйАдрес
        |ИЗ
        |   ВсяКонтактная КАК ВсяКонтактная
        |ГДЕ
        |   ВсяКонтактная.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВсяКонтактная.Представление КАК Представление,
        |   ВсяКонтактная.Вид КАК Вид,
        |   ВсяКонтактная.Тип КАК Тип,
        |   ВсяКонтактная.Ссылка КАК Ссылка
        |ПОМЕСТИТЬ ВТВебСтраница
        |ИЗ
        |   ВсяКонтактная КАК ВсяКонтактная
        |ГДЕ
        |   ВсяКонтактная.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВсяКонтактная.Представление КАК Представление,
        |   ВсяКонтактная.Вид КАК Вид,
        |   ВсяКонтактная.Тип КАК Тип,
        |   ВсяКонтактная.Ссылка КАК Ссылка
        |ПОМЕСТИТЬ ВТАдрес
        |ИЗ
        |   ВсяКонтактная КАК ВсяКонтактная
        |ГДЕ
        |   ВсяКонтактная.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
        |   И ВсяКонтактная.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВсяКонтактная.Представление КАК Представление,
        |   ВсяКонтактная.Вид КАК Вид,
        |   ВсяКонтактная.Тип КАК Тип,
        |   ВсяКонтактная.Ссылка КАК Ссылка
        |ПОМЕСТИТЬ ВТТелефон
        |ИЗ
        |   ВсяКонтактная КАК ВсяКонтактная
        |ГДЕ
        |   ВсяКонтактная.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(ВТАдрес.Представление, """") КАК Адрес,
        |   ЕСТЬNULL(ВТВебСтраница.Представление, """") КАК Сайт,
        |   ЕСТЬNULL(ВТТелефон.Представление, """") КАК Телефон,
        |   ЕСТЬNULL(ВТЭлектронныйАдрес.Представление, """") КАК ЭлектронныйАдрес,
        |   Организации.Ссылка КАК Организация,
        |   Организации.Наименование КАК Наименование,
        |   ЕСТЬNULL(ФизическиеЛица.Наименование, """") КАК Директор,
        |   ВидыСпорта.Ссылка КАК ВидСпорта,
        |   ВидыСпорта.Наименование КАК НаименованиеВидаСпорта
        |ИЗ
        |   Справочник.Организации КАК Организации
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТЭлектронныйАдрес КАК ВТЭлектронныйАдрес
        |       ПО Организации.Ссылка = ВТЭлектронныйАдрес.Ссылка
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТВебСтраница КАК ВТВебСтраница
        |       ПО Организации.Ссылка = ВТВебСтраница.Ссылка
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТАдрес КАК ВТАдрес
        |       ПО Организации.Ссылка = ВТАдрес.Ссылка
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТТелефон КАК ВТТелефон
        |       ПО Организации.Ссылка = ВТТелефон.Ссылка
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
        |       ПО Организации.Директор = ФизическиеЛица.Ссылка
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСпорта КАК ВидыСпорта
        |       ПО (ВидыСпорта.Владелец = Организации.Ссылка)
        |ГДЕ
        |   ВидыСпорта.ЭтоГруппа = ЛОЖЬ";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВозвращаемоеЗначение = Новый Структура;
        МассивОрганизаций = Новый Массив;
        
        ТЗОрганизации = РезультатЗапроса.Выгрузить();
        ТЗВидыСпорта = ТЗОрганизации.Скопировать();
        
        ТЗОрганизации.Свернуть("Организация, Наименование, Адрес, Телефон, ЭлектронныйАдрес, Сайт, Директор");
                
        Для каждого СтрокаОрганизации Из ТЗОрганизации Цикл
            
            СтруктураДанныхОрганизации = Новый Структура;
            СтруктураДанныхОрганизации.Вставить("ОрганизацияУИД", Строка(СтрокаОрганизации.Организация.УникальныйИдентификатор()));
            СтруктураДанныхОрганизации.Вставить("Наименование", СтрокаОрганизации.Наименование);
            СтруктураДанныхОрганизации.Вставить("Адрес", СтрокаОрганизации.Адрес);
            СтруктураДанныхОрганизации.Вставить("Телефон", СтрокаОрганизации.Телефон);
            СтруктураДанныхОрганизации.Вставить("ЭлектронныйАдрес", СтрокаОрганизации.ЭлектронныйАдрес);
            СтруктураДанныхОрганизации.Вставить("Сайт", СтрокаОрганизации.Сайт);
            СтруктураДанныхОрганизации.Вставить("Директор", СтрокаОрганизации.Директор);
            
            ОтборПоВладельцу = Новый Структура;
            ОтборПоВладельцу.Вставить("Организация", СтрокаОрганизации.Организация);
            
            НайденныеСтрокиВидовСпорта = ТЗВидыСпорта.НайтиСтроки(ОтборПоВладельцу);
            
            МассивСтруктурВидовСпорта = Новый Массив;
            
            Для каждого СтрокаВидаСпорта Из НайденныеСтрокиВидовСпорта Цикл
                
                Если ЗначениеЗаполнено(СтрокаВидаСпорта.ВидСпорта) Тогда
                    
                    СтруктураВидаСпорта = Новый Структура;
                    СтруктураВидаСпорта.Вставить("ВидСпортаУИД", Строка(СтрокаВидаСпорта.ВидСпорта.УникальныйИдентификатор()));
                    СтруктураВидаСпорта.Вставить("НаименованиеВидаСпорта", СтрокаВидаСпорта.НаименованиеВидаСпорта);
                    
                    МассивСтруктурВидовСпорта.Добавить(СтруктураВидаСпорта);
                    
                КонецЕсли;
                
            КонецЦикла; 
            
            СтруктураДанныхОрганизации.Вставить("МассивСтруктурВидовСпорта", МассивСтруктурВидовСпорта);
            
            МассивОрганизаций.Добавить(СтруктураДанныхОрганизации);
            
        КонецЦикла;
        
        ВозвращаемоеЗначение.Вставить("МассивОрганизаций", МассивОрганизаций);
        
    КонецЕсли; 

    Возврат ВозвращаемоеЗначение;
    
КонецФункции // СобратьДанныеОрганизаций()
 
Функция СобратьДанныеСпортсмена(Спортсмен)
    
    ФизЛицоСпортсмена = Спортсмен.ФизическоеЛицо;
    
    СтруктураДанныхСпортсмена = Новый Структура("Группа,ТренерФИО, ТренерУИД, ВидСпортаНаименование, ВидСпортаУИД, Сборная, ДатаВключенияВСборную, ВидСпортаСборнаяУИД, ВидСпортаСборнаяНаименование, СпортивнаяПрограмма, Этап, ОрганизацияНаименование, ОрганизацияУИД, ТренерУИДГруппа, ТренерФИОГруппа, ДатаЗачисленияГруппа, ДатаЗачисленияЭтап", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "");
    СтруктураДанныхСпортсмена.Вставить("GUIDУчастника",Строка(Спортсмен.УникальныйИдентификатор()));
    СтруктураДанныхСпортсмена.Вставить("Пол",Строка(ФизЛицоСпортсмена.Пол));
    СтруктураДанныхСпортсмена.Вставить("ДатаРождения",ФизЛицоСпортсмена.ДатаРождения);
    СтруктураДанныхСпортсмена.Вставить("ФИО",ФизЛицоСпортсмена.Наименование);
    СтруктураДанныхСпортсмена.Вставить("Фото",ПолучитьФотографиюСпортсмена(Спортсмен.Фото.ТекущаяВерсия));
    
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Спортсмены.Ссылка КАК Ссылка
    |ПОМЕСТИТЬ ВТСпортсмен
    |ИЗ
    |   Справочник.Спортсмены КАК Спортсмены
    |ГДЕ
    |   Спортсмены.Ссылка = &Спортсмен
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер, """") КАК Тренер,
    |   ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап.Наименование, """") КАК Этап,
    |   ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Организация, """") КАК Организация,
    |   ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.СпортивнаяПрограмма.Наименование, """") КАК СпортивнаяПрограмма,
    |   ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта, """") КАК ВидСпорта,
    |   ЕСТЬNULL(СборныеСпортсменовСрезПоследних.Сборная.Наименование, """") КАК Сборная,
    |   ЕСТЬNULL(СоставГруппыСрезПоследних.Группа.Наименование, """") КАК Группа,
    |   ЕСТЬNULL(СоставГруппыСрезПоследних.ТренерСборной, """") КАК ТренерГруппа,
    |   ЕСТЬNULL(СоставГруппыСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗачисленияГруппа,
    |   ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗачисленияЭтап,
    |   ЕСТЬNULL(СборныеСпортсменовСрезПоследних.ВидСпорта, """") КАК ВидСпортаСборная,
    |   ЕСТЬNULL(СборныеСпортсменовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВключенияВСборную
    |ИЗ
    |   Справочник.Спортсмены КАК Спортсмены
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
    |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
    |           ПО СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен
    |               И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта = ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта
    |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппы.СрезПоследних КАК СоставГруппыСрезПоследних
    |           ПО СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = СоставГруппыСрезПоследних.Спортсмен
    |               И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта = СоставГруппыСрезПоследних.ВидСпорта
    |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборныеСпортсменов.СрезПоследних КАК СборныеСпортсменовСрезПоследних
    |           ПО СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = СборныеСпортсменовСрезПоследних.Спортсмен
    |               И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта = СборныеСпортсменовСрезПоследних.ВидСпорта
    |       ПО (СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = Спортсмены.Ссылка)
    |ГДЕ
    |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен = &Спортсмен
    |   И СоставГруппыСрезПоследних.Спортсмен = &Спортсмен
    |   И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = &Спортсмен
    |   И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен = &Спортсмен";
    
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СтруктураДанныхСпортсмена.Группа = ВыборкаДетальныеЗаписи.Группа;
        СтруктураДанныхСпортсмена.Этап = ВыборкаДетальныеЗаписи.Этап;
        СтруктураДанныхСпортсмена.Сборная = ВыборкаДетальныеЗаписи.Сборная;
        СтруктураДанныхСпортсмена.СпортивнаяПрограмма = ВыборкаДетальныеЗаписи.СпортивнаяПрограмма;
        
        Если ВыборкаДетальныеЗаписи.Тренер <> "" Тогда
            
            СтруктураДанныхСпортсмена.ТренерФИО = ВыборкаДетальныеЗаписи.Тренер.Наименование;
            СтруктураДанныхСпортсмена.ТренерУИД = Строка(ВыборкаДетальныеЗаписи.Тренер.УникальныйИдентификатор());
            
        КонецЕсли; 
        
        Если ВыборкаДетальныеЗаписи.ТренерГруппа <> "" Тогда
            
            СтруктураДанныхСпортсмена.ТренерФИОГруппа = ВыборкаДетальныеЗаписи.ТренерГруппа.Наименование;
            СтруктураДанныхСпортсмена.ТренерУИДГруппа = Строка(ВыборкаДетальныеЗаписи.ТренерГруппа.УникальныйИдентификатор());
            
        КонецЕсли; 

        
        Если ВыборкаДетальныеЗаписи.Организация <> "" Тогда
            
            СтруктураДанныхСпортсмена.ОрганизацияУИД = Строка(ВыборкаДетальныеЗаписи.Организация.УникальныйИдентификатор()); 
            СтруктураДанныхСпортсмена.ОрганизацияНаименование =  ВыборкаДетальныеЗаписи.Организация.Наименование;
            
        КонецЕсли; 
        
        Если ВыборкаДетальныеЗаписи.ВидСпорта <> "" Тогда
            
            СтруктураДанныхСпортсмена.ВидСпортаНаименование = ВыборкаДетальныеЗаписи.ВидСпорта.Наименование;
            СтруктураДанныхСпортсмена.ВидСпортаУИД = ВыборкаДетальныеЗаписи.ВидСпорта.УникальныйИдентификатор();
            
        КонецЕсли;
        
         Если ВыборкаДетальныеЗаписи.ВидСпортаСборная <> "" Тогда
            
            СтруктураДанныхСпортсмена.ВидСпортаСборнаяНаименование = ВыборкаДетальныеЗаписи.ВидСпортаСборная.Наименование;
            СтруктураДанныхСпортсмена.ВидСпортаСборнаяУИД = ВыборкаДетальныеЗаписи.ВидСпортаСборная.УникальныйИдентификатор();
            
        КонецЕсли;
        
        СтруктураДанныхСпортсмена.ДатаЗачисленияГруппа  = ВыборкаДетальныеЗаписи.ДатаЗачисленияГруппа;
        СтруктураДанныхСпортсмена.ДатаЗачисленияЭтап = ВыборкаДетальныеЗаписи.ДатаЗачисленияЭтап;
        СтруктураДанныхСпортсмена.ДатаВключенияВСборную = ВыборкаДетальныеЗаписи.ДатаВключенияВСборную;
        
    КонецЦикла;
    
    СтруктураДостижений = СобратьДанныеСпортсменаДостижения(Спортсмен);
    СтруктураДопусков = СобратьДанныеСпортсменаДопуски(Спортсмен);
    СтруктураРаписания = СобратьДанныеСпортсменаРасписание(Спортсмен);
    СтруктураЗаявления = СобратьДанныеСпортсменаЗаявления(Спортсмен);
    
    СтруктураДанныхСпортсмена.Вставить("Достижения",СтруктураДостижений);
    СтруктураДанныхСпортсмена.Вставить("Допуски",СтруктураДопусков);
    СтруктураДанныхСпортсмена.Вставить("Расписание",СтруктураРаписания);
    СтруктураДанныхСпортсмена.Вставить("Заявления", СтруктураЗаявления);
    
    Возврат СтруктураДанныхСпортсмена;
    
КонецФункции

#Область ДостиженияСпортсмена

Функция СобратьДанныеСпортсменаДостижения(Спортсмен)
    
    СтруктураДостижений = Новый Структура("ДостиженияРазряды, ДостиженияСоревнования");
    СтруктураДостижений.ДостиженияРазряды = СобратьДанныеСпортсменаДостиженияРазряды(Спортсмен);
    СтруктураДостижений.ДостиженияСоревнования = СобратьДанныеСпортсменаДостиженияСоревнования(Спортсмен);
    
    Возврат  СтруктураДостижений;
    
КонецФункции

Функция СобратьДанныеСпортсменаДостиженияРазряды(Спортсмен)
    
    ВозвращаемоеЗначение = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПодтверждения КАК ДатаПодтверждения,
    |   ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПрисвоения КАК ДатаПрисвоения,
    |   ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд,
    |   СпортивнаяКлассификация.СрокДействия КАК СрокДействия
    |ПОМЕСТИТЬ ВТРазряды
    |ИЗ
    |   РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(, Спортсмен = &Спортсмен) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпортивнаяКлассификация КАК СпортивнаяКлассификация
    |       ПО ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд = СпортивнаяКлассификация.Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   ВТРазряды.ДатаПодтверждения КАК ДатаПодтверждения,
    |   ВТРазряды.ДатаПрисвоения КАК ДатаПрисвоения,
    |   СпортивнаяКлассификация.ПолноеНаименование КАК Разряд
    |ИЗ
    |   ВТРазряды КАК ВТРазряды
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпортивнаяКлассификация КАК СпортивнаяКлассификация
    |       ПО ВТРазряды.Разряд = СпортивнаяКлассификация.Ссылка";
    
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВозвращаемоеЗначение = Новый Структура("Разряд, ДатаПрисвоения, ДатаПодтверждения, СрокДействия");
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, ВыборкаДетальныеЗаписи);
            
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции

Функция СобратьДанныеСпортсменаДостиженияСоревнования(Спортсмен)
    
    ВозвращаемоеЗначение = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ИтоговыеРезультатыСоревнованияСрезПоследних.ДатаНачалаСоревнования КАК ДатаНачалаСоревнования,
    |   ИтоговыеРезультатыСоревнованияСрезПоследних.ТипРезультата КАК ТипРезультата,
    |   ИтоговыеРезультатыСоревнованияСрезПоследних.РезультатЧисло КАК РезультатЧисло,
    |   ИтоговыеРезультатыСоревнованияСрезПоследних.РезультатБулево КАК РезультатБулево,
    |   ИтоговыеРезультатыСоревнованияСрезПоследних.Место КАК Место,
    |   ИтоговыеРезультатыСоревнованияСрезПоследних.Соревнование.Наименование КАК Соревнование
    |ИЗ
    |   РегистрСведений.ИтоговыеРезультатыСоревнования.СрезПоследних КАК ИтоговыеРезультатыСоревнованияСрезПоследних
    |ГДЕ
    |   ИтоговыеРезультатыСоревнованияСрезПоследних.Спортсмен = &Спортсмен
    |
    |УПОРЯДОЧИТЬ ПО
    |   ДатаНачалаСоревнования";
    
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВозвращаемоеЗначение = Новый Структура("МассивСоревнований");
        
        МассивСоревнований = Новый Массив;
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            ВозвращаемоеЗначениеСтр = Новый Структура("ДатаНачалаСоревнования, Место, Соревнование, Результат");
            
            ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначениеСтр,ВыборкаДетальныеЗаписи);
            
            Если ВыборкаДетальныеЗаписи.ТипРезультата = Перечисления.ТипыРезультатов.Время Тогда
                
                ВозвращаемоеЗначениеСтр.Результат = Строка(УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(ВыборкаДетальныеЗаписи.РезультатЧисло));
                
            ИначеЕсли ВыборкаДетальныеЗаписи.ТипРезультата = Перечисления.ТипыРезультатов.Булево Тогда
                
                ВозвращаемоеЗначениеСтр.Результат = Строка(?(ВыборкаДетальныеЗаписи.РезультатБулево = Истина, "Выполнено", "Не выполнено"));
                
            Иначе 
                
                ВозвращаемоеЗначениеСтр.Результат = Строка(ВыборкаДетальныеЗаписи.РезультатЧисло);
                
            КонецЕсли;
            
            МассивСоревнований.Добавить(ВозвращаемоеЗначениеСтр);
            
        КонецЦикла;
        
        ВозвращаемоеЗначение.МассивСоревнований = МассивСоревнований;
        
    КонецЕсли;
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции

Функция СобратьДанныеСпортсменаЗаявления(Спортсмен)
    
    ВозвращаемоеЗначение = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЗаявленияНаПриемВСпортивноеУчреждение.Дата КАК Дата,
    |   ПРЕДСТАВЛЕНИЕ(ЗаявленияНаПриемВСпортивноеУчреждение.СтатусЗаявления) КАК Статус,
    |   ЗаявленияНаПриемВСпортивноеУчреждение.Ссылка КАК Ссылка
    |ИЗ
    |   Документ.ЗаявленияНаПриемВСпортивноеУчреждение КАК ЗаявленияНаПриемВСпортивноеУчреждение
    |ГДЕ
    |   ЗаявленияНаПриемВСпортивноеУчреждение.Спортсмен = &Спортсмен";
    
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВозвращаемоеЗначение = Новый Структура;
        МассивЗаявлений = Новый Массив;    	
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            ВозвращаемоеЗначениеСтр = Новый Структура("Дата, Статус");
            ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначениеСтр, ВыборкаДетальныеЗаписи);
            ВозвращаемоеЗначениеСтр.Вставить("ЗаявлениеУИД", Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
            МассивЗаявлений.Добавить(ВозвращаемоеЗначениеСтр);
            
        КонецЦикла;
        
        ВозвращаемоеЗначение.Вставить("МассивЗаявлений", МассивЗаявлений);
        
    КонецЕсли; 

    Возврат ВозвращаемоеЗначение;
    
КонецФункции

#КонецОбласти 

#Область ДопускиСпортсмена

Функция СобратьДанныеСпортсменаДопуски(Спортсмен)
    
    ВозвращаемоеЗначение = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ПРЕДСТАВЛЕНИЕ(РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних.ВидДопуска) КАК ВидДопуска,
    |   РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних.ДействуетДо КАК ДействуетДо,
    |   РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних.Период КАК ДатаПолученияДопуска
    |ИЗ
    |   РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям.СрезПоследних КАК РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних
    |ГДЕ
    |   РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних.Спортсмен = &Спортсмен";
    
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВозвращаемоеЗначение = Новый Структура("МассивДопусков");
        МассивДопусков = Новый Массив;
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            ВозвращаемоеЗначениеСтр = Новый Структура("ВидДопуска, ДействуетДо, ДатаПолученияДопуска");
            ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначениеСтр, ВыборкаДетальныеЗаписи);
            МассивДопусков.Добавить(ВозвращаемоеЗначениеСтр);
            
        КонецЦикла;
        
        ВозвращаемоеЗначение.МассивДопусков = МассивДопусков;
        
    КонецЕсли;
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции

#КонецОбласти 

#Область ФайлыСпортсмена

Функция СобратьДанныеСпортсменаФайлы(Спортсмен)
    
    СтруктураВозвратаДанных = Новый Структура;   
    
    Возврат СтруктураВозвратаДанных;
    
КонецФункции

#КонецОбласти 

#Область РасписаниеСпортсмена

Функция СобратьДанныеСпортсменаРасписание(Спортсмен)
    
    ВозвращаемоеЗначение = Неопределено;
    
    ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
    ДатаОкончания = КонецГода(ТекущаяДатаСеанса());
    
    ОтображаемыеБрони = СформироватьТаблицуЗаписейРасписания(ДатаНачала, ДатаОкончания, Спортсмен);
    
    ОтображаемыеБрони.Свернуть("СпортивныйОбъект, ДатаНачала, ДатаОкончания, ВесьДень, МестоЗанятия, ВидСпортаПредставление, Этап, ПометкаУдаления, Тренер", );

    Запрос = Новый Запрос;
    Запрос.Текст =  "ВЫБРАТЬ
                    |   ТЗ.ДатаНачала КАК ДатаНачала,
                    |   ТЗ.ДатаОкончания КАК ДатаОкончания,
                    |   ТЗ.ВесьДень КАК ВесьДень,
                    |   ТЗ.МестоЗанятия КАК МестоЗанятия,
                    |   ТЗ.ВидСпортаПредставление КАК ВидСпортаПредставление,
                    |   ТЗ.СпортивныйОбъект КАК СпортивныйОбъект,
                    |   ТЗ.Этап КАК Этап,
                    |   ТЗ.ПометкаУдаления КАК ПометкаУдаления,
                    |   ТЗ.Тренер КАК Тренер
                    |ПОМЕСТИТЬ ТаблицаЗаписейРасписания
                    |ИЗ
                    |   &ТЗ КАК ТЗ
                    |;
                    |
                    |////////////////////////////////////////////////////////////////////////////////
                    |ВЫБРАТЬ
                    |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап КАК Этап,
                    |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер КАК Тренер
                    |ПОМЕСТИТЬ ТЗГруппыСпортсмена
                    |ИЗ
                    |   РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(, Спортсмен = &Спортсмен) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
                    |;
                    |
                    |////////////////////////////////////////////////////////////////////////////////
                    |ВЫБРАТЬ
                    |   РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних.ВидДопуска КАК ВидДопуска,
                    |   РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних.ДействуетДо КАК ДействуетДо,
                    |   ЗНАЧЕНИЕ(Справочник.Тренеры.ПустаяСсылка) КАК Тренер
                    |ПОМЕСТИТЬ ТЗНапоминаниеДопуски
                    |ИЗ
                    |   РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям.СрезПоследних(, Спортсмен = &Спортсмен) КАК РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних
                    |ГДЕ
                    |   РегистрацияДопусковКСпортивнымСоревнованиямСрезПоследних.ДействуетДо МЕЖДУ &ДатаНачала И &ДатаОкончания
                    |;
                    |
                    |////////////////////////////////////////////////////////////////////////////////
                    |ВЫБРАТЬ
                    |   ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПодтверждения КАК ДатаПодтверждения,
                    |   ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд,
                    |   ЗНАЧЕНИЕ(Справочник.Тренеры.ПустаяСсылка) КАК Тренер
                    |ПОМЕСТИТЬ ТЗНапоминаниеРазряды
                    |ИЗ
                    |   РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(, Спортсмен = &Спортсмен) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
                    |ГДЕ
                    |   ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПодтверждения МЕЖДУ &ДатаНачала И &ДатаОкончания
                    |;
                    |
                    |////////////////////////////////////////////////////////////////////////////////
                    |ВЫБРАТЬ
                    |   ТаблицаЗаписейРасписания.Тренер КАК Тренер,
                    |   ПРЕДСТАВЛЕНИЕ(ТаблицаЗаписейРасписания.СпортивныйОбъект) КАК СпортивныйОбъект,
                    |   ТаблицаЗаписейРасписания.ДатаНачала КАК ДатаНачала,
                    |   ТаблицаЗаписейРасписания.ДатаОкончания КАК ДатаОкончания,
                    |   ТаблицаЗаписейРасписания.ВесьДень КАК ВесьДень,
                    |   0 КАК КоличествоПовторов,
                    |   ПРЕДСТАВЛЕНИЕ(ТаблицаЗаписейРасписания.МестоЗанятия) КАК Пояснение
                    |ИЗ
                    |   ТаблицаЗаписейРасписания КАК ТаблицаЗаписейРасписания
                    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗГруппыСпортсмена КАК ТЗГруппыСпортсмена
                    |       ПО ТаблицаЗаписейРасписания.Этап = ТЗГруппыСпортсмена.Этап
                    |           И ТаблицаЗаписейРасписания.Тренер = ТЗГруппыСпортсмена.Тренер
                    |ГДЕ
                    |   ТаблицаЗаписейРасписания.ПометкаУдаления = ЛОЖЬ
                    |
                    |ОБЪЕДИНИТЬ ВСЕ
                    |
                    |ВЫБРАТЬ
                    |   ТЗНапоминаниеДопуски.Тренер,
                    |   ПРЕДСТАВЛЕНИЕ(ТЗНапоминаниеДопуски.ВидДопуска),
                    |   НАЧАЛОПЕРИОДА(ТЗНапоминаниеДопуски.ДействуетДо, ДЕНЬ),
                    |   КОНЕЦПЕРИОДА(ТЗНапоминаниеДопуски.ДействуетДо, ДЕНЬ),
                    |   ИСТИНА,
                    |   0,
                    |   ""Продлить""
                    |ИЗ
                    |   ТЗНапоминаниеДопуски КАК ТЗНапоминаниеДопуски
                    |
                    |ОБЪЕДИНИТЬ ВСЕ
                    |
                    |ВЫБРАТЬ
                    |   ТЗНапоминаниеРазряды.Тренер,
                    |   ПРЕДСТАВЛЕНИЕ(ТЗНапоминаниеРазряды.Разряд),
                    |   НАЧАЛОПЕРИОДА(ТЗНапоминаниеРазряды.ДатаПодтверждения, ДЕНЬ),
                    |   КОНЕЦПЕРИОДА(ТЗНапоминаниеРазряды.ДатаПодтверждения, ДЕНЬ),
                    |   ИСТИНА,
                    |   0,
                    |   ""Подтвердить разряд""
                    |ИЗ
                    |   ТЗНапоминаниеРазряды КАК ТЗНапоминаниеРазряды";

    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ТекущаяДатаСеанса()));
    Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ТекущаяДатаСеанса()));
    Запрос.УстановитьПараметр("ДатаИсключенияИзГруппы", Дата("00010101000000"));
    Запрос.УстановитьПараметр("ТЗ", ОтображаемыеБрони); 
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        
        ВозвращаемоеЗначение = Новый Структура("МассивСобытий");
        МассивСобытий = Новый Массив;
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            ВозвращаемоеЗначениеСтр = Новый Структура("ТренерУИД, СпортивныйОбъект, ДатаНачала, ДатаОкончания, ВесьДень, КоличествоПовторов, Повторять, Пояснение");
            ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначениеСтр, ВыборкаДетальныеЗаписи);
            ВозвращаемоеЗначениеСтр.ТренерУИД = Строка(ВыборкаДетальныеЗаписи.Тренер.УникальныйИдентификатор());
            МассивСобытий.Добавить(ВозвращаемоеЗначениеСтр);
            
        КонецЦикла;
        
        ВозвращаемоеЗначение.МассивСобытий = МассивСобытий;
        
    КонецЕсли;
    
    Возврат ВозвращаемоеЗначение;
    
КонецФункции

Функция СформироватьТаблицуЗаписейРасписания(ДатаНачала, ДатаОкончания, Спортсмен)

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СпортивныеОбъекты.СпортивныйОбъект КАК СпортивныйОбъект,
        |   СпортивныеОбъекты.Тренер КАК Тренер,
        |   СпортивныеОбъекты.Организация КАК Организация
        |ПОМЕСТИТЬ ВТ_СпортОбъекты
        |ИЗ
        |   РегистрСведений.СпортивныеОбъекты КАК СпортивныеОбъекты
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
        |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап КАК Этап,
        |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер КАК Тренер,
        |   ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Организация КАК Организация
        |ПОМЕСТИТЬ ВТ_СоставУчащихся
        |ИЗ
        |   РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(&Период, ) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(&Период, ) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
        |       ПО СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен
        |           И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Организация = ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Организация
        |           И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта = ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта
        |           И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаНачалаОбучения <= ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Период
        |ГДЕ
        |   СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_СпортОбъекты.СпортивныйОбъект КАК СпортивныйОбъект,
        |   ВТ_СпортОбъекты.Тренер КАК Тренер,
        |   ВТ_СпортОбъекты.Организация КАК Организация,
        |   ВТ_СоставУчащихся.Спортсмен КАК Спортсмен
        |ПОМЕСТИТЬ ВТ_Данные
        |ИЗ
        |   ВТ_СпортОбъекты КАК ВТ_СпортОбъекты
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставУчащихся КАК ВТ_СоставУчащихся
        |       ПО ВТ_СпортОбъекты.Тренер = ВТ_СоставУчащихся.Тренер
        |           И ВТ_СпортОбъекты.Организация = ВТ_СоставУчащихся.Организация
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВТ_Данные.СпортивныйОбъект КАК СпортивныйОбъект,
        |   ВТ_Данные.Тренер КАК Тренер,
        |   ВТ_Данные.Организация КАК Организация
        |ПОМЕСТИТЬ ВТСпортивныеОбъектыСпортсмена
        |ИЗ
        |   ВТ_Данные КАК ВТ_Данные
        |ГДЕ
        |   ВТ_Данные.Спортсмен = &Спортсмен
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТ_Данные.СпортивныйОбъект,
        |   ВТ_Данные.Тренер,
        |   ВТ_Данные.Организация
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   БроньСпортивногоОбъекта.Ссылка КАК Ссылка,
        |   БроньСпортивногоОбъекта.ДатаНачала КАК ДатаНачала,
        |   БроньСпортивногоОбъекта.ДатаОкончания КАК ДатаОкончания,
        |   БроньСпортивногоОбъекта.ВесьДень КАК ВесьДень,
        |   БроньСпортивногоОбъекта.ТипЗаписи КАК ТипЗаписи,
        |   БроньСпортивногоОбъекта.МестоЗанятия КАК МестоЗанятия,
        |   БроньСпортивногоОбъекта.ПометкаУдаления КАК ПометкаУдаления,
        |   БроньСпортивногоОбъекта.ВидСпорта КАК ВидСпорта,
        |   БроньСпортивногоОбъекта.ВидСпорта.Представление КАК ВидСпортаПредставление,
        |   БроньСпортивногоОбъекта.Тренер КАК Тренер,
        |   БроньСпортивногоОбъекта.Тренер.Представление КАК ТренерПредставление,
        |   БроньСпортивногоОбъекта.Этап КАК Этап,
        |   БроньСпортивногоОбъекта.Этап.Представление КАК ЭтапПредставление,
        |   БроньСпортивногоОбъекта.Зеленый КАК Зеленый,
        |   БроньСпортивногоОбъекта.Красный КАК Красный,
        |   БроньСпортивногоОбъекта.Синий КАК Синий,
        |   БроньСпортивногоОбъекта.СпортивныйОбъект КАК СпортивныйОбъект
        |ИЗ
        |   Документ.БроньСпортивногоОбъекта КАК БроньСпортивногоОбъекта
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпортивныеОбъектыСпортсмена КАК ВТСпортивныеОбъектыСпортсмена
        |       ПО БроньСпортивногоОбъекта.СпортивныйОбъект = ВТСпортивныеОбъектыСпортсмена.СпортивныйОбъект
        |           И БроньСпортивногоОбъекта.Организация = ВТСпортивныеОбъектыСпортсмена.Организация
        |           И БроньСпортивногоОбъекта.Тренер = ВТСпортивныеОбъектыСпортсмена.Тренер
        |ГДЕ
        |   БроньСпортивногоОбъекта.ДатаНачала < &ДатаОкончания
        |   И БроньСпортивногоОбъекта.ДатаОкончания > &ДатаНачала
        |   И БроньСпортивногоОбъекта.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
        |   И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ
        |   И БроньСпортивногоОбъекта.Проведен = ИСТИНА
        |   И БроньСпортивногоОбъекта.МестоЗанятия.ДоступноБронирование = ИСТИНА
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   БроньСпортивногоОбъекта.Ссылка КАК Ссылка,
        |   БроньСпортивногоОбъекта.ДатаНачала КАК ДатаНачала,
        |   БроньСпортивногоОбъекта.ДатаОкончания КАК ДатаОкончания,
        |   БроньСпортивногоОбъекта.ВесьДень КАК ВесьДень,
        |   БроньСпортивногоОбъекта.ТипЗаписи КАК ТипЗаписи,
        |   БроньСпортивногоОбъекта.МестоЗанятия КАК МестоЗанятия,
        |   БроньСпортивногоОбъекта.ПометкаУдаления КАК ПометкаУдаления,
        |   БроньСпортивногоОбъекта.ВидСпорта КАК ВидСпорта,
        |   БроньСпортивногоОбъекта.ВидСпорта.Представление КАК ВидСпортаПредставление,
        |   БроньСпортивногоОбъекта.Тренер КАК Тренер,
        |   БроньСпортивногоОбъекта.Тренер.Представление КАК ТренерПредставление,
        |   БроньСпортивногоОбъекта.Этап КАК Этап,
        |   БроньСпортивногоОбъекта.Этап.Представление КАК ЭтапПредставление,
        |   БроньСпортивногоОбъекта.Зеленый КАК Зеленый,
        |   БроньСпортивногоОбъекта.Красный КАК Красный,
        |   БроньСпортивногоОбъекта.Синий КАК Синий,
        |   БроньСпортивногоОбъекта.ИсключенияПовторения.(
        |       ДатаИсключения КАК ДатаИсключения,
        |       ЗаписьИсключения КАК ЗаписьИсключения
        |   ) КАК ИсключенияПовторения,
        |   БроньСпортивногоОбъекта.ПовторениеПоДням.(
        |       ДеньНедели КАК ДеньНедели,
        |       НомерВхождения КАК НомерВхождения
        |   ) КАК ПовторениеПоДням,
        |   БроньСпортивногоОбъекта.ДатаНачалаПовторения КАК ДатаНачалаПовторения,
        |   БроньСпортивногоОбъекта.ДатаОкончанияПовторения КАК ДатаОкончанияПовторения,
        |   БроньСпортивногоОбъекта.ИнтервалПовторения КАК ИнтервалПовторения,
        |   БроньСпортивногоОбъекта.КоличествоПовторов КАК КоличествоПовторов,
        |   БроньСпортивногоОбъекта.ПовторениеПоДнямМесяца КАК ПовторениеПоДнямМесяца,
        |   БроньСпортивногоОбъекта.ПовторениеПоМесяцам КАК ПовторениеПоМесяцам,
        |   БроньСпортивногоОбъекта.ЧастотаПовторения КАК ЧастотаПовторения,
        |   БроньСпортивногоОбъекта.СпортивныйОбъект КАК СпортивныйОбъект
        |ИЗ
        |   Документ.БроньСпортивногоОбъекта КАК БроньСпортивногоОбъекта
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпортивныеОбъектыСпортсмена КАК ВТСпортивныеОбъектыСпортсмена
        |       ПО БроньСпортивногоОбъекта.СпортивныйОбъект = ВТСпортивныеОбъектыСпортсмена.СпортивныйОбъект
        |           И БроньСпортивногоОбъекта.Организация = ВТСпортивныеОбъектыСпортсмена.Организация
        |           И БроньСпортивногоОбъекта.Тренер = ВТСпортивныеОбъектыСпортсмена.Тренер
        |ГДЕ
        |   БроньСпортивногоОбъекта.ДатаНачалаПовторения < &ДатаОкончания
        |   И БроньСпортивногоОбъекта.ДатаОкончанияПовторения >= &ДатаНачала
        |   И БроньСпортивногоОбъекта.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
        |   И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ
        |   И БроньСпортивногоОбъекта.Проведен = ИСТИНА
        |   И БроньСпортивногоОбъекта.МестоЗанятия.ДоступноБронирование = ИСТИНА
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   БроньСпортивногоОбъекта.Ссылка,
        |   БроньСпортивногоОбъекта.ДатаНачала,
        |   БроньСпортивногоОбъекта.ДатаОкончания,
        |   БроньСпортивногоОбъекта.ВесьДень,
        |   БроньСпортивногоОбъекта.ТипЗаписи,
        |   БроньСпортивногоОбъекта.МестоЗанятия,
        |   БроньСпортивногоОбъекта.ПометкаУдаления,
        |   БроньСпортивногоОбъекта.ВидСпорта,
        |   БроньСпортивногоОбъекта.ВидСпорта.Представление,
        |   БроньСпортивногоОбъекта.Тренер,
        |   БроньСпортивногоОбъекта.Тренер.Представление,
        |   БроньСпортивногоОбъекта.Этап,
        |   БроньСпортивногоОбъекта.Этап.Представление,
        |   БроньСпортивногоОбъекта.Зеленый,
        |   БроньСпортивногоОбъекта.Красный,
        |   БроньСпортивногоОбъекта.Синий,
        |   БроньСпортивногоОбъекта.ИсключенияПовторения.(
        |       ДатаИсключения,
        |       ЗаписьИсключения
        |   ),
        |   БроньСпортивногоОбъекта.ПовторениеПоДням.(
        |       ДеньНедели,
        |       НомерВхождения
        |   ),
        |   БроньСпортивногоОбъекта.ДатаНачалаПовторения,
        |   БроньСпортивногоОбъекта.ДатаОкончанияПовторения,
        |   БроньСпортивногоОбъекта.ИнтервалПовторения,
        |   БроньСпортивногоОбъекта.КоличествоПовторов,
        |   БроньСпортивногоОбъекта.ПовторениеПоДнямМесяца,
        |   БроньСпортивногоОбъекта.ПовторениеПоМесяцам,
        |   БроньСпортивногоОбъекта.ЧастотаПовторения,
        |   БроньСпортивногоОбъекта.СпортивныйОбъект
        |ИЗ
        |   Документ.БроньСпортивногоОбъекта КАК БроньСпортивногоОбъекта
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпортивныеОбъектыСпортсмена КАК ВТСпортивныеОбъектыСпортсмена
        |       ПО БроньСпортивногоОбъекта.СпортивныйОбъект = ВТСпортивныеОбъектыСпортсмена.СпортивныйОбъект
        |           И БроньСпортивногоОбъекта.Организация = ВТСпортивныеОбъектыСпортсмена.Организация
        |           И БроньСпортивногоОбъекта.Тренер = ВТСпортивныеОбъектыСпортсмена.Тренер
        |ГДЕ
        |   БроньСпортивногоОбъекта.ДатаНачалаПовторения < &ДатаОкончания
        |   И БроньСпортивногоОбъекта.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
        |   И БроньСпортивногоОбъекта.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
        |   И БроньСпортивногоОбъекта.ПометкаУдаления = ЛОЖЬ
        |   И БроньСпортивногоОбъекта.Проведен = ИСТИНА
        |   И БроньСпортивногоОбъекта.МестоЗанятия.ДоступноБронирование = ИСТИНА";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
    Запрос.УстановитьПараметр("Спортсмен", Спортсмен);
    
    РезультатЗапроса = Запрос.ВыполнитьПакет();
    
    ТаблицаРасписания = РезультатЗапроса[4].Выгрузить();
    
    Выборка = РезультатЗапроса[5].Выбрать();
    
    РаботаСРабочимКалендаремСервер.ЗаполнитьТаблицуПовторяющимисяСобытиями(ТаблицаРасписания, Выборка, ДатаНачала, ДатаОкончания);
    
    Возврат ТаблицаРасписания;
    
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти 

#КонецОбласти