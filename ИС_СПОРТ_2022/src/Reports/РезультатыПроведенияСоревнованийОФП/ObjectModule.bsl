
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДатаНачала = Дата(1,1,1);
	ДатаОкончания = Дата(1,1,1);
	УстановливатьПараметрНаПериод = Ложь;
	
	Параметр_ПериодОтчета = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ПериодОтчета");
	Если НЕ Параметр_ПериодОтчета = Неопределено Тогда
		ДатаНачала    = Параметр_ПериодОтчета.Значение.ДатаНачала;
		ДатаОкончания = Параметр_ПериодОтчета.Значение.ДатаОкончания;
		УстановливатьПараметрНаПериод = Истина;
	КонецЕсли;	
	
	СкдОсновная = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Если УстановливатьПараметрНаПериод Тогда
		СкдОсновная.НаборыДанных[0].Запрос = СтрЗаменить(СкдОсновная.НаборыДанных[0].Запрос,"Истина"," РезультатыВыполненияПоказателейИНормативов.Период <= &ДатаОкончания И РезультатыВыполненияПоказателейИНормативов.Период >= &ДатаНачала");
	КонецЕсли;
	
	КомпоновщикНастроек_ = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек_.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СкдОсновная));
    КомпоновщикНастроек_.ЗагрузитьНастройки(СкдОсновная.НастройкиПоУмолчанию);
    Настройки_ = КомпоновщикНастроек_.Настройки;
	
	Если УстановливатьПараметрНаПериод Тогда
		Настройки_.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
		Настройки_.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	Для Каждого Отбор Из НастройкиОтчета.Отбор.Элементы Цикл
		УстановитьОтборСКД(КомпоновщикНастроек_, Отбор.ЛевоеЗначение, Отбор.ВидСравнения, Отбор.ПравоеЗначение, Отбор.Использование);
	КонецЦикла;	
	
	ДанныеРасшифровки_ = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета_ = Новый КомпоновщикМакетаКомпоновкиДанных; 
    МакетКомпоновки_ = КомпоновщикМакета_.Выполнить(СкдОсновная, Настройки_, ДанныеРасшифровки_,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 

    ПроцессорКомпоновки_ = Новый ПроцессорКомпоновкиДанных; 
    ПроцессорКомпоновки_.Инициализировать(МакетКомпоновки_, ,ДанныеРасшифровки_, Истина); 
	
	ТаблицаРезультатовСоревнования = Новый ТаблицаЗначений;
	
	ПроцессорВывода_ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 
	ПроцессорВывода_.УстановитьОбъект(ТаблицаРезультатовСоревнования);
		
	ПроцессорВывода_.Вывести(ПроцессорКомпоновки_);		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таблицаНормативов", ТаблицаРезультатовСоревнования);
	
	ТекстЗапроса = "";
	// {Рарус adilas #- -Sonar 2021.06.29
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
	ТекстЗапроса, 
	Новый Структура("Спортсмен, СтартовыйНомер, Организация, ВидСпорта, УчебныйГод, ДокументОснование, Очки, МеждународнаяВозрастнаяГруппа, ТекущийУчебныйГод"),
	"ВТ_ТаблицаДанных",
	"таблицаНормативов");
	
	Запрос.Текст = ТекстЗапроса +"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаДанных.Спортсмен КАК Спортсмен,
				   |	ВТ_ТаблицаДанных.СтартовыйНомер КАК СтартовыйНомер,
	               |	ВТ_ТаблицаДанных.ДокументОснование КАК ДокументОснование,
				   |	ВТ_ТаблицаДанных.Организация КАК Организация,
				   |	ВТ_ТаблицаДанных.ВидСпорта КАК ВидСпорта,
				   |	ВТ_ТаблицаДанных.УчебныйГод КАК УчебныйГод,
				   |	ВТ_ТаблицаДанных.ТекущийУчебныйГод КАК ТекущийУчебныйГод,
	               |	СУММА(ВТ_ТаблицаДанных.Очки) КАК Очки,
	               |	ВТ_ТаблицаДанных.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
	               |	ФизическиеЛица.Пол КАК Пол
	               |ПОМЕСТИТЬ ВТ_РасчетИтоговогоМеста
	               |ИЗ
	               |	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО ВТ_ТаблицаДанных.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТаблицаДанных.Спортсмен,
				   |	ВТ_ТаблицаДанных.СтартовыйНомер,
	               |	ВТ_ТаблицаДанных.ДокументОснование,
	               |	ВТ_ТаблицаДанных.МеждународнаяВозрастнаяГруппа,
				   |	ВТ_ТаблицаДанных.Организация,
				   |	ВТ_ТаблицаДанных.ВидСпорта,
				   |	ВТ_ТаблицаДанных.УчебныйГод,
				   |	ВТ_ТаблицаДанных.ТекущийУчебныйГод,
	               |	ФизическиеЛица.Пол
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РасчетИтоговогоМеста.Спортсмен КАК Спортсмен,
				   |	ВТ_РасчетИтоговогоМеста.СтартовыйНомер КАК СтартовыйНомер,
				   |    ""ИТОГО"" КАК Норматив,
	               |	ВТ_РасчетИтоговогоМеста.ДокументОснование КАК ДокументОснование,
				   |	ВТ_РасчетИтоговогоМеста.Организация КАК Организация,
				   |	ВТ_РасчетИтоговогоМеста.ВидСпорта КАК ВидСпорта,
				   |	ВТ_РасчетИтоговогоМеста.УчебныйГод КАК УчебныйГод,
				   |	ВТ_РасчетИтоговогоМеста.ТекущийУчебныйГод КАК ТекущийУчебныйГод,
	               |	ВТ_РасчетИтоговогоМеста.Очки КАК Очки,
	               |	ВТ_РасчетИтоговогоМеста.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
	               |	ВТ_РасчетИтоговогоМеста.Пол КАК Пол
	               |ИЗ
	               |	ВТ_РасчетИтоговогоМеста КАК ВТ_РасчетИтоговогоМеста
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Очки
				   |ИТОГИ ПО
				   |    ДокументОснование,
				   |    МеждународнаяВозрастнаяГруппа,
				   |    Пол";
	
	ВыборкаДокументОснование = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументОснование.Следующий() Цикл
		
		ВыборкаГруппа = ВыборкаДокументОснование.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГруппа.Следующий() Цикл
			
			ВыборкаПол = ВыборкаГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПол.Следующий() Цикл
				
				МинимальноеЗначение = 0;
				Место               = 0;
				
				Индекс = 0;
				
				Выборка = ВыборкаПол.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					СтрокаРезультатовСоренования = ТаблицаРезультатовСоревнования.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРезультатовСоренования,Выборка);
					СтрокаРезультатовСоренования.Результат = NULL;
					
					Если Выборка.Очки = 0 Тогда
						Продолжить;
					КонецЕсли;	
					Если Выборка.Очки > МинимальноеЗначение Тогда
						МинимальноеЗначение = Выборка.Очки;
						Место =  Индекс + 1;
						СтрокаРезультатовСоренования.Место = Место;
					Иначе
						СтрокаРезультатовСоренования.Место = Место;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки); 

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ТЗ_ДанныеРегистра", ТаблицаРезультатовСоревнования) , ДанныеРасшифровки, Истина); 
 
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
		
КонецПроцедуры

Процедура УстановитьОтборСКД(КомпоновщикНастроекСКД, ИмяПоля, ВидОтбора, Значение, Использовать)
	
	ПолеОтбора = ИмяПоля;
	ОтборыКомпановщика = КомпоновщикНастроекСКД.Настройки.Отбор.Элементы;
	Для Каждого Стр Из ОтборыКомпановщика Цикл
		Если Стр.ЛевоеЗначение = ПолеОтбора Тогда
			Отбор = Стр;
		КонецЕсли;
	КонецЦикла;
	Если Отбор = Неопределено Тогда
		Отбор = КомпоновщикНастроекСКД.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение  = ПолеОтбора;
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		Отбор.ВидСравнения   = ВидОтбора;
		Отбор.Использование  = Использовать;
		Отбор.ПравоеЗначение  = Значение;
	Иначе
		Отбор.Использование  = Ложь;
	КонецЕсли;
	
КонецПроцедуры











