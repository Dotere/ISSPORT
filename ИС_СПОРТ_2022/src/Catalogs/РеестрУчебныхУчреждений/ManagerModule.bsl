// {Рарус ivaart IN-15416 Реестр учебных учреждений. Перечень  2021.08.30 
// Создание предопределённых элементов по макету

//Процедура заполняет справочник данными из макета
Функция  ЗаполнитьПредопределёнными() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникРеестрУчебныхУчреждений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидыИнформации = Новый Соответствие();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидыИнформации.Вставить(ВыборкаДетальныеЗаписи.Наименование, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;


	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрУчебныхУчреждений.Код КАК Код,
	|	РеестрУчебныхУчреждений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РеестрУчебныхУчреждений КАК РеестрУчебныхУчреждений";
	РеестрУУ = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчебныеУчреждения.Код КАК Код,
		|	УчебныеУчреждения.Наименование КАК Наименование,
		|	УчебныеУчреждения.ПолноеНаименование КАК ПолноеНаименование,
		|	УчебныеУчреждения.КонтактнаяИнформация.(
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация
		|ИЗ
		|	Справочник.УчебныеУчреждения КАК УчебныеУчреждения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сообщение = "Обновление выполнено";
	Пока Выборка.Следующий() Цикл
		Попытка
			Элемент = Справочники.РеестрУчебныхУчреждений.СоздатьЭлемент();
			Элемент.Код = Выборка.Код;
			Элемент.Наименование = Выборка.Наименование;
			Элемент.ПолноеНаименование = Выборка.ПолноеНаименование;
			Элемент.КонтактнаяИнформация.Загрузить(Выборка.КонтактнаяИнформация.Выгрузить());
			ИзменитьВидИнформацииВТаблице(Элемент.КонтактнаяИнформация, ВидыИнформации);
			Элемент.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если СтрНайти(Ошибка, """Код"" не уникально") <> 0 тогда
				Строка = РеестрУУ.Найти(Элемент.Код,"Код");
				Если Не Строка = Неопределено тогда
					Запись = Строка.Ссылка.ПолучитьОбъект();
					Если ЗаполнениеИПроверка(Запись, Элемент, ВидыИнформации) тогда
						Запись.Записать();
						Сообщение = Сообщение+"
						|	Учреждение обновлено "+Выборка.Наименование;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	возврат Сообщение; 
КонецФункции

Функция ЗаполнениеИПроверка(Данные, ДанныеЗаполнения, ВидыИнформации)
	ИзмененияБыли = Ложь;
	Если Данные.Наименование<>ДанныеЗаполнения.Наименование тогда
		Данные.Наименование = ДанныеЗаполнения.Наименование;
		ИзмененияБыли = Истина;
	КонецЕсли;
	Если Данные.ПолноеНаименование<>ДанныеЗаполнения.ПолноеНаименование тогда
		Данные.Наименование = ДанныеЗаполнения.Наименование;
		ИзмененияБыли = Истина;
	КонецЕсли;
	
	Если Данные.КонтактнаяИнформация.Количество() <> ДанныеЗаполнения.КонтактнаяИнформация.Количество() ИЛИ ПроверкаТаблиц(Данные, ДанныеЗаполнения.КонтактнаяИнформация) тогда
		Данные.КонтактнаяИнформация.Загрузить(ДанныеЗаполнения.КонтактнаяИнформация.Выгрузить());
		ИзменитьВидИнформацииВТаблице(Данные.КонтактнаяИнформация, ВидыИнформации);
		ИзмененияБыли = Истина;
	КонецЕсли;
	
	Возврат ИзмененияБыли;
КонецФункции

Функция ПроверкаТаблиц(Данные, Таблица)
	ПромежуточнаяТаблица = Данные.КонтактнаяИнформация.Выгрузить();
	НоваяТаблица = Таблица.Выгрузить();
	
	Колонки = "";
	Для Каждого Колонка Из ПромежуточнаяТаблица.Колонки Цикл 
		Колонки = Колонки + ?(Колонки = "", Колонка.Имя, ", "+Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Строка ИЗ НоваяТаблица Цикл 
		НоваяСтрока = ПромежуточнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	ПромежуточнаяТаблица.Свернуть(Колонки);
	
	Если ПромежуточнаяТаблица.Количество() <> Данные.КонтактнаяИнформация.Количество() тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ИзменитьВидИнформацииВТаблице(Таблица, ВидыИнформации)
	Для Каждого Элемент Из Таблица Цикл 
		Элемент.Вид = ВидыИнформации[Элемент.Вид.Наименование];
	КонецЦикла;
КонецПроцедуры

//Процедура удаляет все записи справочника
Процедура УдалитьЗаписи() Экспорт
	Выборка = Справочники.РеестрУчебныхУчреждений.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;
КонецПроцедуры
// }Рарус ivaart IN-15416 Реестр учебных учреждений. Перечень  2021.08.30

// {Рарус dotere #23326 -Заполнение реестра из макета  2021.12.29
Процедура ЗаполнитьИзМакета() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникРеестрУчебныхУчреждений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидыИнформации = Новый Соответствие();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидыИнформации.Вставить(ВыборкаДетальныеЗаписи.Наименование, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Макет = ПолучитьМакет("МакетРеестрУчреждений");
	
	ВыводитьОповещение = Ложь;
	
	ПостроительОтчета  = Новый ПостроительОтчета;                                    
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(Макет.Область(1, 1, Макет.ВысотаТаблицы, 3));
	ПостроительОтчета.Выполнить();
	
	ТабЗначМакета = ПостроительОтчета.Результат.Выгрузить();
	ТабЗначМакета.Свернуть("Наименование,ПолноеНаименование,Код");
	
	ПостроительОтчета  = Новый ПостроительОтчета;                                    
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(Макет.Область(1, 4, Макет.ВысотаТаблицы, Макет.ШиринаТаблицы)); 
	ПостроительОтчета.Выполнить();
	ТабЗначМакетаКонИнфор = ПостроительОтчета.Результат.Выгрузить();
	ТабЗначМакета.Колонки.Добавить("КонтактнаяИнформация",Новый ОписаниеТипов("ТаблицаЗначений"));
	Для каждого Учреждения Из ТабЗначМакета Цикл
		Параметры = Новый Структура;
		Параметры.Вставить("НаименованиеУчреждения",Учреждения.Наименование);
		Массив = ТабЗначМакетаКонИнфор.НайтиСтроки(Параметры);
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12)));
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("Тип",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("Вид",Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("Представление");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("Страна");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("Регион");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("Город");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("АдресЭП");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("ДоменноеИмяСервера");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("НомерТелефона");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("НомерТелефонаБезКодов");
		Учреждения.КонтактнаяИнформация.Колонки.Добавить("Значение");
		Отсчет = 1;
		Для Каждого Строка Из Массив Цикл
			СтрокаИнформации = Учреждения.КонтактнаяИнформация.Добавить();
			СтрокаИнформации.НомерСтроки = Отсчет;
			Отсчет = Отсчет + 1;
			Если Строка.Тип = "Адрес электронной почты" Тогда
				 СтрокаИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			ИначеЕсли Строка.Тип = "" Тогда
				 СтрокаИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка();
			Иначе
				 СтрокаИнформации.Тип = Перечисления.ТипыКонтактнойИнформации[Строка.Тип];
			КонецЕсли;
			СтрокаИнформации.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Строка.Вид);
			СтрокаИнформации.Представление = Строка.Представление;
			СтрокаИнформации.ЗначенияПолей = Строка.ЗначенияПолей;
			СтрокаИнформации.Страна = Строка.Страна;
			СтрокаИнформации.Регион = Строка.Регион;
			СтрокаИнформации.Город = Строка.Город;
			СтрокаИнформации.АдресЭП = Строка.АдресЭП;
			СтрокаИнформации.ДоменноеИмяСервера = Строка.ДоменноеИмяСервера;
			СтрокаИнформации.НомерТелефона = Строка.НомерТелефона;
			СтрокаИнформации.НомерТелефонаБезКодов = Строка.НомерТелефонаБезКодов;
			СтрокаИнформации.Значение = Строка.Значение;
		КонецЦикла
	КонецЦикла;
	Для Каждого Выборка Из ТабЗначМакета Цикл
		Если Справочники.РеестрУчебныхУчреждений.НайтиПоКоду(Выборка.Код) = Справочники.РеестрУчебныхУчреждений.ПустаяСсылка() Тогда
			Элемент = Справочники.РеестрУчебныхУчреждений.СоздатьЭлемент();
			Элемент.Код = Выборка.Код;
			Элемент.Наименование = Выборка.Наименование;
			Элемент.ПолноеНаименование = Выборка.ПолноеНаименование;
			Элемент.КонтактнаяИнформация.Загрузить(Выборка.КонтактнаяИнформация);
			ИзменитьВидИнформацииВТаблице(Элемент.КонтактнаяИнформация, ВидыИнформации);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
		КонецЕсли	
	КонецЦикла;
КонецПроцедуры
// }Рарус dotere #23326 -Заполнение реестра из макета  2021.12.29
