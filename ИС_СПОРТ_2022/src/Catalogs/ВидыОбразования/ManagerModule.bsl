#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет первоначальное заполнение классификатора 
Процедура НачальноеЗаполнение() Экспорт
	
	СоответствиеЭлементовФасету = Новый Соответствие;
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.ВысшееОбразование, 30);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.НачальноеПрофессиональноеОбразование, 30);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.ПослевузовскоеОбразование, 30);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.СреднееПолноеОбщееОбразование, 30);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.СреднееПрофессиональноеОбразование, 30);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.НеполноеВысшееОбразование, 30);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.ОсновноеОбщееОбразование, 30);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.Аспирантура, 34);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.Ординатура, 34);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.Адъюнктура, 34);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.Интернатура, 34);
	СоответствиеЭлементовФасету.Вставить(Справочники.ВидыОбразования.Докторантура, 34);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОбразованияФизическихЛиц.Ссылка,
		|	ВидыОбразованияФизическихЛиц.ФасетОКИН
		|ИЗ
		|	Справочник.ВидыОбразованияФизическихЛиц КАК ВидыОбразованияФизическихЛиц
		|ГДЕ
		|	ВидыОбразованияФизическихЛиц.Предопределенный";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ФасетОКИН <> СоответствиеЭлементовФасету.Получить(Выборка.Ссылка) Тогда
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ФасетОКИН = СоответствиеЭлементовФасету.Получить(Выборка.Ссылка);
			СправочникОбъект.ДополнительныеСвойства.Вставить("ПодборИзКлассификатора");
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
		КонецЕсли; 
		
	КонецЦикла;
		
	
	КлассификаторТаблица = Новый ТаблицаЗначений;
	КлассификаторТаблица.Колонки.Добавить("Код");
	КлассификаторТаблица.Колонки.Добавить("Наименование");
	КлассификаторТаблица.Колонки.Добавить("ФасетОКИН");
	
	НоваяСтрокаКлассификатора = КлассификаторТаблица.Добавить();
	НоваяСтрокаКлассификатора.Код = "01";
	НоваяСтрокаКлассификатора.Наименование = НСтр("ru='Дошкольное образование'");
	НоваяСтрокаКлассификатора.ФасетОКИН = 30;
	
	НоваяСтрокаКлассификатора = КлассификаторТаблица.Добавить();
	НоваяСтрокаКлассификатора.Код = "02";
	НоваяСтрокаКлассификатора.Наименование = НСтр("ru='Начальное (общее) образование'");
	НоваяСтрокаКлассификатора.ФасетОКИН = 30;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидыОбразованияФизическихЛиц.Код,
	               |	ВидыОбразованияФизическихЛиц.Наименование,
	               |	ВидыОбразованияФизическихЛиц.ФасетОКИН,
	               |	ВидыОбразованияФизическихЛиц.Ссылка
	               |ИЗ
	               |	Справочник.ВидыОбразованияФизическихЛиц КАК ВидыОбразованияФизическихЛиц
	               |ГДЕ
	               |	НЕ ВидыОбразованияФизическихЛиц.Предопределенный";
	
	ТаблицаСуществующих = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаКлассификатора ИЗ КлассификаторТаблица Цикл
		
		СправочникОбъект = Неопределено;
		
		СтруктураПоиска = Новый Структура("Код");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКлассификатора);
		НайденныеСтроки = ТаблицаСуществующих.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СправочникОбъект = Справочники.ВидыОбразования.СоздатьЭлемент();
		ИначеЕсли НайденныеСтроки[0].ФасетОКИН <> СтрокаКлассификатора.ФасетОКИН Тогда
			СправочникОбъект = НайденныеСтроки[0].Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если СправочникОбъект <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СправочникОбъект, СтрокаКлассификатора);
			СправочникОбъект.ДополнительныеСвойства.Вставить("ПодборИзКлассификатора");
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
		КонецЕсли; 
			
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьВидыОбразованияПредопределенными() Экспорт
	
	НачальноеЗаполнение();
	
	ВидыОбразования = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОбразованияФизическихЛиц.Ссылка,
		|	ВидыОбразованияФизическихЛицПредопределенные.Ссылка КАК СсылкаПредопределенного,
		|	ВидыОбразованияФизическихЛиц.ПометкаУдаления
		|ИЗ
		|	Справочник.ВидыОбразованияФизическихЛиц КАК ВидыОбразованияФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОбразованияФизическихЛиц КАК ВидыОбразованияФизическихЛицПредопределенные
		|		ПО ВидыОбразованияФизическихЛиц.Код = ВидыОбразованияФизическихЛицПредопределенные.Код
		|			И (ВидыОбразованияФизическихЛицПредопределенные.Предопределенный)
		|ГДЕ
		|	(ВидыОбразованияФизическихЛиц.Код = ""03""
		|			ИЛИ ВидыОбразованияФизическихЛиц.Код = ""15"")
		|	И НЕ ВидыОбразованияФизическихЛиц.Предопределенный";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ПометкаУдаления Тогда
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ПометкаУдаления = Истина;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
		КонецЕсли; 
		
		ВидыОбразования.Добавить(Выборка.Ссылка);
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбразованиеФЛ.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	РегистрСведений.УдалитьОбразованиеФизическихЛиц КАК ОбразованиеФЛ
		|ГДЕ
		|	ОбразованиеФЛ.ВидОбразования В(&ВидыОбразования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТФизическиеЛица.ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛица КАК ВТФизическиеЛица";
		
	Запрос.УстановитьПараметр("ВидыОбразования", ВидыОбразования);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА НЕ ОбразованиеФЛ.ВидОбразования.Предопределенный
			|				И ОбразованиеФЛ.ВидОбразования.Код = ""03""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование)
			|		КОГДА НЕ ОбразованиеФЛ.ВидОбразования.Предопределенный
			|				И ОбразованиеФЛ.ВидОбразования.Код = ""15""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование)
			|		ИНАЧЕ ОбразованиеФЛ.ВидОбразования
			|	КОНЕЦ КАК ВидОбразования,
			|	ОбразованиеФЛ.*
			|ИЗ
			|	ВТФизическиеЛица КАК ВТФизическиеЛица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОбразованиеФизическихЛиц КАК ОбразованиеФЛ
			|		ПО ВТФизическиеЛица.ФизическоеЛицо = ОбразованиеФЛ.ФизическоеЛицо
			|ИТОГИ ПО
			|	ФизическоеЛицо";
			
		ВыборкаПоФизическимЛицам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоФизическимЛицам.Следующий() Цикл
			
			Набор = РегистрыСведений.УдалитьОбразованиеФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Отбор.ФизическоеЛицо.Установить(ВыборкаПоФизическимЛицам.ФизическоеЛицо);
			
			ВыборкаПоЗаписям = ВыборкаПоФизическимЛицам.Выбрать();
			Пока ВыборкаПоЗаписям.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), ВыборкаПоЗаписям);
			КонецЦикла;
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛистокСообщенияДляВоенкомата.Ссылка,
		|	ВЫБОР
		|		КОГДА ЛистокСообщенияДляВоенкомата.Образование.Код = ""03""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование)
		|		КОГДА ЛистокСообщенияДляВоенкомата.Образование.Код = ""15""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование)
		|		ИНАЧЕ ЛистокСообщенияДляВоенкомата.Образование
		|	КОНЕЦ КАК Образование
		|ИЗ
		|	Документ.ЛистокСообщенияДляВоенкомата КАК ЛистокСообщенияДляВоенкомата
		|ГДЕ
		|	ЛистокСообщенияДляВоенкомата.Образование В(&ВидыОбразования)";
	Запрос.УстановитьПараметр("ВидыОбразования", ВидыОбразования);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Образование = Выборка.Образование;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
// Используется для сопоставления элементов механизмом «Выгрузка/загрузка областей данных»
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Код");
	Результат.Добавить("ФасетОКИН");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли