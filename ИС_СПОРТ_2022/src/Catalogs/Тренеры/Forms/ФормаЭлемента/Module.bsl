
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущаяОрганизация = ПараметрыСеанса.ТекущаяОрганизация;	
	Элементы.ЗаглушкаСоответсвие.Видимость = ТекущаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Если НЕ Объект.ФизическоеЛицо.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ФизическоеЛицоСсылка = Объект.ФизическоеЛицо;
		ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицоОбъект");
		ФизЛицоОбъект = Объект.ФизическоеЛицо.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ФизЛицоОбъект, "ФизическоеЛицоОбъект"); 
		
	ИначеЕсли Объект.Ссылка.Пустая() ИЛИ Объект.ФизическоеЛицо.Пустая() Тогда
		
		ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицоОбъект");
		ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ФизЛицоОбъект.УстановитьСсылкуНового(ФизическоеЛицоСсылка);
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьЗначенияСвойств(ФизЛицоОбъект,Параметры.ЗначениеКопирования.ФизическоеЛицо,,"Родитель, Владелец, Код");
			ЗаполнитьЗначенияСвойств(Объект.Ссылка,Параметры.ЗначениеКопирования); 
		КонецЕсли;        
		
		ЗначениеВРеквизитФормы(ФизЛицоОбъект, "ФизическоеЛицоОбъект");
		
	КонецЕсли;
    
    // {Рарус kotana #IN-17203 -При открытии карточки тренера другого учреждени видно все закладки. 2021.06.18
     Если Объект.СтатусТренера  = ПредопределенноеЗначение("Перечисление.СтатусыТренеров.ТренерДругогоСпортивногоУчреждения") Тогда
         
         УстановитьВидимостьДляНовойКарточкиТренера();    	
         
     КонецЕсли; 
    // }Рарус kotana #IN-17203 -При открытии карточки тренера другого учреждени видно все закладки. 2021.06.18
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ДополнительныеПараметры.ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ФизическоеЛицоОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьСтраницуОсновноеНаФорме(Истина);
	
КонецПроцедуры

// {Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.03
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	Если Объект.Ссылка.Пустая() ИЛИ Объект.ФизическоеЛицо.Пустая() ИЛИ НЕ ЗначениеЗаполнено(объект.СтатусТренера) Тогда
		СтатусТренераСтр = НСтр("ru = 'Укажите статус тренера'");
		УстановитьВидимостьДляНовойКарточкиТренера();	
	КонецЕсли;
	
	ОбновитьФотографиюНаСервере();

КонецПроцедуры
// }Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.03

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ФизическоеЛицоОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицоОбъект.Наименование);
	Если не ЗначениеЗаполнено(СтруктураФИО.Фамилия) ИЛИ не ЗначениеЗаполнено(СтруктураФИО.Имя) Тогда
		Сообщить("Необходимо заполнить Фамилию, Имя физического лица!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СНИЛС_ДляУсловия = СтрЗаменить(СтрЗаменить(ФизическоеЛицоОбъект.СНИЛС,"-","")," ","");
	Если ЗначениеЗаполнено(СНИЛС_ДляУсловия) Тогда
		ТекстСообщения = "";
		КорректныйСНИСЛ = РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(ФизическоеЛицоОбъект.СНИЛС, ТекстСообщения);
		Если НЕ КорректныйСНИСЛ Тогда
			Сообщить(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;	
	
	// {Рарус kotana #8906 2020.08.27
	
	Если Объект.Ссылка.Пустая() Тогда
	
		ПроверитьФотоАватар();
		
	КонецЕсли;
	
	// }Рарус kotana #8906 2020.08.27
	
	// {Рарус ivaart IN-19101 Кадровая история тренеров. Сохранение временной записи КИ 2021.08.20
	Если ДатаКадровогоСобытия <> '00010101' И СтатусТренераСтр <> "Тренер другого спортивного учреждения" тогда
		Если СоздатьЗаписьКадровогоУчёта(ТекущаяОрганизация, Объект.Ссылка, КадровоеСобытие, ДатаКадровогоСобытия) тогда
			//Делаем новую запись кадровой истории - актуальной
			КадроваяИстория = ""+КадровоеСобытие+" - "+Формат(ДатаКадровогоСобытия, "ДФ=dd.MM.yyyy");
			ДатаКадровогоСобытия = '00010101';
			СтарыйСтатусТренера = СтатусТренераСтр;
			Сообщить("Кадровая история обновлена.")
		Иначе
			Сообщить("Ошибка записи истории кадрового учёта.");
		КонецЕсли;
	КонецЕсли;
	// {Рарус ivaart IN-19101 Кадровая история тренеров. Сохранение временной записи КИ 2021.08.20 
    
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если Объект.СовпадаетАдрес Тогда	
		
		//Имя состоит из МенюПодменюАдресКонтактная + Имя поля формы для замещения _ Имя поля формы значением которого будет замещено поле формы 
		ИмяКоманды = "МенюПодменюАдресКонтактнаяИнформацияПоле3e584fc6x6e57x11eaxa218x00155d1eed181_КонтактнаяИнформацияПоле3e584fc7x6e57x11eaxa218x00155d1eed181";	
		УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, ИмяКоманды);	
		
	КонецЕсли;
	
	// {Рарус adilas #21330 -Тестирование релиза Альфа СПОРТ 1.0.0.4 2021.10.14
	ЗаписатьФизическоеЛицоНаСервере(Ложь);	
	// }Рарус adilas #21330 -Тестирование релиза Альфа СПОРТ 1.0.0.4 2021.10.14
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизическоеЛицоОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
        
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// {Рарус adilas #21330 -Тестирование релиза Альфа СПОРТ 1.0.0.4 2021.10.14
	ЗаписатьФизическоеЛицоНаСервере(Ложь);	
	// }Рарус adilas #21330 -Тестирование релиза Альфа СПОРТ 1.0.0.4 2021.10.14	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповещениеОЗаписиОбъекта = Новый ОписаниеОповещения("ПослеЗаписиФизическогоЛицаЗавершение", ЭтотОбъект);
	ВыполнитьОбработкуОповещения(ОповещениеОЗаписиОбъекта);
	
	Элементы.ЗаглушкаДокументыФизЛица.Видимость = Истина;
	Элементы.ЗаглушкаКатегории.Видимость = Истина;
    // {Рарус kotana #IN-11147 -Судейские категории тренера 2020.11.24
    Элементы.ЗаглушкаСудейскиеКатегории.Видимость = Истина;
    // }Рарус kotana #IN-11147 -Судейские категории тренера 2020.11.24
	Элементы.ЗаглушкаОбразование.Видимость = Истина;
	Элементы.ЗаглушкаСоответсвие.Видимость = Истина;
	// {Рарус adilas #10143 -Спортивные объекты тренера 2020.10.21
	Элементы.ЗаглушкаСпортивныеОбъекты.Видимость = Истина;
	// }Рарус adilas #10143 -Спортивные объекты тренера 2020.10.21
	Элементы.ЗаглушкаЗвания.Видимость = Истина;
	Элементы.ЗаглушкаНаграды.Видимость = Истина;
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	ОбновитьФотографиюНаСервере();
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	
    // {Рарус kotana #IN-118811 -Обновление цвета статуса 2021.01.19
    МассивЭлементовФормыОбновить = Новый Массив;
    МассивЭлементовФормыОбновить.Добавить(Элементы.СтатусТренераСтр);
    
    ОбновитьОтображениеДанных(МассивЭлементовФормыОбновить);
    // }Рарус kotana #IN-11881 -Обновление цвета статуса 2021.01.19

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ФизическоеЛицоОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация 
	ОбновитьФотографиюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСпортивногоУчрежденияЗавершение" Тогда 
		ОбновитьФотографиюНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеФизическогоЛицаВФорме" Тогда
		ИзменитьФизическоеЛицоНаСервере();	
	КонецЕсли;
	
	// {Рарус ivaart IN-19101 Кадровая история тренеров. обработка события изменения регистра КИ 2021.08.20
	//Устанавливаем кадровую историю и статус по актуальным данным регистра
	Если ИмяСобытия = "ОбнавлёнСтатусТренера"+СтрЗаменить(Объект.Ссылка, " ", "") тогда
		ДатаКадровогоСобытия = '00010101';
		Событие = ПолучитьАктуальнуюКадровуюИсторию();
		ЗаменитьСтатус(?(Событие = "Увольнение","Уволен", "Работает в спортивном учреждении"));
		СтарыйСтатусТренера = СтатусТренераСтр;
		ЗаполнитьСтраницуОсновноеНаФорме();
	КонецЕсли;
	// {Рарус ivaart IN-19101 Кадровая история тренеров. обработка события изменения регистра КИ 2021.08.20
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, ФизическоеЛицоОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапки

&НаКлиенте
Процедура АдресФотографииПриИзменении(Элемент)
	
	Если Не Объект.ФайлФотографии.Пустая() Тогда
		ТекущаяВерсияКартинки = ПолучитьТекущуюВерсиюКартинки(Объект.ФайлФотографии);
		АдресФотографии = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущаяВерсияКартинки);
	Иначе 	
		АдресФотографии = "";
	Конецесли;
    Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресФотографииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда 
		
		Оповещение = Новый ОписаниеОповещения("АдресФотографииНажатиеЗавершение", ЭтотОбъект, Новый Структура("Элемент",Элемент));
		
		ПоказатьВопрос(Оповещение,
		"Тренер не записан. Записать?",
        РежимДиалогаВопрос.ДаНет,
        0,
        КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	АдресФотографииОткрыть(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда                                                  
		Возврат;
	КонецЕсли;	
	
	ФизическоеЛицоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоОбъектНаименованиеПриИзменении(Элемент)
	ФизическоеЛицоОбъектНаименованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Объект.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтактнаяИнформация
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"
// СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, ФизическоеЛицоОбъект, Результат);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, ФизическоеЛицоОбъект, Результат);		
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

// {Рарус adilas #15377 -Копирование адреса 2021.08.20
&НаКлиенте
Процедура ПослеЗакрытияВопросаКопирование(Результат, Параметры) Экспорт
	
    Если Результат = КодВозвратаДиалога.Да Тогда
		Если ЗначениеЗаполнено(ЭтаФорма.КонтактнаяИнформацияПоле3e584fc7x6e57x11eaxa218x00155d1eed181) Тогда
			//Имя состоит из МенюПодменюАдресКонтактная + Имя поля формы для замещения _ Имя поля формы значением которого будет замещено поле формы 
			ИмяКоманды = "МенюПодменюАдресКонтактнаяИнформацияПоле3e584fc6x6e57x11eaxa218x00155d1eed181_КонтактнаяИнформацияПоле3e584fc7x6e57x11eaxa218x00155d1eed181";	
			УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, ИмяКоманды);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Адрес по прописке при копировании не должен быть пустым!'"));
			Объект.СовпадаетАдрес = Ложь;
		КонецЕсли;
	Иначе
		Объект.СовпадаетАдрес = Ложь;
	КонецЕсли;	
 
КонецПроцедуры
// }Рарус adilas #15377 -Копирование адреса 2021.08.20

#Область ПроцедурыИФункцииПоРаботеСФотографией	

&НаСервере
Процедура ОбновитьФотографиюНаСервере()
	Если Не Объект.Фото.Пустая() Тогда
		АдресФотографии = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(Объект.Фото.ТекущаяВерсия,УникальныйИдентификатор);
	Иначе
		АдресФотографии = "";
	КонецЕсли;	
	Элементы.АдресФотографии.РазмерКартинки = РазмерКартинки.АвтоРазмер;
КонецПроцедуры	

&НаКлиенте
Процедура АдресФотографииОткрыть(Элемент)
	ОткрытьФормуВыбораФайла(Объект.Фото,Элемент);
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуВыбораФайла(ТекущийФайл,ЭлементВладелец)
	
	ПараметрыФайла = Новый Структура;
	//ПараметрыФайла.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыФайла.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"));
	ПараметрыФайла.Вставить("РежимВыбора", истина);
	ПараметрыФайла.Вставить("ТекущаяСтрока", ТекущийФайл);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораФайлаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора",	ПараметрыФайла, ЭлементВладелец,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресФотографииНажатиеЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		Если НЕ Объект.Ссылка.Пустая() И НЕ Модифицированность Тогда
			АдресФотографииОткрыть(Параметры.Элемент);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораФайлаЗавершение(Результат, Параметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Объект.Фото = Результат;
		ФайлФотографииПриИзменении();
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлФотографииПриИзменении()	
	Если Не Объект.Фото.Пустая() Тогда
		ТекущаяВерсияКартинки = ПолучитьТекущуюВерсиюКартинки(Объект.Фото);
		АдресФотографии = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущаяВерсияКартинки);
	Иначе 	
		АдресФотографии = "";
	Конецесли;
    Модифицированность = Истина;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюВерсиюКартинки(ФайлКартинки)

	Возврат ФайлКартинки.ТекущаяВерсия; 	

КонецФункции

&НаКлиенте
Процедура УдалитьФотографиюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьФотографиюПродолжить();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФотографиюПродолжить()
	
   Объект.Фото = Справочники.Файлы.ПустаяСсылка();
   ОбновитьФотографиюНаСервере();
   
КонецПроцедуры	

// {Рарус kotana #8906 2020.08.27
&НаСервере
Процедура ПроверитьФотоАватар()

	Если НЕ ЗначениеЗаполнено(ФизическоеЛицоОбъект.Фото) Тогда
		
		//нужно подставить аватар
		ПолФЛ = ФизическоеЛицоОбъект.Пол;
		ПолЖенский = (ПолФЛ = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"));
				
		Если ПолЖенский Тогда
			
			ИмяБезРасширения = НСтр("ru = 'Аватар тренер (женщина)'");
			
		Иначе
			
			ИмяБезРасширения = НСтр("ru = 'Аватар тренер (мужчина)'");
			
		КонецЕсли;
		
		ПрисоединенныйФайл = Справочники.Файлы.НайтиПоНаименованию(ИмяБезРасширения);
		
		Если ПрисоединенныйФайл = Справочники.Файлы.ПустаяСсылка() ИЛИ ПрисоединенныйФайл = Неопределено Тогда
			
			Если ПолЖенский Тогда
				
				ДвоичныеДанные = БиблиотекаКартинок.АватарТренерЖенщина.ПолучитьДвоичныеДанные();
				
			Иначе
				
				ДвоичныеДанные = БиблиотекаКартинок.АватарТренерМужчина.ПолучитьДвоичныеДанные();
				
			КонецЕсли;
			
			АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов = Справочники.ПапкиФайлов.Шаблоны;
			ПараметрыФайла.ИмяБезРасширения = ИмяБезРасширения;
			ПараметрыФайла.РасширениеБезТочки = "jpg";
			ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ФайлХранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
			ПрисоединенныйФайлОбъект.Записать();
			
		КонецЕсли;
		
		Объект.Фото = ПрисоединенныйФайл;
		
		ОбновитьФотографиюНаСервере();
		
	КонецЕсли;

КонецПроцедуры
 	
// }Рарус kotana #8906 2020.08.27

#КонецОбласти

// {Рарус kotana #IN-11881 -Статус тренера 2021.01.19
#Область СтатусТренераСлужебные

// {Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.03
&НаКлиенте
Процедура ПослеВводаЗначенияТренера(Результат, Параметры) Экспорт
 
    ПослеВводаЗначенияТренераНаСервере(Результат);
	
	// {Рарус ivaart IN-19101 Кадровая история тренеров. Событие создание кадровой истории 2021.08.20
	//Если пользователь выбрал новый статус, то пытаемся создать новую запись в регистре. Иначе - получаем актуальные данные из регистра
	Если СтарыйСтатусТренера <> СтатусТренераСтр и СтатусТренераСтр <> "Тренер другого спортивного учреждения" тогда
		ОтразитьИзмененияКадровойИстории(СтатусТренераСтр);
	Иначе
		ДатаКадровогоСобытия = '00010101';
		ПолучитьАктуальнуюКадровуюИсторию();
	КонецЕсли;
	// }Рарус ivaart IN-19101 Кадровая история тренеров. Событие создание кадровой истории 2021.08.20	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаЗначенияТренераНаСервере(Результат) Экспорт	
	
	Если Не Результат = Неопределено Тогда
		ОбъектТренер = РеквизитФормыВЗначение("Объект");
		ОбъектТренер.СтатусТренера = Результат;
		СтатусТренераСтр = ОбъектТренер.СтатусТренера;
		ЗначениеВРеквизитФормы(ОбъектТренер, "Объект");
		
		Если ОбъектТренер.СтатусТренера <> ПредопределенноеЗначение("Перечисление.СтатусыТренеров.ТренерДругогоСпортивногоУчреждения") Тогда
			УстановитьВидимостьДляЗаписаннойКарточкиТренера();
			ЗаполнитьСтраницуОсновноеНаФорме();
		Иначе
			УстановитьВидимостьДляНовойКарточкиТренера();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
// }Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.03

#КонецОбласти

// }Рарус kotana #IN-11881 -Статус тренера 2021.01.19

&НаКлиенте
Процедура ПослеЗаписиФизическогоЛицаЗавершение(Результат, ДопПараметры)Экспорт
	ЭтаФорма.ОбновитьОтображениеДанных(Элементы.ФизическоеЛицо);
КонецПроцедуры

&НаСервере
Процедура ИзменитьФизическоеЛицоНаСервере()
	
	ФизЛицоОбъект = Объект.ФизическоеЛицо.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФизЛицоОбъект, "ФизическоеЛицоОбъект");
	
КонецПроцедуры

//{Рарус Lobash IN-9499 16.09.20 
&НаКлиенте
Процедура ПоискПоФизическимЛицамЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ФизическоеЛицо = Результат;
		ФизическоеЛицоПриИзменении(ЭтаФорма.Элементы.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры
//}Рарус Lobash IN-9499 16.09.20

&НаСервере
Процедура ЗаписатьФизическоеЛицоНаСервере(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицоОбъект");
		ФизЛицоОбъект.ПроверитьЗаполнение();
		ФизЛицоОбъект.Фото = Объект.Фото;
		
		ФизЛицоОбъект.Записать();

		ЗначениеВРеквизитФормы(ФизЛицоОбъект, "ФизическоеЛицоОбъект");
		ФизическоеЛицоСсылка  = ФизическоеЛицоОбъект.Ссылка;
		Объект.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
				
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	
	ФизическоеЛицоСсылка = Объект.ФизическоеЛицо;
	ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицоОбъект");
	ФизЛицоОбъект = Объект.ФизическоеЛицо.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФизЛицоОбъект, "ФизическоеЛицоОбъект");
	Если ЗначениеЗаполнено(ФизическоеЛицоСсылка) Тогда 	
		СформироватьНаименованиеФизическогоЛица();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаименованиеФизическогоЛица()
   Объект.Наименование = ФизическоеЛицоОбъект.Наименование;
КонецПроцедуры

&НаСервере
Процедура ФизическоеЛицоОбъектНаименованиеПриИзмененииНаСервере()
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицоОбъект.Наименование);
	ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект,СтруктураФИО);
	СформироватьНаименованиеФизическогоЛица();
КонецПроцедуры	

// {Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.03
&НаСервере
Процедура УстановитьВидимостьДляНовойКарточкиТренера();
	
	Элементы.СтраницаКонтакты.Видимость = Ложь; 
	Элементы.ДокументыУдостоверяющиеЛичность.Видимость = Ложь;
	Элементы.СпортивныеОбъекты.Видимость = Ложь;
	Элементы.Категории.Видимость = Ложь;
	Элементы.СудейскиеКатегории.Видимость = Ложь;
	Элементы.Образование.Видимость = Ложь;
	Элементы.Звания.Видимость = Ложь;
	Элементы.Награды.Видимость = Ложь;
	Элементы.СоотвествиеТренераИОрганизации.Видимость = Ложь;
	
	Элементы.ОсновноеВидСпорта.Видимость = Ложь;
	Элементы.ОсновноеСпортивныеОбъекты.Видимость = Ложь;
	Элементы.КадроваяИстория.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДляЗаписаннойКарточкиТренера()
	
	Элементы.СтраницаКонтакты.Видимость = Истина; 
	Элементы.ДокументыУдостоверяющиеЛичность.Видимость = Истина;
	Элементы.СпортивныеОбъекты.Видимость = Истина;
	Элементы.Категории.Видимость = Истина;
	Элементы.СудейскиеКатегории.Видимость = Истина;
	Элементы.Образование.Видимость = Истина;
	Элементы.Звания.Видимость = Истина;
	Элементы.Награды.Видимость = Истина;
	Элементы.СоотвествиеТренераИОрганизации.Видимость = Истина;
	
	Элементы.ОсновноеВидСпорта.Видимость = Истина;
	Элементы.ОсновноеСпортивныеОбъекты.Видимость = Истина;
	Элементы.КадроваяИстория.Видимость = Истина;
	
КонецПроцедуры
// }Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.03

#КонецОбласти

#Область ПриСменеСтраниц

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
    Если ТекущаяСтраница.Имя = "Категории" Тогда
        Если Элементы.Найти("СписокКатегорий") = Неопределено Тогда
            Элементы.ЗаглушкаКатегории.Видимость = Ложь;
            СформироватьДинамическийСписокКатегорий();
        Иначе
            Возврат
        КонецЕсли;
        // {Рарус kotana #IN-11147 -Судейские категории тренера 2020.11.24
    ИначеЕсли ТекущаяСтраница.Имя = "СудейскиеКатегории" Тогда
        Если Элементы.Найти("СписокСудейскихКатегорий") = Неопределено Тогда
            Элементы.ЗаглушкаСудейскиеКатегории.Видимость = Ложь;
            СформироватьДинамическийСписокСудейскихКатегорий();
        Иначе
            Возврат
        КонецЕсли;
        // }Рарус kotana #IN-11147 -Судейские категории тренера 2020.11.24
    ИначеЕсли ТекущаяСтраница.Имя = "Образование" Тогда
		Если Элементы.Найти("СписокОбразований") = Неопределено Тогда
			Элементы.ЗаглушкаОбразование.Видимость = Ложь;
			СформироватьДинамическийОбразование();
		Иначе
			Возврат
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя = "ДокументыУдостоверяющиеЛичность" Тогда
		Если Элементы.Найти("СписокДокументовФизЛиц") = Неопределено Тогда
			Элементы.ЗаглушкаДокументыФизЛица.Видимость = Ложь;
			СформироватьДинамическийСписокПоДокументамУдостоверяющиеЛичность();
		Иначе
			Возврат
		КонецЕсли;
	// {Рарус adilas #15410 -Тестирование релиза Альфа Спорт 1.0.0.1. Тренер (Звания) 2021.04.09
	ИначеЕсли ТекущаяСтраница.Имя = "Звания" Тогда
		Если Элементы.Найти("СписокЗвания") = Неопределено Тогда
			Элементы.ЗаглушкаЗвания.Видимость = Ложь;
			СформироватьДинамическийСписокЗвания();
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя = "Награды" Тогда
		Если Элементы.Найти("СписокНаград") = Неопределено Тогда
			Элементы.ЗаглушкаНаграды.Видимость = Ложь;
			СформироватьДинамическийСписокНаград();
		Иначе
			Возврат;
		КонецЕсли;
	// }Рарус adilas #15410 -Тестирование релиза Альфа Спорт 1.0.0.1. Тренер (Звания) 2021.04.09
	ИначеЕсли ТекущаяСтраница.Имя = "СоотвествиеТренераИОрганизации" Тогда
		Если Элементы.Найти("СписокСоотвествиеТренераИОрганизации") = Неопределено Тогда
			Элементы.ЗаглушкаСоответсвие.Видимость = Ложь;
			СформироватьДинамическийСписокСоотвествиеТренераИОрганизации();
		Иначе
			Возврат;
		КонецЕсли;
	// {Рарус adilas #10143 -Спортивные объекты тренера 2020.10.13
	ИначеЕсли ТекущаяСтраница.Имя = "СпортивныеОбъекты" Тогда
		Если Элементы.Найти("СписокСпортивныеОбъекты") = Неопределено Тогда
			Элементы.ЗаглушкаСпортивныеОбъекты.Видимость = Ложь;
			СформироватьДинамическийСписокСпортивныеОбъекты();
		Иначе
			Возврат;
		КонецЕсли;
	// }Рарус adilas #10143 -Спортивные объекты тренера 2020.10.13
	ИначеЕсли ТекущаяСтраница.Имя = "Основное" Тогда
			ОбновитьФормуПриСменеСтраниц();
	Иначе
		Возврат;
	// }Рарус adilas -Обновление основной информации при смене страницы на основную 2020.10.16
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДинамическийОбразование()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникОбразованиеТренеров.Ссылка КАК Ссылка,
	               |	СправочникОбразованиеТренеров.Владелец КАК Владелец,
	               |	СправочникОбразованиеТренеров.Код КАК Код,
	               |	СправочникОбразованиеТренеров.Наименование КАК Наименование,
	               |	СправочникОбразованиеТренеров.ОсновноеОбразование КАК ОсновноеОбразование,
	               |	СправочникОбразованиеТренеров.ВидОбразования КАК ВидОбразования,
	               |	СправочникОбразованиеТренеров.ВидОбучения КАК ВидОбучения,
	               |	СправочникОбразованиеТренеров.УчебноеЗаведение КАК УчебноеЗаведение,
	               |	СправочникОбразованиеТренеров.НачалоОбучения КАК НачалоОбучения,
	               |	СправочникОбразованиеТренеров.ОкончаниеОбучения КАК ОкончаниеОбучения,
	               |	СправочникОбразованиеТренеров.ПродолжительностьОбучения КАК ПродолжительностьОбучения,
	               |	СправочникОбразованиеТренеров.Специальность КАК Специальность,
	               |	СправочникОбразованиеТренеров.Направление КАК Направление,
	               |	СправочникОбразованиеТренеров.Квалификация КАК Квалификация,
	               |	СправочникОбразованиеТренеров.НаименованиеКурса КАК НаименованиеКурса,
	               |	СправочникОбразованиеТренеров.КоличествоКурсов КАК КоличествоКурсов,
	               |	СправочникОбразованиеТренеров.ВидДокумента КАК ВидДокумента,
	               |	СправочникОбразованиеТренеров.Серия КАК Серия,
	               |	СправочникОбразованиеТренеров.Номер КАК Номер,
	               |	СправочникОбразованиеТренеров.ДатаВыдачи КАК ДатаВыдачи
	               |ИЗ
	               |	Справочник.ОбразованиеТренеров КАК СправочникОбразованиеТренеров
	               |ГДЕ
	               |	СправочникОбразованиеТренеров.Владелец = &Тренер";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Образовательное учреждение,УчебноеЗаведение");
	МассивКолонок.Добавить("Вид образования,ВидОбразования");
	МассивКолонок.Добавить("Начало обучения,НачалоОбучения");
	МассивКолонок.Добавить("Окончание обучения,ОкончаниеОбучения");
	МассивКолонок.Добавить("Специальность,Специальность");
	МассивКолонок.Добавить("Направление,Направление");
	МассивКолонок.Добавить("Квалификация,Квалификация");
	МассивКолонок.Добавить("Вид документа,ВидДокумента");
	МассивКолонок.Добавить("Серия,Серия");
	МассивКолонок.Добавить("Номер,Номер");
	МассивКолонок.Добавить("Дата выдачи,Датавыдачи");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокОбразований", ТекстЗапроса, МассивКолонок,,"Справочник.ОбразованиеТренеров", "Образование",,, Новый Структура("Тренер",Объект.Ссылка));
	// {Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.09.25
	//
	Элементы["СписокОбразований"].УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок");
	// }Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.09.25
	
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	//
	ОбновитьФотографиюНаСервере()
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
		
КонецПроцедуры	

&НаСервере
Процедура СформироватьДинамическийСписокКатегорий()
	
	ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	КвалификационныеКатегорииТренеров.Категория КАК Категория,
	                |	КвалификационныеКатегорииТренеров.ДатаПрисвоения КАК ДатаПрисвоения,
	                |	КвалификационныеКатегорииТренеров.НомерПриказа КАК НомерПриказа,
	                |	КвалификационныеКатегорииТренеров.ДатаПриказа КАК ДатаПриказа,
	                |	КвалификационныеКатегорииТренеров.СрокДействия КАК СрокДействия,
	                |	КвалификационныеКатегорииТренеров.ВидСпорта КАК ВидСпорта
	                |ИЗ
	                |	РегистрСведений.КвалификационныеКатегорииТренеров КАК КвалификационныеКатегорииТренеров
	                |ГДЕ
	                |	КвалификационныеКатегорииТренеров.Тренер = &Тренер";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Категория,Категория");
	// {Рарус dotere #20157 -Добавление колонки ВидСпорта 2021.09.09
	МассивКолонок.Добавить("Вид спорта,ВидСпорта");
	// }Рарус dotere #20157 -Добавление колонки ВидСпорта 2021.09.09
	МассивКолонок.Добавить("Дата присвоения,ДатаПрисвоения");
	МассивКолонок.Добавить("Номер приказа,НомерПриказа");
	МассивКолонок.Добавить("Дата приказа,ДатаПриказа");
	МассивКолонок.Добавить("Срок действия,СрокДействия");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокКатегорий", ТекстЗапроса, МассивКолонок,,"РегистрСведений.КвалификационныеКатегорииТренеров", "Категории",,, Новый Структура("Тренер",Объект.Ссылка));
	// {Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.09.25
	//
	Элементы["СписокКатегорий"].УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок");
	// }Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.09.25
	
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	//
	ОбновитьФотографиюНаСервере()
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДинамическийСписокСудейскихКатегорий()
	
	ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	КатегорииСпортивныхСудей.Категория КАК Категория,
	                |	КатегорииСпортивныхСудей.ВидСпорта КАК ВидСпорта,
	                |	КатегорииСпортивныхСудей.ДатаПрисвоения КАК ДатаПрисвоения,
	                |	КатегорииСпортивныхСудей.НомерПриказа КАК НомерПриказа,
	                |	КатегорииСпортивныхСудей.ДатаПриказа КАК ДатаПриказа,
	                |	КатегорииСпортивныхСудей.СрокДействия КАК СрокДействия
	                |ИЗ
	                |	РегистрСведений.КатегорииСпортивныхСудей КАК КатегорииСпортивныхСудей
	                |ГДЕ
	                |	КатегорииСпортивныхСудей.Тренер = &Тренер";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Категория,Категория");
	МассивКолонок.Добавить("Вид спорта,ВидСпорта");
	МассивКолонок.Добавить("Дата присвоения,ДатаПрисвоения");
	МассивКолонок.Добавить("Номер приказа,НомерПриказа");
	МассивКолонок.Добавить("Дата приказа,ДатаПриказа");
	МассивКолонок.Добавить("Срок действия,СрокДействия");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокСудейскихКатегорий", ТекстЗапроса, МассивКолонок,,"РегистрСведений.КатегорииСпортивныхСудей", "СудейскиеКатегории",,, Новый Структура("Тренер",Объект.Ссылка));
	Элементы["СписокСудейскихКатегорий"].УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок");
	ОбновитьФотографиюНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДинамическийСписокПоДокументамУдостоверяющиеЛичность()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента,
	               |	ДокументыФизическихЛиц.Серия КАК Серия,
	               |	ДокументыФизическихЛиц.Номер КАК Номер,
	               |	ДокументыФизическихЛиц.ДатаВыдачи КАК ДатаВыдачи,
	               |	ДокументыФизическихЛиц.СрокДействия КАК СрокДействия,
	               |	ДокументыФизическихЛиц.КемВыдан КАК КемВыдан,
	               |	ДокументыФизическихЛиц.КодПодразделения КАК КодПодразделения,
	               |	ДокументыФизическихЛиц.Документ КАК Документ,
	               |	ДокументыФизическихЛиц.Гражданство КАК Гражданство
	               |ИЗ
	               |	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	               |ГДЕ
	               |	ДокументыФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Вид документа,ВидДокумента");
	МассивКолонок.Добавить("Серия,Серия");
	МассивКолонок.Добавить("Номер,Номер");
	МассивКолонок.Добавить("Дата выдачи,ДатаВыдачи");
	МассивКолонок.Добавить("Срок действия,СрокДействия");
	МассивКолонок.Добавить("Кем выдан,КемВыдан");
	МассивКолонок.Добавить("Код подразделения,КодПодразделения");
	МассивКолонок.Добавить("Документ,Документ");
	МассивКолонок.Добавить("Гражданство,Гражданство");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокДокументовФизЛиц", ТекстЗапроса, МассивКолонок,,"РегистрСведений.ДокументыФизическихЛиц", "ДокументыУдостоверяющиеЛичность",,, Новый Структура("ФизическоеЛицо",Объект.ФизическоеЛицо));
	// {Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.09.25
	//
	Элементы["СписокДокументовФизЛиц"].УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок");
	// }Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.09.25
	
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	//
	ОбновитьФотографиюНаСервере()
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДинамическийСписокСоотвествиеТренераИОрганизации()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоответствияФизическихЛицИОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СоответствияФизическихЛицИОрганизаций.Организация КАК Организация
	               |ИЗ
	               |	РегистрСведений.СоответствияФизическихЛицИОрганизаций КАК СоответствияФизическихЛицИОрганизаций
	               |ГДЕ
	               |	СоответствияФизическихЛицИОрганизаций.ФизическоеЛицо = &ФизическоеЛицо";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Физическое лицо,ФизическоеЛицо");
	МассивКолонок.Добавить("Организация,Организация");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокСоотвествиеТренераИОрганизации", ТекстЗапроса, МассивКолонок,,"РегистрСведений.СоответствияФизическихЛицИОрганизаций", "СоотвествиеТренераИОрганизации",,, Новый Структура("ФизическоеЛицо",Объект.ФизическоеЛицо));
	
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	//
	ОбновитьФотографиюНаСервере()
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	
КонецПроцедуры

// {Рарус adilas #10143 -Спортивные объекты тренера 2020.10.13
&НаСервере
Процедура СформироватьДинамическийСписокСпортивныеОбъекты()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпортивныеОбъекты.СпортивныйОбъект КАК СпортивныйОбъект,
	               |	СпортивныеОбъекты.Организация КАК Организация,
	               |	СпортивныеОбъекты.Тренер КАК Тренер
	               |ИЗ
	               |	РегистрСведений.СпортивныеОбъекты КАК СпортивныеОбъекты
	               |ГДЕ
	               |	СпортивныеОбъекты.Тренер = &Тренер";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Организация,Организация");
	МассивКолонок.Добавить("Тренер,Тренер");
	МассивКолонок.Добавить("Спортивный объект,СпортивныйОбъект");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокСпортивныеОбъекты", ТекстЗапроса, МассивКолонок,, "РегистрСведений.СпортивныеОбъекты", "СпортивныеОбъекты",,, Новый Структура("Тренер",Объект.Ссылка));
	Элементы["СписокСпортивныеОбъекты"].УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок");
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	ОбновитьФотографиюНаСервере()
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	
КонецПроцедуры

// }Рарус adilas #10143 -Спортивные объекты тренера 2020.10.13

// {Рарус adilas #15410 -Тестирование релиза Альфа Спорт 1.0.0.1. Тренер (Звания) 2021.04.09
&НаСервере
Процедура СформироватьДинамическийСписокЗвания()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпортивныеЗванияТренеров.Звание КАК Звание,
	               |	СпортивныеЗванияТренеров.ДатаПрисвоения КАК ДатаПрисвоения,
	               |	СпортивныеЗванияТренеров.Серия КАК Серия,
	               |	СпортивныеЗванияТренеров.Номер КАК Номер,
	               |	СпортивныеЗванияТренеров.ВидСпорта КАК ВидСпорта
	               |ИЗ
	               |	РегистрСведений.СпортивныеЗванияТренеров КАК СпортивныеЗванияТренеров
	               |ГДЕ
	               |	СпортивныеЗванияТренеров.Тренер = &Тренер";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Звание,Звание");
	// {Рарус dotere #20157 -Добавление колонки ВидСпорта 2021.09.09
	МассивКолонок.Добавить("Вид спорта,ВидСпорта");
	// }Рарус dotere #20157 -Добавление колонки ВидСпорта 2021.09.09
	МассивКолонок.Добавить("Дата присвоения,ДатаПрисвоения");
	МассивКолонок.Добавить("Номер,Номер");
	МассивКолонок.Добавить("Серия,Серия");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокЗвания", ТекстЗапроса, МассивКолонок, , "РегистрСведений.СпортивныеЗванияТренеров", "Звания", , , Новый Структура("Тренер", Объект.Ссылка));
	Элементы["СписокЗвания"].УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок");
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	ОбновитьФотографиюНаСервере();
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДинамическийСписокНаград()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Награды.Награда КАК Награда,
	               |	Награды.ДатаПрисвоения КАК ДатаПрисвоения,
	               |	Награды.Серия КАК Серия,
	               |	Награды.Номер КАК Номер
	               |ИЗ
	               |	РегистрСведений.Награды КАК Награды
	               |ГДЕ
	               |	Награды.Тренер = &Тренер";
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Награда,Награда");
	МассивКолонок.Добавить("Дата присвоения,ДатаПрисвоения");
	МассивКолонок.Добавить("Номер,Номер");
	МассивКолонок.Добавить("Серия,Серия");
	УчетСпортсменовВызовСервера.СозданиеДинамическогоСписка(ЭтотОбъект, "СписокНаград", ТекстЗапроса, МассивКолонок, , "РегистрСведений.Награды", "Награды", , , Новый Структура("Тренер", Объект.Ссылка));
	Элементы["СписокНаград"].УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок");
	// {Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	ОбновитьФотографиюНаСервере();
	// }Рарус adilas #10241 -Исчезает фото тренера 2020.10.15
	
КонецПроцедуры

// }Рарус adilas #15410 -Тестирование релиза Альфа Спорт 1.0.0.1. Тренер (Звания) 2021.04.09

&НаКлиенте
Процедура ОбновитьФормуПриСменеСтраниц()
	
	ЗаполнитьСтраницуОсновноеНаФорме(Истина)
	
КонецПроцедуры

#КонецОбласти
// {Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.10.14

#Область ОбработчикиСобытийДинамическихСписков

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавленияПрограммноСозданныйСписок(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Не Копирование Тогда
		Отказ = Истина;		   
        Если Элемент.Имя = "СписокКатегорий" Тогда
            ИмяОбъектаОткрытия = "КвалификационныеКатегорииТренеров";
        ИначеЕсли Элемент.Имя = "СписокСудейскихКатегорий" Тогда
            ИмяОбъектаОткрытия = "КатегорииСпортивныхСудей";
        ИначеЕсли Элемент.Имя = "СписокОбразований" Тогда
            ИмяОбъектаОткрытия = "ОбразованиеТренеров";	
        ИначеЕсли Элемент.Имя = "СписокДокументовФизЛиц" Тогда
            ИмяОбъектаОткрытия = "ДокументыФизическихЛиц";
        ИначеЕсли Элемент.Имя = "СписокЗвания" Тогда	
            ИмяОбъектаОткрытия = "СпортивныеЗванияТренеров";
        ИначеЕсли Элемент.Имя = "СписокСпортивныеОбъекты" Тогда	
            ИмяОбъектаОткрытия = "СпортивныеОбъекты";
		// {Рарус adilas #11667 -Тестирование. Пунк №3 2021.02.20
		ИначеЕсли Элемент.Имя = "СписокНаград" Тогда	
            ИмяОбъектаОткрытия = "Награды";
		// }Рарус adilas #11667 -Тестирование. Пунк №3 2021.02.20
        КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Тренер", Объект.Ссылка);
		ПараметрыФормы.Вставить("Организация", ПараметрыФормыОрганизация());
		
		Если ИмяОбъектаОткрытия = "КвалификационныеКатегорииТренеров" Тогда	
			ОткрытьФорму("РегистрСведений." + ИмяОбъектаОткрытия + ".Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
        ИначеЕсли ИмяОбъектаОткрытия = "КатегорииСпортивныхСудей" Тогда	
			ОткрытьФорму("РегистрСведений." + ИмяОбъектаОткрытия + ".Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли ИмяОбъектаОткрытия = "ОбразованиеТренеров" Тогда
			ОткрытьФорму("Справочник." + ИмяОбъектаОткрытия + ".Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли ИмяОбъектаОткрытия = "ДокументыФизическихЛиц" Тогда
			ПараметрыФормы = Новый Структура("ФизическоеЛицо", Объект.ФизическоеЛицо);
			ОткрытьФорму("РегистрСведений." + ИмяОбъектаОткрытия + ".Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли ИмяОбъектаОткрытия = "СпортивныеЗванияТренеров" Тогда	
			ОткрытьФорму("РегистрСведений." + ИмяОбъектаОткрытия + ".Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли ИмяОбъектаОткрытия = "СпортивныеОбъекты" Тогда
			ОткрытьФорму("РегистрСведений." + ИмяОбъектаОткрытия + ".Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		// {Рарус adilas #11667 -Тестирование. Пунк №3 2021.02.20	
		ИначеЕсли ИмяОбъектаОткрытия = "Награды" Тогда
			ОткрытьФорму("РегистрСведений." + ИмяОбъектаОткрытия + ".Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		// }Рарус adilas #11667 -Тестирование. Пунк №3 2021.02.20	
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю("Нет формы для указанного объекта");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыФормыОрганизация()
	// Вставить содержимое обработчика.
	ТекущаяОрганизация = ПараметрыСеанса.ТекущаяОрганизация;
	
	Возврат ТекущаяОрганизация;
КонецФункции

#КонецОбласти
// }Рарус adilas #9708 -Заполнять поле "Тренер" при создании квалификационной категории 2020.10.14

#Область ОбработчикиСобытийЭлементовСтраницаКонтакты

// {Рарус adilas #15377 -Копирование адреса 2021.09.16
&НаКлиенте
Процедура СовпадаетАдресПриИзменении(Элемент)
	
	Если Объект.СовпадаетАдрес Тогда	
		Если ЗначениеЗаполнено(ЭтаФорма.КонтактнаяИнформацияПоле3e584fc6x6e57x11eaxa218x00155d1eed181) Тогда
		
			ВопросОКопировании = Новый ОписаниеОповещения("ПослеЗакрытияВопросаКопирование", ЭтотОбъект);	
			
			ПоказатьВопрос(ВопросОКопировании,
								НСтр("ru='Адрес места проживания будет заполнен из адреса по прописке, продолжить?'"), 
								РежимДиалогаВопрос.ДаНетОтмена, 
								0, КодВозвратаДиалога.Да, 
								НСтр("ru='Копирование адреса'"));
		Иначе						
			//Имя состоит из МенюПодменюАдресКонтактная + Имя поля формы для замещения _ Имя поля формы значением которого будет замещено поле формы 
			ИмяКоманды = "МенюПодменюАдресКонтактнаяИнформацияПоле3e584fc6x6e57x11eaxa218x00155d1eed181_КонтактнаяИнформацияПоле3e584fc7x6e57x11eaxa218x00155d1eed181";	
			УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, ИмяКоманды);	
		КонецЕсли;						
	КонецЕсли;
 
КонецПроцедуры
// {Рарус adilas #15377 -Копирование адреса 2021.09.16

#КонецОбласти

#Область ОбработчикиКомандНаФорме

&НаКлиенте
Процедура ПоискПоЗначению(Команда)
	
	ПоискПоФизическимЛицамКлиент.ПоискПоФизическимЛицам(ЭтотОбъект);
	
КонецПроцедуры

// {Рарус adilas #11141 -Сделать закладку "Основное" для тренеров 2020.11.19
&НаКлиенте
Процедура ОсновноеВидСпортаНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
	
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыВводаВидаСпорта", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВводаВидаСпортаДляТренера", НажатиеГиперссылкиСервер(), ЭтаФорма, , , , Оповещение);
	// {Рарус adilas #16024 -Вид спорта в карточке тренера 2021.05.06
	Иначе
		СтандартнаяОбработка = Ложь;
		ОповещениеОЗаписи = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Тренер должен быть записан. Записать?'");
		ПоказатьВопрос(ОповещениеОЗаписи, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0, КодВозвратаДиалога.Да, НСтр("ru = 'Запись карточки'"));
		
	КонецЕсли;
	// }Рарус adilas #16024 -Вид спорта в карточке тренера 2021.05.06
КонецПроцедуры

// {Рарус adilas #16024 -Вид спорта в карточке тренера 2021.05.06
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
   		ЭтотОбъект.Записать();     
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Вид спорта можно указывать только для записанного тренера'"));
		Возврат;
    КонецЕсли;
	
КонецПроцедуры

// }Рарус adilas #16024 -Вид спорта в карточке тренера 2021.05.06

&НаКлиенте
Процедура ПослеЗакрытияФормыВводаВидаСпорта(Результат, Параметры) Экспорт
	
	ПослеЗакрытияФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыНаСервере() Экспорт
	
	ЗаполнитьСтраницуОсновноеНаФорме(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеСпортивныеОбъектыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("РегистрСведений.СпортивныеОбъекты.ФормаСписка", НажатиеГиперссылкиСервер(), ЭтаФорма);
		
КонецПроцедуры

// {Рарус ivaart IN-19101 Кадровая история тренеров. Открытие регистра 2021.08.19
&НаКлиенте
Процедура КадроваяИсторияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	Если не ПустаяСтрока(ТекущаяОрганизация) тогда
		ПараметрыОтбора = новый Структура("Тренер, Организация", Объект.Ссылка, ТекущаяОрганизация);
	Иначе
		ПараметрыОтбора = новый Структура("Тренер", Объект.Ссылка);
	КонецЕсли;
	
	Отбор = Новый Структура("Отбор",ПараметрыОтбора);
	ОткрытьФорму("РегистрСведений.КадровыеИсторииТренеров.ФормаСписка", Отбор);
КонецПроцедуры
// }Рарус ivaart IN-19101 Кадровая история тренеров. Открытие регистра 2021.08.19

&НаСервере
Функция НажатиеГиперссылкиСервер()
	
	ТекущаяОрганизация = ПараметрыСеанса.ТекущаяОрганизация;
		
	ОтборДляСписка = Новый Структура;
	ОтборДляСписка.Вставить("Тренер", Объект.Ссылка);
	ОтборДляСписка.Вставить("Организация", ТекущаяОрганизация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ОтборДляСписка);
	
	Возврат ПараметрыФормы;
	 
КонецФункции

&НаСервере
Процедура ЗаполнитьСтраницуОсновноеНаФорме(ОбновитьСтарыйСтатусТренера = Ложь)
	ТекущаяОрганизация = ПараметрыСеанса.ТекущаяОрганизация; 
	СтатусТренераСтр = Объект.СтатусТренера;
	// {Рарус ivaart IN-19101 Кадровая история тренеров. Получение кадровой истории 2021.08.20
	//Получаем актуальный статус тренера и актуальную запись КИ
	Если ОбновитьСтарыйСтатусТренера тогда
		СтарыйСтатусТренера = СтатусТренераСтр;
	КонецЕсли;
	ПолучитьАктуальнуюКадровуюИсторию();
	// {Рарус ivaart IN-19101 Кадровая история тренеров. Получение кадровой истории 2021.08.20
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тренер", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());				
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен КАК Спортсмен,
	               |	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Организация КАК Организация,
	               |	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта КАК ВидСпорта
	               |ПОМЕСТИТЬ ВТ_СоставУчащихся
	               |ИЗ
				   // {Рарус adilas #21986 -Вид спорта введенный вручную 2021.11.15
	               |	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(, Спортсмен.СтатусСпортсмена <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпортсменов.СпортсменДругогоСпортивногоУчреждения)) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
	               |ГДЕ
	               |	(СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения > &ТекущаяДата
	               |			ИЛИ СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Спортсмен,
	               |	Организация,
	               |	ВидСпорта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Организация КАК Организация,
	               |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта КАК ВидСпорта,
	               |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен
	               |ПОМЕСТИТЬ ВТ_Этапы
	               |ИЗ
	               |	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
	               |			,
	               |			(Спортсмен, ВидСпорта) В
	               |				(ВЫБРАТЬ
	               |					ВТ_СоставУчащихся.Спортсмен КАК Спортсмен,
	               |					ВТ_СоставУчащихся.ВидСпорта КАК ВидСпорта
	               |				ИЗ
	               |					ВТ_СоставУчащихся КАК ВТ_СоставУчащихся)) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
	               |ГДЕ
	               |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Организация,
	               |	ВидСпорта,
	               |	Спортсмен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КоличествоВидовСпортаТренеровОстатки.ВидСпорта КАК ВидСпорта,
	               |	""Введён вручную"" КАК ВведёнВручную,
	               |	КоличествоВидовСпортаТренеровОстатки.ДатаВидаСпорта КАК ДатаВидаСпорта
	               |ПОМЕСТИТЬ ВТ_Объединение
	               |ИЗ
	               |	РегистрНакопления.КоличествоВидовСпортаТренеров.Остатки(, Тренер = &Тренер) КАК КоличествоВидовСпортаТренеровОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КоличествоВидовСпортаТренеров КАК КоличествоВидовСпортаТренеров
	               |		ПО КоличествоВидовСпортаТренеровОстатки.Организация = КоличествоВидовСпортаТренеров.Организация
	               |			И КоличествоВидовСпортаТренеровОстатки.ВидСпорта = КоличествоВидовСпортаТренеров.ВидСпорта
	               |			И КоличествоВидовСпортаТренеровОстатки.Тренер = КоличествоВидовСпортаТренеров.Тренер
	               |			И КоличествоВидовСпортаТренеровОстатки.ДатаВидаСпорта = КоличествоВидовСпортаТренеров.ДатаВидаСпорта
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(КоличествоВидовСпортаТренеров.Регистратор) = ТИП(Документ.ВводВидаСпортаВручную)
	               |	И КоличествоВидовСпортаТренеров.Регистратор.Проведен
	               |	И КоличествоВидовСпортаТренеров.Регистратор.ПометкаУдаления = ЛОЖЬ
	               |	И КоличествоВидовСпортаТренеров.Регистратор.Проведен
	               |	И КоличествоВидовСпортаТренеров.Регистратор.ПометкаУдаления = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Этапы.ВидСпорта,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	ВТ_Этапы КАК ВТ_Этапы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Объединение.ВидСпорта КАК ВидСпорта,
	               |	ВТ_Объединение.ВведёнВручную КАК ВведёнВручную,
	               |	ВТ_Объединение.ДатаВидаСпорта КАК ДатаВидаСпорта
	               |ИЗ
	               |	ВТ_Объединение КАК ВТ_Объединение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидСпорта
	               |;
	               |
				   // }Рарус adilas #21986 -Вид спорта введенный вручную 2021.11.15
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпортивныеОбъекты.СпортивныйОбъект КАК СпортивныйОбъект
	               |ИЗ
	               |	РегистрСведений.СпортивныеОбъекты КАК СпортивныеОбъекты
	               |ГДЕ
	               |	СпортивныеОбъекты.Тренер = &Тренер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СпортивныйОбъект";
				   				
	Пакет = Запрос.ВыполнитьПакет();
		
	тзВидыСпорта = Пакет[3].Выгрузить();
	ВидСпорта = "";
	Если тзВидыСпорта.Количество() = 0 Тогда
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.20
		Элементы.ОсновноеВидСпорта.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;;
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.20
		ВидСпорта = "Указать вид спорта.";
	Иначе
		МассивВидовСпорта = Новый Массив;
		
		Для Каждого СтрокаВидыСпорта Из тзВидыСпорта Цикл
			
			Если ЗначениеЗаполнено(СтрокаВидыСпорта.ВведёнВручную) Тогда
				ВведёнВручную = СтрокаВидыСпорта.ВведёнВручную;
				ВидСпортаСтрока = Строка(СтрокаВидыСпорта.ВидСпорта);
				
				МассивВидовСпорта.Добавить(ВидСпортаСтрока + "(" + ВведёнВручную + ")");
			Иначе
				МассивВидовСпорта.Добавить(СтрокаВидыСпорта.ВидСпорта);
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = МассивВидовСпорта.Количество();
		
		Для Каждого ЭлементМассива Из МассивВидовСпорта Цикл
						
			Если Счетчик = 1 Тогда
				ВидСпорта = ВидСпорта + СокрЛП(ЭлементМассива) + ".";
			Иначе
				ВидСпорта = ВидСпорта + СокрЛП(ЭлементМассива) + ", ";
				Счетчик = Счетчик - 1;
			КонецЕсли;			
						  
		КонецЦикла;
			
	КонецЕсли;

	тзСпортивныеОбъекты = Пакет[4].Выгрузить();
	СпортивныеОбъекты = "";
	Если тзСпортивныеОбъекты.Количество() = 0 Тогда
		
		СпортивныеОбъекты	  = "За тренером не закреплено спортивных объектов.";
		
	Иначе
		МассивСпортивныхОбъектов = Новый Массив;
		
		Для Каждого СтрокаСпортивныеОбъекты Из тзСпортивныеОбъекты Цикл
			МассивСпортивныхОбъектов.Добавить(СтрокаСпортивныеОбъекты.СпортивныйОбъект);
		КонецЦикла;
		
		Счетчик = МассивСпортивныхОбъектов.Количество();
		
		Для Каждого ЭлементМассива Из МассивСпортивныхОбъектов Цикл
											
			Если Счетчик = 1 Тогда
				СпортивныеОбъекты = СпортивныеОбъекты + СокрЛП(ЭлементМассива) + ".";
			Иначе
				СпортивныеОбъекты = СпортивныеОбъекты + СокрЛП(ЭлементМассива) + ", ";
				Счетчик = Счетчик - 1;
			КонецЕсли;
					
		КонецЦикла;
					
	КонецЕсли;
КонецПроцедуры

// {Рарус ivaart IN-19101 Кадровая история тренеров. функции и процедуры по работе с кадровой историей 2021.08.20
//Получаем кадровую историю. Если это новая запись, то она помечается символом "*".
&НаСервере
Функция ПолучитьАктуальнуюКадровуюИсторию()
	
	Если Не ПустаяСтрока(ТекущаяОрганизация) тогда
		КадровыеИстории = РегистрыСведений.КадровыеИсторииТренеров.СрезПоследних(,Новый Структура("Тренер, Организация", Объект.Ссылка, ТекущаяОрганизация));
	Иначе
		КадровыеИстории = РегистрыСведений.КадровыеИсторииТренеров.СрезПоследних(,Новый Структура("Тренер", Объект.Ссылка));
	КонецЕсли;
	
	Если ДатаКадровогоСобытия<>'00010101' тогда
		//Если создана новая запись КИ
		КадроваяИстория = "*"+КадровоеСобытие + " - " + Формат(ДатаКадровогоСобытия, "ДФ=dd.MM.yyyy");
		Возврат Строка(КадровоеСобытие);
	ИначеЕсли КадровыеИстории.Количество()>0 тогда
		//Если используется запись из регистра
		Запись = КадровыеИстории.Получить(0);
		ДатаПоследнейКадровойИстории = Запись.Период;
		КадроваяИстория = Строка(Запись.ВидСобытия) + " - " + Формат(ДатаПоследнейКадровойИстории, "ДФ=dd.MM.yyyy");
		Возврат Строка(Запись.ВидСобытия);
	Иначе
		КадроваяИстория = "<...>";
		Возврат "";
	КонецЕсли;
КонецФункции

//Создание новой записи кадрового учёта с получение даты
&НаКлиенте
Процедура ОтразитьИзмененияКадровойИстории(Событие)
	Подсказка = "Введите дату "+?(Событие = "Уволен", "увольнения.", "приёма на работу.");
	ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаВыбораДаты", ЭтотОбъект);
	ПоказатьВводДаты(ОписаниеОповещения, ТекущаяДата(), Подсказка, ЧастиДаты.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДаты(Дата, ДополнительныеПараметры) Экспорт
	Если Не Дата = Неопределено тогда
		Если Дата <= ДатаПоследнейКадровойИстории тогда
			ЗаменитьСтатус(СтарыйСтатусТренера);
			Сообщить("Новая дата записи не может быть меньше или равна дате предыдущей записи - "+ДатаПоследнейКадровойИстории);
		Иначе
			КадровоеСобытие = ?(СтатусТренераСтр = "Уволен", ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.Увольнение"),ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.Прием"));
			ДатаКадровогоСобытия = Дата;
			ЗаполнитьСтраницуОсновноеНаФорме();
		КонецЕсли;
	Иначе
		ДатаКадровогоСобытия = '00010101';
		ПолучитьАктуальнуюКадровуюИсторию();
		ЗаменитьСтатус(СтарыйСтатусТренера);
	КонецЕсли;
КонецПроцедуры

//Присваевает статус из параметра
&НаСервере
Процедура ЗаменитьСтатус(Статус)
	ОбъектТренер = РеквизитФормыВЗначение("Объект");
	ОбъектТренер.СтатусТренера = ?(Статус = "Уволен",
		Перечисления.СтатусыТренеров.Уволен,
			?(Статус = "Работает в спортивном учреждении", 
				Перечисления.СтатусыТренеров.Работает, 
					Перечисления.СтатусыТренеров.ТренерДругогоСпортивногоУчреждения));
	СтатусТренераСтр = ОбъектТренер.СтатусТренера;
	ЗначениеВРеквизитФормы(ОбъектТренер, "Объект");
	Если СтатусТренераСтр = "Тренер другого спортивного учреждения" тогда
		УстановитьВидимостьДляНовойКарточкиТренера();
	Иначе
		УстановитьВидимостьДляЗаписаннойКарточкиТренера();
	КонецЕсли;
КонецПроцедуры

//Создаёт и записывает запись в регистре КадровыеИсторииТренеров
&НаСервереБезКонтекста
Функция СоздатьЗаписьКадровогоУчёта(Организация, Тренер, ВидСобытия, Дата)
	Попытка
		Запись = РегистрыСведений.КадровыеИсторииТренеров.СоздатьМенеджерЗаписи();
		Запись.ВидСобытия = ВидСобытия;
		Запись.Тренер = Тренер;
		Запись.Период = Дата;
		Запись.Организация = Организация;
		// {Рарус dotere #22661 -Запись вида занятости как основное место работы 2020.12.13
		Запись.ВидЗанятости = Перечисления.ВидЗанятости.ОсновноеМестоРаботы;
		// }Рарус dotere #22661 -Запись вида занятости как основное место работы 2020.12.13
		Запись.Записать(Ложь);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПриПовторномОткрытии()
	ЗаполнитьСтраницуОсновноеНаФорме();
КонецПроцедуры
// }Рарус ivaart IN-19101 Кадровая история тренеров. функции и процедуры по работе с кадровой историей 2021.08.20

// }Рарус adilas #11141 -Сделать закладку "Основное" для тренеров 2020.11.19

// {Рарус kotana #IN-11881 -Статус тренера 2021.01.19
#Область СтатусТренера

&НаКлиенте
Процедура СтатусТренераНажатие(Элемент, СтандартнаяОбработка)
	
	// {Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.10
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеВводаЗначенияТренера", ЭтотОбъект);
		ПоказатьВводЗначения(Оповещение, , НСтр("ru = 'Выберете статус тренера'"), Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыТренеров"));
	Иначе
		СтандартнаяОбработка = Ложь;
		ОповещениеОЗаписи = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Тренер должен быть записан. Записать?'");
		ПоказатьВопрос(ОповещениеОЗаписи, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0, КодВозвратаДиалога.Да, НСтр("ru = 'Запись карточки'"));	
	КонецЕсли;
	// }Рарус adilas #17203 -Карточка тренера, тренер другого учреждения 2021.06.10
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоОбъектДатаРожденияПриИзменении(Элемент)
	ФизическоеЛицоОбъект.ГодРождения = Формат(Год(ФизическоеЛицоОбъект.ДатаРождения),"ЧГ=");
КонецПроцедуры

#КонецОбласти
// }Рарус kotana #IN-11881 -Статус тренера 2021.01.19

#КонецОбласти