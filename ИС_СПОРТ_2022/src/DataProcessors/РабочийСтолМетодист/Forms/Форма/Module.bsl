
&НаКлиенте
Процедура СписокВедомостиКПНЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПоказатьЗначение(,Элементы.СписокВедомостиКПН.ТекущиеДанные.Значение);
КонецПроцедуры
#Область ОбработчикиСобытийФормы 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаСтраницаСпортсмены;
	ДекорацияСпортсменыНажатие(Неопределено);
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	ТабДокЭтапыЗаполнитьДанные();
	// {Рарус adilas #22219 -Функциональные опции 2021.12.13
	ТекущаяОрганизация = УчетСпортсменовВызовСервера.ТекущаяОрганизация();
	// {Рарус ivaart IN-17547 Скрывать группу отчётов "Допуски/страховки" по значению ФО  2021.08.06
	ИспользованиеСтрахований = УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(ТекущаяОрганизация).СтрахованиеСпортсменовОрганизация;
	ИспользованиеВозрастныхГрупп = УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(ТекущаяОрганизация).ВозрастныеГруппыОрганизация;
	
	// {Рарус adilas #9705 -Страхование спортсмена скрывать тем организациям, которым это не нужно 2020.10.07
	Если НЕ ИспользованиеСтрахований Тогда
		Элементы.ГруппаСпортсменСтраховка.Видимость 				= Ложь;
		Элементы.ГруппаНастройкиОтчетСтраховки.Видимость 			= Ложь;
		Элементы.ГруппаНастройкиСтраховыеКомпании.Видимость 		= Ложь;
		Элементы.ОтчетОбИстеченииСроковСтрахования.Видимость 		= Ложь; 
		Элементы.СтраховыеКомпании.Видимость 						= Ложь;
		Элементы.ГруппаСтраховки.Видимость 						    = Ложь;
		Элементы.ГруппаОтчетыСтраховки.Видимость					= Ложь;
		// {Рарус dotere #21990 -Скрывает блок страхования 2020.10.29
		Элементы.ГруппаПанельНастройкиСтрахованиеСпортсменов.Видимость = Ложь;
		// }Рарус dotere #21990 -Скрывает блок страхования 2020.10.29
	КонецЕсли;            
	
	Если НЕ ИспользованиеВозрастныхГрупп Тогда
		Элементы.ГруппаСпортсменВозрастнаяГруппа.Видимость 		    = Ложь;
		Элементы.ГруппаНастройкиУстановкаВозрастныхГрупп.Видимость  = Ложь;
		Элементы.ГруппаНастройкиУстановкаВозрастнойГруппы.Видимость = Ложь;
		Элементы.ГруппаНастройкиВозрастныеГруппы.Видимость 		    = Ложь;
		элементы.УстановкаВозрастнойГруппы.Видимость    		    = Ложь;
		Элементы.ВозрастныеГруппы.Видимость 					    = Ложь;
		Элементы.ГруппаУстановленныеВГ.Видимость     			    = Ложь;
		Элементы.УстановленныеВозрастныеГруппы.Видимость            = Ложь;
		Элементы.ГруппаСоревнованиеВозрастныеГруппыСписок.Видимость = Ложь;
		Элементы.НадписьСоревнованиеВозрастныеГруппы.Видимость      = Ложь;
	КонецЕсли;
	// }Рарус adilas #9705 -Страхование спортсмена скрывать тем организациям, которым это не нужно 2020.10.07
	// }Рарус ivaart IN-17547 Скрывать группу отчётов "Допуски/страховки" по значению ФО  2021.08.06
	// }Рарус adilas #22219 -Функциональные опции 2021.12.13
	ОбновитьСписокСпортсменов();
	Элементы.СписокСпортсмены.ТекущаяСтрока = 1;
	#Если ВебКлиент Тогда
		ВыбратьПервыйЭлемент();	
		ОбновитьДанныеСпортсмена();
    #КонецЕсли 
	ОбновитьСписокТренеров("ВидСпорта");
		
КонецПроцедуры

// {Рарус ivaart IN-17454 Открытие первого спортсмена на веб-клиенте 28.07.2021
&НаСервере
Процедура ВыбратьПервыйЭлемент()    
	Запрос = новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	"""" + СправочникСпортсмены.ФизическоеЛицо.Фамилия + "" "" + СправочникСпортсмены.ФизическоеЛицо.Имя КАК Спортсмен,
	               |	ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер, ЗНАЧЕНИЕ(Справочник.Тренеры.ПустаяСсылка)) КАК Тренер,
	               |	ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта, ЗНАЧЕНИЕ(Справочник.ВидыСпорта.ПустаяСсылка)) КАК ВидСпорта,
	               |	ВЫБОР
	               |		КОГДА СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Отчислен,
	               |	СправочникСпортсмены.Ссылка КАК Ссылка,
	               |	СправочникСпортсмены.СтатусСпортсмена КАК СтатусСпортсмена,
	               |	СправочникСпортсмены.ФизическоеЛицо.ГодРождения КАК ГодРождения
	               |ИЗ
	               |	Справочник.Спортсмены КАК СправочникСпортсмены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
	               |		ПО (ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен = СправочникСпортсмены.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
	               |		ПО (СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = СправочникСпортсмены.Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ,
	               |	"""" + СправочникСпортсмены.ФизическоеЛицо.Фамилия + "" "" + СправочникСпортсмены.ФизическоеЛицо.Имя,
	               |	ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер, ЗНАЧЕНИЕ(Справочник.Тренеры.ПустаяСсылка)),
	               |	ЕСТЬNULL(ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта, ЗНАЧЕНИЕ(Справочник.ВидыСпорта.ПустаяСсылка)),
	               |	СправочникСпортсмены.Ссылка,
	               |	СправочникСпортсмены.СтатусСпортсмена,
	               |	СправочникСпортсмены.ФизическоеЛицо.ГодРождения";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущиеДанные = Выборка.Ссылка;
	КонецЦикла;
	
	ТекущийСпортсмен = ТекущиеДанные;
КонецПроцедуры
// }Рарус ivaart IN-17454 Открытие первого спортсмена на веб-клиенте 28.07.2021

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьЖурналЭтапыСП(Команда)
	ОткрытьФорму("ЖурналДокументов.ЭтапыСпортивнойПодготовкиСпортсменов.ФормаСписка");	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ДекорацияСпортсменыНажатие(Элемент)
	
	УстановитьТипРамкиРаздела(Элемент);
	ТекущийРаздел = "Спортсмены";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокСпортсмены;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТренерыНажатие(Элемент)
	
	УстановитьТипРамкиРаздела(Элемент);
	ТекущийРаздел = "Тренеры";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокТренеры;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГруппыНажатие(Элемент)
	
	УстановитьТипРамкиРаздела(Элемент);
	ТекущийРаздел = "ЭтапыСП";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокЭтапыСП;
	ОбновитьСтраницуГруппы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоревнованияНажатие(Элемент)
	
	УстановитьТипРамкиРаздела(Элемент);
	ТекущийРаздел = "Соревнования";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокСоревнования;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиНажатие(Элемент)
	
	УстановитьТипРамкиРаздела(Элемент);
	ТекущийРаздел = "Настройки";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаНастройки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПосещенийНажатие(Элемент)
    ОткрытьФорму("Документ.ТабельПосещения.ФормаСписка");
КонецПроцедуры
&НаКлиенте
Процедура Спортсмены(Команда)
    
    ТекущийРаздел = "Спортсмены";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокСпортсмены;
    
КонецПроцедуры

&НаКлиенте
Процедура Тренеры(Команда)
    
    ТекущийРаздел = "Тренеры";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокТренеры;
    
КонецПроцедуры

&НаКлиенте
Процедура Группы(Команда)
    
    ТекущийРаздел = "Группы";
	УстановитьВидимостьДоступность();
	ОбновитьСтраницуГруппы();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокЭтапыСП;

КонецПроцедуры

&НаКлиенте
Процедура Соревнования(Команда)
    
    ТекущийРаздел = "Соревнования";
	УстановитьВидимостьДоступность();
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокСоревнования;
    
КонецПроцедуры

Процедура ИзменениеФормы(Команда)
        // Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокСоревнованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	// {Рарус adilas #19992 -Вид спорта в дереве тренеров 2021.09.28
	// {Рарус dotere #22442 -Если список пустой то показывает пояснение 2021.11.18
	Если ТекущиеДанные = Неопределено Тогда
		УстановитьВидимостьСоревнований(Ложь);
		Возврат;
	Иначе
		УстановитьВидимостьСоревнований(ТекущиеДанные.Свойство("Ссылка"));
	КонецЕсли;	
		
	//Если ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	// }Рарус dotere #22442 -Если список пустой то показывает пояснение 2021.11.18
	
	Если ТекущиеДанные.Свойство("Ссылка") Тогда
		Если ТекущиеДанные = Неопределено ИЛИ ТекущееСоревнование = ТекущиеДанные.Ссылка Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоСоревнование = ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.Соревнование");
		
		ТекущееСоревнование = ТекущиеДанные.Ссылка;
		ТекущееСоревнованиеУчастники = ПолучитьКоличествоУчастниковСоревнования();
		
		Если ЭтоСоревнование Тогда
			ТекущееСоревнованиеКоманды = ПолучитьКоличествоКомандСоревнования();
		КонецЕсли;	
		
		СписокСоревнованияПриАктивизацииСтрокиНаСервере();
		
	КонецЕсли;
	// }Рарус adilas #19992 -Вид спорта в дереве тренеров 2021.09.28
	
КонецПроцедуры
// {Рарус dotere #22076 -Видимость полей соревнования 2021.11.03
Процедура УстановитьВидимостьСоревнований(СсылкаСоревнования)
	Если СсылкаСоревнования = Истина Тогда
		Элементы.ГруппаСоревнованиеНаименование.Видимость = Истина;
		Элементы.ГруппаСоревнованиеДатаПроведения.Видимость = Истина;
		Элементы.ГруппаСоревнованиеУчастники.Видимость = Истина;
		Элементы.ГруппаСоревнованиеКоманды.Видимость = Истина;
		Элементы.ГруппаСоревнованиеПобедители.Видимость = Истина;
		Элементы.ГруппаСоревнованиеВозрастныеГруппы.Видимость = Истина;
		Элементы.ГруппаСоревнованиеПол.Видимость = Истина;
		Элементы.ГруппаСоревнованиеРейтинги.Видимость = Истина;
		Элементы.ГруппаСоревнованиеЗаявки.Видимость = Истина;
		Элементы.ГруппаСоревнованиеПротоколы.Видимость = Истина;
		Элементы.ГруппаСоревнованиеПояснение.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСоревнованиеНаименование.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеДатаПроведения.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеУчастники.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеКоманды.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеПобедители.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеВозрастныеГруппы.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеПол.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеРейтинги.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеЗаявки.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеПротоколы.Видимость = Ложь;
		Элементы.ГруппаСоревнованиеПояснение.Видимость = Истина;
	КонецЕсли
КонецПроцедуры
// }Рарус dotere #22076 -Видимость полей соревнования 2021.11.03

&НаКлиенте
Процедура СписокСоревнованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	// {adilas 03.12.2020
	Если Не ТекущиеДанные = Неопределено Тогда
	////////////////////////////////////////////
		ЭтоСоревнование = ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.Соревнование");
		
		ТекущееСоревнование = ТекущиеДанные.Ссылка;
		ТекущееСоревнованиеУчастники = ПолучитьКоличествоУчастниковСоревнования();
		
		Если ЭтоСоревнование Тогда
			ТекущееСоревнованиеКоманды = ПолучитьКоличествоКомандСоревнования();
		КонецЕсли;	
		
		СписокСоревнованияПриАктивизацииСтрокиНаСервере();
	КонецЕсли;
	
	// } 03.12.2020
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭтапыСППриАктивизацииСтроки(Элемент)
	
	// {Рарус adilas #19992 -Вид спорта в дереве тренеров 2021.09.28
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	// {Рарус dotere #22442 -Если список пустой то показывает пояснение 2021.11.18
	Если ТекущиеДанные = Неопределено Тогда
		УстановитьВидимостьЭтапов(Ложь);
		Возврат;
	Иначе
		УстановитьВидимостьЭтапов(ТекущиеДанные.Свойство("Этап"));
	КонецЕсли;
	
	//Если ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;                        
	// }Рарус dotere #22442 -Если список пустой то показывает пояснение 2021.11.18
	
	Если ТекущиеДанные.Свойство("Этап") Тогда 
		
		ТекущийЭтап = ТекущиеДанные.Этап;
		ТекущийЭтапТренер = ТекущиеДанные.Тренер;
		ТекущийЭтапВидСпорта = ТекущиеДанные.РодительскаяГруппировкаСтроки.Ключ; 
		
		ТекущийЭтапСпортПрограмма = ПолучитьСпортивнуюПрограммуЭтапа();
		Если ПустаяСтрока(ТекущийЭтапСпортПрограмма) Тогда
			
			ТекущийЭтапСпортПрограмма = "<...>";
			Элементы.ТекущийЭтапСпортПрограмма.Гиперссылка = Ложь;
			
		Иначе
			
			Элементы.ТекущийЭтапСпортПрограмма.Гиперссылка = Истина;
			
		КонецЕсли;
		
		ТекущийУчебныйГодПредставление = Формат(ПолучитьНачалоУчебногоГода(ТекущийЭтапУчебныйГод),"ДФ=dd.MM.yyyy")+"-"+Формат(ПолучитьКонецУчебногоГода(ТекущийЭтапУчебныйГод),"ДФ=dd.MM.yyyy");
		
		СписокЭтапыСППриАктивизацииСтрокиНаСервере();
		
	КонецЕсли;
	
	ТекущийЭтапУчебныйГод = УчебныйГод;
	// }Рарус adilas #19992 -Вид спорта в дереве тренеров 2021.09.28
		
КонецПроцедуры
// {Рарус dotere #22075 -Видимость полей этапов 2021.11.03
Процедура УстановитьВидимостьЭтапов(СсылкаЭтапы)
	Если СсылкаЭтапы = Ложь Тогда
		Элементы.ГруппаСводныеДанные.Видимость = Ложь;
		Элементы.ГруппаЭтап1.Видимость = Ложь;
		Элементы.ГруппаЭтап2.Видимость = Ложь;
		Элементы.ГруппаЭтап4.Видимость = Ложь;
		Элементы.ГруппаГруппа5.Видимость = Ложь;
		Элементы.ГруппаГруппа6.Видимость = Ложь;
		Элементы.ГруппаГруппа7.Видимость = Ложь;
		Элементы.ПояснениеЭтапы.Видимость = Истина;
	Иначе
	    Элементы.ГруппаСводныеДанные.Видимость = Истина;
		Элементы.ГруппаЭтап1.Видимость = Истина;
		Элементы.ГруппаЭтап2.Видимость = Истина;
		Элементы.ГруппаЭтап4.Видимость = Истина;
		Элементы.ГруппаГруппа5.Видимость = Истина;
		Элементы.ГруппаГруппа6.Видимость = Истина;
		Элементы.ГруппаГруппа7.Видимость = Истина;
		Элементы.ПояснениеЭтапы.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
// }Рарус dotere #22075 -Видимость полей этапов 2021.11.03
// {Рарус dotere #22075 -Ручное заполненеие таб дока, так как иначе в вебе не работает выравнивание по ширине 2021.11.19
Процедура ТабДокЭтапыЗаполнитьДанные()
	
	 	ОбластьЭтапыОтступ = ЭтапыПояснениеТаб.Область("R1C1:R1C12");
		ОбластьЭтапыОтступ.Объединить();

		ОбластьЭтапыЗаголовок = ЭтапыПояснениеТаб.Область("R2C1:R2C12");
		ОбластьЭтапыЗаголовок.Объединить();
		ОбластьЭтапыЗаголовок.Текст = "Описание раздела “Этапы СП”";
		мШрифт = Новый Шрифт(,, Истина, , , );
		ОбластьЭтапыЗаголовок.Шрифт = мШрифт;
		ОбластьЭтапыЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		ОбластьЭтапы1Отступ = ЭтапыПояснениеТаб.Область("R3C1:R3C12");
		ОбластьЭтапы1Отступ.Объединить();
		
		ОбластьЭтапы1Часть = ЭтапыПояснениеТаб.Область("R4C1:R4C12");
		ОбластьЭтапы1Часть.Объединить();
		ОбластьЭтапы1Часть.Текст = "	В программе ведется учет спортсменов согласно этапам спортивной подготовки.";  
		ОбластьЭтапы1Часть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине;
		
		ОбластьЭтапы2Отступ = ЭтапыПояснениеТаб.Область("R5C1:R5C12");
		ОбластьЭтапы2Отступ.Объединить();
		
		ОбластьЭтапы2Часть = ЭтапыПояснениеТаб.Область("R6C1:R6C12");
		ОбластьЭтапы2Часть.Объединить();
		ОбластьЭтапы2Часть.Текст = "	Раздел “Этапы СП” направлен на формирование сводной информации о количестве спортсменов на этапе спортивной подготовки у тренера в разрезе учебного года и вида спорта.";  
		ОбластьЭтапы2Часть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине;
		Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
			ОбластьЭтапы3Часть = ЭтапыПояснениеТаб.Область("R7C1:R7C12");
			ОбластьЭтапы3Часть.Объединить();
			ОбластьЭтапы3Часть.Текст ="	Цель раздела заключается в хранении и наглядном представлении сведений о количестве спортсменов у тренера на этапе спортивной подготовки в учебном году. Страница раздела позволяет увидеть количество спортсменов на этапе спортивной подготовки с делением по полу, году рождения, спортивному разряду и званию. Также на странице вы найдете информацию о дате зачисления или перевода спортсмена на этап спортивной подготовки. В случае если спортсмен был переведен на основании контрольно-переводных нормативов (далее КПН) на странице раздела есть возможность обратиться к ведомости КПН и ознакомится с итоговыми баллами набранными по итогам сдачи нормативов.";
			ОбластьЭтапы3Часть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине;	
		Иначе
			ОбластьЭтапы3Отступ = ЭтапыПояснениеТаб.Область("R7C1:R7C12");
			ОбластьЭтапы3Отступ.Объединить();
			ОбластьЭтапы3Часть = ЭтапыПояснениеТаб.Область("R8C1:R8C12");
			ОбластьЭтапы3Часть.Объединить();
			ОбластьЭтапы3Часть.Текст ="	Цель раздела заключается в хранении и наглядном представлении сведений о количестве спортсменов у тренера на этапе спортивной подготовки в учебном году. Страница раздела позволяет увидеть количество спортсменов на этапе спортивной подготовки с делением по полу, году рождения, спортивному разряду и званию. Также на странице вы найдете информацию о дате зачисления или перевода спортсмена на этап спортивной подготовки. В случае если спортсмен был переведен на основании контрольно-переводных нормативов (далее КПН) на странице раздела есть возможность обратиться к ведомости КПН и ознакомится с итоговыми баллами набранными по итогам сдачи нормативов.";
			ОбластьЭтапы3Часть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине;
		КонецЕсли
		
		
		//ОбластьЭтапы3Часть = ЭтапыПояснениеТаб.Область("R8C1:R8C12");
		//ОбластьЭтапы3Часть.Объединить();
		//ОбластьЭтапы3Часть.Текст ="	Цель раздела заключается в хранении и наглядном представлении сведений о количестве спортсменов у тренера на этапе спортивной подготовки в учебном году. Страница раздела позволяет увидеть количество спортсменов на этапе спортивной подготовки с делением по полу, году рождения, спортивному разряду и званию. Также на странице вы найдете информацию о дате зачисления или перевода спортсмена на этап спортивной подготовки. В случае если спортсмен был переведен на основании контрольно-переводных нормативов (далее КПН) на странице раздела есть возможность обратиться к ведомости КПН и ознакомится с итоговыми баллами набранными по итогам сдачи нормативов.";
		//ОбластьЭтапы3Часть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине;
КонецПроцедуры
// }Рарус dotere #22075 -Ручное заполненеие таб дока, так как иначе в вебе не работает выравнивание по ширине 2021.11.19
&НаСервере
Процедура СписокЭтапыСППриАктивизацииСтрокиНаСервере()
	
	НачалоУчебногоГода = ПолучитьНачалоУчебногоГода(ТекущийЭтапУчебныйГод);
	КонецУчебногоГода = ПолучитьКонецУчебногоГода(ТекущийЭтапУчебныйГод);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен.Ссылка КАК Спортсмен,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд
		|ПОМЕСТИТЬ Разряды
		|ИЗ
		|	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(
		|			,
		|			Спортсмен В
		|				(ВЫБРАТЬ
		|					ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен
		|				ИЗ
		|					РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(, Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|						И ВидСпорта = &ВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|				ГДЕ
		|					ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &ТекущийЭтап
		|					И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &ТекущийТренер)) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.ГодРождения КАК ГодРождения,
		|	ЕСТЬNULL(Разряды.Разряд, ""б/р"") КАК Разряд
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			,
		|			Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|				И ВидСпорта = &ВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Разряды КАК Разряды
		|		ПО ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.Ссылка = Разряды.Спортсмен
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &ТекущийТренер
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &ТекущийЭтап";
	
	Запрос.УстановитьПараметр("КонецУчебногоГода", КонецУчебногоГода);
	Запрос.УстановитьПараметр("НачалоУчебногоГода", НачалоУчебногоГода);
	Запрос.УстановитьПараметр("ТекущийЭтап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("ТекущийТренер", ТекущийЭтапТренер);
	
	ТекущийЭтапУчастники.Загрузить(Запрос.Выполнить().Выгрузить());
	
	УстановитьВедомостьКПН();
	
	Элементы.ГруппаКоличествоСпортсменовНаЭтапе.Заголовок = ПолучитьКоличествоСпортсменовНаЭтапе(ТекущийЭтап, НачалоУчебногоГода, КонецУчебногоГода);
	Элементы.ГруппаКоличествоЖенщинНаЭтапе.Заголовок = ПолучитьКоличествоЖенщинНаЭтапе(ТекущийЭтап, НачалоУчебногоГода, КонецУчебногоГода);
	Элементы.ГруппаКоличествоМужчинНаЭтапе.Заголовок = ПолучитьКоличествоМужчинНаЭтапе(ТекущийЭтап, НачалоУчебногоГода, КонецУчебногоГода);

	#область Скрыть	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.ГодРождения КАК Год,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.Ссылка) КАК СпортсменСсылка
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			,
		|			Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|				И ВидСпорта = &ВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &ТекущийЭтап
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &ТекущийТренер
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.ГодРождения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год";
	
	Запрос.УстановитьПараметр("КонецУчебногоГода", КонецУчебногоГода);
	Запрос.УстановитьПараметр("НачалоУчебногоГода", НачалоУчебногоГода);
	Запрос.УстановитьПараметр("ТекущийЭтап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("ТекущийТренер", ТекущийЭтапТренер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	
	ТекущийЭтапГодыРождения.Очистить();
	ТекущийЭтапГодыРождения.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Год"));
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	Для каждого Год из ТекущийЭтапГодыРождения цикл
		ИтоговаяТаблица.Колонки.Добавить("Г" + СтрЗаменить(Год," ", ""), , Год);
	КонецЦикла;
	
	ИтоговаяТаблица.Добавить();
	для Каждого количество из Таблица Цикл
		ИтоговаяТаблица.ЗаполнитьЗначения(количество.СпортсменСсылка,"Г" + СтрЗаменить(количество.Год, " ", ""));
	КонецЦикла;
		
	ВсегоВариантовЛет = ТекущийЭтапГодыРождения.Количество();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетТаблица");
	ОбластьКолонка = Макет.ПолучитьОбласть("ТекДанные|Колонка");
	ОбластьОтступ = Макет.ПолучитьОбласть("ТекДанные|Отступ");
	СтруктураКолонки = Новый Структура("Заголовок,Значение");
	
	ТабДокГодыРождения.Очистить();
	ТабДокГодыРождения.Вывести(ОбластьОтступ);
	
	Для Сч = 1 По ВсегоВариантовЛет Цикл
	    СтруктураКолонки.Заголовок = ТекущийЭтапГодыРождения[Сч - 1].Значение;
	    МассивСтрок = Таблица.НайтиСтроки(Новый Структура("Год", СтруктураКолонки.Заголовок));
	    СтруктураКолонки.Значение = МассивСтрок[0].СпортсменСсылка;
		ОбластьКолонка.Параметры.Заполнить(СтруктураКолонки);
	    ТабДокГодыРождения.Присоединить(ОбластьКолонка);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен КАК Спортсмен
		|ПОМЕСТИТЬ Разряды
		|ИЗ
		|	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(
		|			,
		|			Спортсмен В
		|				(ВЫБРАТЬ
		|					ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен
		|				ИЗ
		|					РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(, Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|						И ВидСпорта = &ВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|				ГДЕ
		|					ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &ТекущийЭтап
		|					И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &ТекущийТренер
		|				СГРУППИРОВАТЬ ПО
		|					ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен)) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен) КАК Спортсмен,
		|	ЕСТЬNULL(Разряды.Разряд, ""б/р"") КАК Разряд
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			,
		|			Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|				И ВидСпорта = &ВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Разряды КАК Разряды
		|		ПО ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен = Разряды.Спортсмен
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &ТекущийТренер
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &ТекущийЭтап
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Разряды.Разряд, ""б/р"")";
	
	Запрос.УстановитьПараметр("КонецУчебногоГода", КонецУчебногоГода);
	Запрос.УстановитьПараметр("НачалоУчебногоГода", НачалоУчебногоГода);
	Запрос.УстановитьПараметр("ТекущийЭтап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("ТекущийТренер", ТекущийЭтапТренер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	
	СпортивнаяКлассификация.Очистить();
	СпортивнаяКлассификация.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Разряд"));
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	Для каждого Разряд из СпортивнаяКлассификация цикл
		ИтоговаяТаблица.Колонки.Добавить("Р"+СтрЗаменить(СтрЗаменить(Разряд," ",""),"/",""),,Разряд);
	КонецЦикла;
	
	ИтоговаяТаблица.Добавить();
	для Каждого количество из Таблица Цикл
		ИтоговаяТаблица.ЗаполнитьЗначения(количество.Спортсмен, "Р"+СтрЗаменить(СтрЗаменить(Разряд," ",""),"/",""));
	КонецЦикла;

	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетТаблица");
	ОбластьКолонка = Макет.ПолучитьОбласть("ТекДанные|Колонка");
	ОбластьОтступ = Макет.ПолучитьОбласть("ТекДанные|Отступ");
	СтруктураКолонки = Новый Структура("Заголовок,Значение");
	    
	КоличествоУчастниковСРазрядами = 0;
	
	ВсегоВариантовРазрядов = СпортивнаяКлассификация.Количество();
	
	ТабДокРазряды.Очистить();
	ТабДокРазряды.Вывести(ОбластьОтступ);
	
	Для Сч = 1 По ВсегоВариантовРазрядов Цикл
	    СтруктураКолонки.Заголовок = СпортивнаяКлассификация[Сч - 1].Значение;
	    МассивСтрок = Таблица.НайтиСтроки(Новый Структура("Разряд", СтруктураКолонки.Заголовок));
	    СтруктураКолонки.Значение = МассивСтрок[0].Спортсмен;
	    КоличествоУчастниковСРазрядами = КоличествоУчастниковСРазрядами + СтруктураКолонки.Значение;
	    ОбластьКолонка.Параметры.Заполнить(СтруктураКолонки);
	    ТабДокРазряды.Присоединить(ОбластьКолонка); 
	КонецЦикла;
	
	// {Рарус ivaart IN-18498 Этапы СП. Основной список  2021.07.16 
	//Заполнение списка регистраторов этапа 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Регистратор КАК Регистратор,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта = &ВидСпорта
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &Этап
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
		|	И (ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Регистратор.ДатаЗачисления МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Регистратор.ДатаПеревода МЕЖДУ &ДатаНачала И &ДатаОкончания)";
	
	Запрос.УстановитьПараметр("ВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("Тренер", ТекущийЭтапТренер);
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ДатаНачала", ПолучитьНачалоУчебногоГода(ТекущийУчебныйГод));
	Запрос.УстановитьПараметр("ДатаОкончания", ПолучитьКонецУчебногоГода(ТекущийУчебныйГод));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СписокПереводовНаЭтап.Очистить();
	
	НовыйЗаголовок = "";
	Пока Выборка.Следующий() Цикл
		НоваяДата = Формат(Выборка.Период,"ДФ=dd.MM.yyyy");
		СписокПереводовНаЭтап.Добавить(Выборка.Регистратор);
		НовыйЗаголовок = ?(СтрНайти(НовыйЗаголовок,НоваяДата) <>0,НовыйЗаголовок, НовыйЗаголовок+?(НовыйЗаголовок = "", НоваяДата, ", "+НоваяДата));
	КонецЦикла;
	
	Если НовыйЗаголовок = "" тогда
		Элементы.ГруппаРегистраторыПереводы.Заголовок = "<...>";
	Иначе
		Элементы.ГруппаРегистраторыПереводы.Заголовок = НовыйЗаголовок;
	КонецЕсли;
	// }Рарус ivaart IN-18498 Этапы СП. Основной список  2021.07.16
	
	
    #КонецОбласти
КонецПроцедуры

// {Рарус ivaart IN-18498 Этапы СП. Основной список  2021.07.26 
//Получение спортивной программы для этапа
&НаСервере
Функция ПолучитьСпортивнуюПрограммуЭтапа()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.СпортивнаяПрограмма КАК СпортивнаяПрограмма
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &Этап
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта = &ВидСпорта
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Период >= &ПериодНачало
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Период <= &ПериодКонец";
	
	Запрос.УстановитьПараметр("ВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("ПериодКонец", ПолучитьКонецУчебногоГода(ТекущийУчебныйГод));
	Запрос.УстановитьПараметр("ПериодНачало", ПолучитьНачалоУчебногоГода(ТекущийУчебныйГод));
	Запрос.УстановитьПараметр("Тренер", ТекущийЭтапТренер);
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.СпортивнаяПрограмма) тогда
			возврат Справочники.СпортивныеПрограммы.ПустаяСсылка();
		Иначе
			Возврат Выборка.СпортивнаяПрограмма;
		КонецЕсли;
	КонецЦикла;
КонецФункции
// }Рарус ivaart IN-18498 Этапы СП. Основной список  2021.07.26
&НаСервере
Процедура УстановитьВедомостьКПН()
	СписокВедомостиКПН.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РезультатыСдачиКонтрольноПереводныхНормативовСрезПоследних.Регистратор.Ссылка КАК РегистраторСсылка
		|ИЗ
		|	РегистрСведений.РезультатыСдачиКонтрольноПереводныхНормативов.СрезПоследних(
		|			,
		|			ТекущийЭтап = &ТекущийЭтап
		|				И Тренер = &ТекущийЭтапТренер
		|				И ВидСпорта = &ТекущийЭтапВидСпорта
		|				И УчебныйГод = &УчебныйГод) КАК РезультатыСдачиКонтрольноПереводныхНормативовСрезПоследних";
	
	Запрос.УстановитьПараметр("УчебныйГод", ТекущийЭтапУчебныйГод);
	Запрос.УстановитьПараметр("ТекущийЭтап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ТекущийЭтапВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("ТекущийЭтапТренер", ТекущийЭтапТренер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокВедомостиКПН.Добавить(Выборка.РегистраторСсылка);
	КонецЦикла;	
	
	Элементы.ГруппаКоличествоВедомостейКПН.Заголовок = СписокВедомостиКПН.Количество();
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоСпортсменовНаЭтапе(Этап, НачалоУчебногоГода, КонецУчебногоГода)
	КолСпортсменовНаЭтапе.Очистить();
	Запрос = Новый Запрос;
	// {Рарус dotere #20244 -Упорядочивание  2021.09.27
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.Ссылка КАК СпортсменСсылка,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.ДатаРождения КАК СпортсменФизическоеЛицоДатаРождения,
		|	АВТОНОМЕРЗАПИСИ() КАК Номер
		|ПОМЕСТИТЬ Спортсмены
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			,
		|			Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|				И ВидСпорта = &ТекущийЭтапВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &Этап
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Спортсмены.СпортсменСсылка КАК СпортсменСсылка,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд.Ссылка КАК Разряд,
		|	Спортсмены.СпортсменФизическоеЛицоДатаРождения КАК СпортсменФизическоеЛицоДатаРождения,
		|	ВЫРАЗИТЬ(Спортсмены.Номер КАК ЧИСЛО) КАК Номер
		|ИЗ
		|	Спортсмены КАК Спортсмены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
		|		ПО Спортсмены.СпортсменСсылка = ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер";
	// }Рарус dotere #20244 -Упорядочивание  2021.09.27
	Запрос.УстановитьПараметр("КонецУчебногоГода", КонецУчебногоГода);
	Запрос.УстановитьПараметр("НачалоУчебногоГода", НачалоУчебногоГода);
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ТекущийЭтапВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("Тренер", ТекущийЭтапТренер);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = КолСпортсменовНаЭтапе.Добавить();
		Строка.номер = СокрЛП(Строка(Выборка.Номер));
		Строка.Ссылка = Выборка.СпортсменСсылка;
		Строка.ДатаРождения = Выборка.СпортсменФизическоеЛицоДатаРождения;
		Строка.Разряд = ?(Выборка.Разряд = Null, "б/р", Выборка.Разряд);
	КонецЦикла;
	
	Возврат Результат.Выгрузить().Количество();
КонецФункции

&НаСервере
Функция ПолучитьКоличествоЖенщинНаЭтапе(Этап, НачалоУчебногоГода, КонецУчебногоГода)	
	СписокЖенщиныНаЭтапе.Очистить();Запрос = Новый Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.ДатаРождения КАК СпортсменФизическоеЛицоДатаРождения,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.Ссылка КАК СпортсменСсылка,
		|	АВТОНОМЕРЗАПИСИ() КАК Номер
		|ПОМЕСТИТЬ Спортсмены
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			,
		|			Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|				И ВидСпорта = &ТекущийЭтапВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.Пол = &Пол
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &Этап
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Спортсмены.СпортсменФизическоеЛицоДатаРождения КАК СпортсменФизическоеЛицоДатаРождения,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд,
		|	Спортсмены.СпортсменСсылка КАК СпортсменСсылка,
		|	Спортсмены.Номер КАК Номер
		|ИЗ
		|	Спортсмены КАК Спортсмены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
		|		ПО Спортсмены.СпортсменСсылка = ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер";
	
	Запрос.УстановитьПараметр("КонецУчебногоГода", КонецУчебногоГода);
	Запрос.УстановитьПараметр("НачалоУчебногоГода", НачалоУчебногоГода);
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ТекущийЭтапВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("Тренер", ТекущийЭтапТренер);
	Запрос.УстановитьПараметр("Пол", Перечисления.ПолФизическогоЛица.Женский);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СписокЖенщиныНаЭтапе.Добавить();
		Строка.номер = Выборка.Номер;
		Строка.Ссылка = Выборка.СпортсменСсылка;
		Строка.ДатаРождения = Выборка.СпортсменФизическоеЛицоДатаРождения;
		Строка.Разряд = ?(Выборка.Разряд = Null, "б/р", Выборка.Разряд);
	КонецЦикла;

	
	Возврат Результат.Выгрузить().Количество();
КонецФункции

&НаСервере
Функция ПолучитьКоличествоМужчинНаЭтапе(Этап, НачалоУчебногоГода, КонецУчебногоГода)
	СписокМужчиныНаЭтапе.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.ДатаРождения КАК СпортсменФизическоеЛицоДатаРождения,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.Ссылка КАК СпортсменСсылка,
		|	АВТОНОМЕРЗАПИСИ() КАК Номер
		|ПОМЕСТИТЬ Спортсмены
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			,
		|			Период МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
		|				И ВидСпорта = &ТекущийЭтапВидСпорта) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен.ФизическоеЛицо.Пол = &Пол
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап = &Этап
		|	И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Спортсмены.СпортсменФизическоеЛицоДатаРождения КАК СпортсменФизическоеЛицоДатаРождения,
		|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд,
		|	Спортсмены.СпортсменСсылка КАК СпортсменСсылка,
		|	Спортсмены.Номер КАК Номер
		|ИЗ
		|	Спортсмены КАК Спортсмены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
		|		ПО Спортсмены.СпортсменСсылка = ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер";
	
	Запрос.УстановитьПараметр("КонецУчебногоГода", КонецУчебногоГода);
	Запрос.УстановитьПараметр("НачалоУчебногоГода", НачалоУчебногоГода);
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);
	Запрос.УстановитьПараметр("ТекущийЭтапВидСпорта", ТекущийЭтапВидСпорта);
	Запрос.УстановитьПараметр("Тренер", ТекущийЭтапТренер);
	Запрос.УстановитьПараметр("Пол", Перечисления.ПолФизическогоЛица.Мужской);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Строка = СписокМужчиныНаЭтапе.Добавить();		
		Строка.номер = Выборка.Номер;
		Строка.Ссылка = Выборка.СпортсменСсылка;
		Строка.ДатаРождения = Выборка.СпортсменФизическоеЛицоДатаРождения;
		Строка.Разряд = ?(Выборка.Разряд = Null, "б/р", Выборка.Разряд);
	КонецЦикла;

	
	Возврат Результат.Выгрузить().Количество();
КонецФункции


&НаКлиенте
Процедура СписокГруппыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущийЭтап = ТекущиеДанные.Ссылка;
	ТекущийЭтапТренер = ТекущиеДанные.Тренер;
	
	СписокЭтапыСППриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТренерПриИзменении(Элемент)
	
	ОбновитьСписокЭтапы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСпортаОтборСпортсменыПриИзменении(Элемент)
	ОбновитьСписокСпортсменов();
КонецПроцедуры

// {Рарус ivaart IN-19983 Отбор тренеров по статусу 2021.08.31
&НаКлиенте
Процедура ОтборТренерСтатусПриИзменении(Элемент)
	ОбновитьСписокТренеров("Статус");
КонецПроцедуры
// }Рарус ivaart IN-19983 Отбор тренеров по статусу 2021.08.31



&НаКлиенте
Процедура ВидСпортаОтборТренерПриИзменении(Элемент)
	ОбновитьСписокТренеров("ВидСпорта");
    //ОбновитьСписокСпортсменов();
    //ОбновитьСписокГрупп();
    //ОбновитьСписокСоревнований();
КонецПроцедуры

&НаКлиенте
Процедура ТренерЗакладкаСпортсменПриИзменении(Элемент)
		ОбновитьСписокСпортсменов();
КонецПроцедуры


&НаКлиенте
Процедура УчебныйГодПриИзменении(Элемент)
	
	ОбновитьСписокЭтапы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаСтатусаСпортсмена(Спортсмен)
	Возврат Спортсмен.СтатусСпортсмена <> Перечисления.СтатусыСпортсменов.СпортсменДругогоСпортивногоУчреждения;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьWebКрасный()
	Возврат WebЦвета.Красный;
КонецФункции

&НаКлиенте
Процедура СписокСпортсменыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущийСпортсмен = ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийСпортсмен = ТекущиеДанные.Ссылка;
	
	ОбновитьДанныеСпортсмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСпортсмена()
	Если ПроверкаСтатусаСпортсмена(ТекущийСпортсмен) тогда
		Элементы.ДополнительнаяИнформацияСпортсмена.Видимость = Истина;
		
		ПолучитьДанныеПоСпортсмену();
		
		//Допуск
		Если СтрНайти(ТекущийСпортсменДопускТренировкаОписание, "Просрочен") > 0 Тогда
			Элементы.ТекущийСпортсменДопускТренировкаОписание.ЦветТекста = ПолучитьWebКрасный();
		Иначе
			// {Рарус adilas #22687 -Цвет гиперссылок 2021.11.26
			Элементы.ТекущийСпортсменДопускТренировкаОписание.ЦветТекста = ПолучитьЦветГиперссылки();
			// }Рарус adilas #22687 -Цвет гиперссылок 2021.11.26
		КонецЕсли;
		
		Если СтрНайти(ТекущийСпортсменДопускОписание, "Просрочен") > 0 Тогда
			Элементы.ТекущийСпортсменДопускОписание.ЦветТекста = ПолучитьWebКрасный();
		Иначе
			// {Рарус adilas #22687 -Цвет гиперссылок 2021.11.26
			Элементы.ТекущийСпортсменДопускОписание.ЦветТекста = ПолучитьЦветГиперссылки(); 
			// }Рарус adilas #22687 -Цвет гиперссылок 2021.11.26
		КонецЕсли;	
		
		//Страховой полис
		Если СтрНайти(ТекущийСпортсменСтраховкаОписание, "Просрочен") > 0 Тогда
			Элементы.ТекущийСпортсменСтраховкаОписание.ЦветТекста = ПолучитьWebКрасный();
		Иначе
			// {Рарус adilas #22687 -Цвет гиперссылок 2021.11.26
			Элементы.ТекущийСпортсменСтраховкаОписание.ЦветТекста = ПолучитьЦветГиперссылки();
			// }Рарус adilas #22687 -Цвет гиперссылок 2021.11.26
		КонецЕсли;	
		
		//График
		ПостроитьГрафикПоСпортсмену();
		
		
		Элементы.ТекущийСпортсменДинамикаУспеха.Видимость = Ложь;
		Элементы.ТекущийСпортсменГрафикПоказатели.Видимость = Ложь;
		Элементы.ТекущийСпортсменСФП.Видимость = Ложь;
		Элементы.ГруппаСпортсмен.Видимость = Истина;
	Иначе
		Элементы.ДополнительнаяИнформацияСпортсмена.Видимость = Ложь;
	КонецЕсли;

	//Фото
	ОбновитьФотографиюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокСпортсменыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсмен);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменВозрастнаяГруппаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменВозрастнаяГруппаРегистратор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменРазрядПолноеНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменРазрядРегистратор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменДопускТренировкаОписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменДопускТренировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменДопускОписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменДопуск);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменСтраховкаОписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменСтраховка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменГруппаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменГруппа);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменТренерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменТренер);
	
КонецПроцедуры

&НаКлиенте
Процедура СпортивныйЭтапНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменЭтап);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменВидСпортаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменВидСпорта);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменСпортПрограммаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменСпортПрограмма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСпортсменКомандаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийСпортсменКоманда);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДинамикаУспехаРасшифровкаНажатие(Элемент)
	
	Элементы.ТекущийСпортсменДинамикаУспеха.Видимость = НЕ Элементы.ТекущийСпортсменДинамикаУспеха.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоказателиСФПНажатие(Элемент)
	
	Если НЕ Элементы.ТекущийСпортсменСФП.Видимость Тогда
		ПолучитьТаблицуСФППоСпортсмену();
	КонецЕсли;
	
	Элементы.ТекущийСпортсменСФП.Видимость = НЕ Элементы.ТекущийСпортсменСФП.Видимость;	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоказателиФизическойПодготовкиНажатие(Элемент)
	
	Если НЕ Элементы.ТекущийСпортсменГрафикПоказатели.Видимость Тогда
		ПостроитьГрафикПоСпортсменуПоказатели();
	КонецЕсли;
	
	Элементы.ТекущийСпортсменГрафикПоказатели.Видимость = НЕ Элементы.ТекущийСпортсменГрафикПоказатели.Видимость;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаСтатусаТренера(Тренер)
	Возврат Тренер.СтатусТренера <> Перечисления.СтатусыТренеров.ТренерДругогоСпортивногоУчреждения;
КонецФункции

&НаКлиенте
Процедура СписокТренерыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущийТренер = ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийТренер = ТекущиеДанные.Ссылка;
	
	Если ПроверкаСтатусаТренера(ТекущийТренер) тогда 
		
		Элементы.ГруппаТренерДатаРождения.Видимость = Истина;
		Элементы.ГруппаТренерСтажС.Видимость = Истина;
		Элементы.ДополнительнаяИнформацияТренера.Видимость = Истина;
		
		ДатаРождения = ПолучитьДатуРожденияТренера();
		Если ДатаРождения = Дата("00010101000000") Тогда 
			ТекущийТренерДатаРожденияОписание = "<...>";
		Иначе
			ТекущийТренерДатаРожденияОписание = Формат(ДатаРождения,"ДФ=dd.MM.yyyy");
		КонецЕсли; 

		Стаж = ПолучитьДатуСтажаТренера();
		
		Если Стаж = Дата("00010101000000") Тогда 
			ТекущийТренерСтажОписание = "<...>";
		Иначе
			ТекущийТренерСтажОписание = Формат(Стаж,"ДФ=dd.MM.yyyy");
		КонецЕсли;

		
		//Виды спорта
		ОтобразитьВидыСпорта();
	    
	    //СпортОбъекты
	    ОтобразитьСпортОбъекты();
	    
	     //Этапы СП
	    ОтобразитьЭтапыСП();
	Иначе 
		Элементы.ГруппаТренерДатаРождения.Видимость = Ложь;
		Элементы.ГруппаТренерСтажС.Видимость = Ложь;
		Элементы.ДополнительнаяИнформацияТренера.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаТренер.Видимость = Истина;

	//Фото
	ОбновитьФотографиюТренераНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТренерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТренерИмяНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийТренер);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСоставУчащихсяНажатие(Элемент)
	ОткрытьФорму("ЖурналДокументов.СоставУчащихсяСпортивногоУчреждения.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиОрганизацииНажатие(Элемент)
	ОткрытьФорму("Справочник.Организации.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСоставГруппНажатие(Элемент)
	ОткрытьФорму("ЖурналДокументов.СоставГрупп.ФормаСписка");		
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиГруппыНажатие(Элемент)
	ОткрытьФорму("Справочник.Группа.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСписокККНажатие(Элемент)
	ОткрытьФорму("Справочник.КвалификационныеКатегорииТренеров.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиВидыСпортаНажатие(Элемент)
	ОткрытьФорму("Справочник.ВидыСпорта.ФормаСписка");
КонецПроцедуры

// {Рарус adilas #22689 -Мед учреждение в допуске 2021.12.08
&НаКлиенте
Процедура МедицинскиеОрганизацииНажатие(Элемент)
	ОткрытьФорму("Справочник.МедицинскиеОрганизации.ФормаСписка");	
КонецПроцедуры
// }Рарус adilas #22689 -Мед учреждение в допуске 2021.12.08

&НаКлиенте
Процедура НадписьНастройкиХарактеристикиНажатие(Элемент)
	ОткрытьФорму("Справочник.ХарактеристикиДостиженийСпортсменов.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиРанжированиеСоревнованийНажатие(Элемент)
	ОткрытьФорму("Справочник.РанжированиеСоревнований.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСтраховыеКомпанииНажатие(Элемент)
	ОткрытьФорму("Справочник.СтраховыеКомпании.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиВидыДокументовНажатие(Элемент)
	ОткрытьФорму("Справочник.ВидыДокументовДляПриемаВСпортивноеУчреждение.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиУчебныеУчрежденияНажатие(Элемент)
	ОткрытьФорму("Справочник.УчебныеУчреждения.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиРодителиНажатие(Элемент)
	ОткрытьФорму("Справочник.РодителиЗаконныеПредставителиСпортсменов.ФормаСписка");		
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиМастерЗаполненияНажатие(Элемент)
	ОткрытьФорму("Обработка.МастерЗаполненияУчебногоГода.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиОткрытьЗакрытьУчебныйГодНажатие(Элемент)
	ОткрытьФорму("Документ.УправлениеУчебнымГодом.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиУстановкаВозрастнойГруппыНажатие(Элемент)
	ОткрытьФорму("Документ.УстановкаМеждународнойВозрастнойГруппы.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиВозрастныеГруппыНажатие(Элемент)
	ОткрытьФорму("Справочник.МеждународныеВозрастныеГруппы.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЛичнаяКарточкаСпортсменаНажатие(Элемент)
	ОткрытьФорму("Справочник.Спортсмены.Форма.ФормаПечатиЛичнойКарточкиСпортсмена");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПредоставленныеДокументыСпортсмена(Элемент)
	ОткрытьФорму("Отчет.ОтчетПоПредоставленнымДокументамСпортсменов.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЛичнаяКарточкаТренераНажатие(Элемент)
	ОткрытьФорму("Отчет.ЛичнаяКарточкаТренера.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПриказНажатие(Элемент)
	ОткрытьФорму("ЖурналДокументов.СоставГрупп.Форма.ФормаФормированияПечатнойФормыПриказа");		
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСпискиГруппНажатие(Элемент)
	ОткрытьФорму("Отчет.СпискиГрупп.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиОтчетДопускиНажатие(Элемент)
	ОткрытьФорму("Отчет.ОтчётОбИстеченииДопусковСпортсменовКСоревнованиям.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиОтчетСтраховкиНажатие(Элемент)
	ОткрытьФорму("Отчет.ОтчётОбИстеченииСроковСтрахования.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСогласиеНажатие(Элемент)
	ОткрытьФорму("Документ.СогласиеНаОбработкуПерсональныхДанных.Форма.ФормаПечатиСогласияНаОбработкуДанных");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиНормативыОФПНажатие(Элемент)
	ОткрытьФорму("Справочник.Нормативы.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЗаявкиНаСдачуНормативовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТипСоревнования", ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Норматив"));
	ОткрытьФорму("Документ.ЗаявкаНаПроведениеСоревнованияСдачаНормативаОФП.ФормаСписка", ПараметрыФормы);
	Оповестить("ИзменениеТипаСоревнования", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСдачаНормативовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТипСоревнования", ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Норматив"));
	ОткрытьФорму("Документ.СоревнованиеОФПСдачаНормативов.ФормаСписка", ПараметрыФормы);
	Оповестить("ИзменениеТипаСоревнования", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПротоколыСдачиНормативовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТипСоревнования", ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Норматив"));
	ОткрытьФорму("Документ.ПротоколОФПСдачаНормативов.ФормаСписка", ПараметрыФормы);
	Оповестить("ИзменениеТипаСоревнования", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЗаявкиОФПНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТипСоревнования", ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Соревнование"));
	ОткрытьФорму("Документ.ЗаявкаНаПроведениеСоревнованияСдачаНормативаОФП.ФормаСписка", ПараметрыФормы);
	Оповестить("ИзменениеТипаСоревнования", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСоревнованияОФПНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТипСоревнования", ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Соревнование"));
	ОткрытьФорму("Документ.СоревнованиеОФПСдачаНормативов.ФормаСписка", ПараметрыФормы);
    Оповестить("ИзменениеТипаСоревнования", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПротоколыОФПНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТипСоревнования", ПредопределенноеЗначение("Перечисление.ТипыСдачиНормативов.Соревнование"));
	ОткрытьФорму("Документ.ПротоколОФПСдачаНормативов.ФормаСписка", ПараметрыФормы);
	Оповестить("ИзменениеТипаСоревнования", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиРезультатыСоревнованийОФПНажатие(Элемент)
	
КонецПроцедуры
// }Рарус adilas #17294 -Отчет "Результаты  выступлений на соревнованиях всероссийского уровня" 2021.11.16

// {Рарус adilas #22157 -Отчет Всероссийские спортивные соревнования 2021.11.25
&НаКлиенте
Процедура ВсероссийскиеСпортивныеСоревнованияНажатие(Элемент)
	
	ОткрытьФорму("Отчет.ВсероссийскиеСпортивныеСоревнования.Форма.ФормаОтчета");
	
КонецПроцедуры
// }Рарус adilas #22157 -Отчет Всероссийские спортивные соревнования 2021.11.25

&НаКлиенте
Процедура НадписьНастройкиПодсчетРейтинговНажатие(Элемент)
	ОткрытьФорму("Отчет.ПодсчетРейтингов.Форма.ФормаОтчета");		
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиРейтингиНажатие(Элемент)
	ОткрытьФорму("Справочник.Рейтинги.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЦелиРейтингаНажатие(Элемент)
	ОткрытьФорму("Справочник.ЦелиПроведенияРейтинга.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСистемыПодсчетаБалловНажатие(Элемент)
	ОткрытьФорму("Справочник.СистемаПодсчетаБаллов.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиВключениеСоревнованийВРейтингиНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ВключениеСоревнованийВРейтинги.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСоревнованияСправочникНажатие(Элемент)
	ОткрытьФорму("Справочник.Соревнование.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиКомандыНажатие(Элемент)
	ОткрытьФорму("Справочник.Команды.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиСписокЗаявокНажатие(Элемент)
	ОткрытьФорму("Документ.ЗаявкаНаПроведениеСоревнования.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПроводимыеСоревнованияНажатие(Элемент)
	ОткрытьФорму("Документ.Соревнование.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПротоколСоревнованияНажатие(Элемент)
	ОткрытьФорму("Документ.ПротоколСоревнования.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиДостиженияНажатие(Элемент)
	ОткрытьФорму("ЖурналДокументов.РегистрацияДостиженийСпортсменов.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПротоколУчастияНажатие(Элемент)
	ОткрытьФорму("Отчет.ПротоколУчастияВCоревнованиях.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиДанныеВыполненияНормативовНажатие(Элемент)
	ОткрытьФорму("Отчет.ВыполнениеРазрядовСпортсменами.Форма");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЭтапыНажатие(Элемент)
	ОткрытьФорму("ЖурналДокументов.ЭтапыСпортивнойПодготовкиСпортсменов.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЭтапыВедомостиНажатие(Элемент)
	ОткрытьФорму("Документ.РезультатыСдачиКонтрольноПереводныхНормативов.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиЭтапыСправочникНажатие(Элемент)
	ОткрытьФорму("Справочник.ЭтапыСпортивнойПодготовки.ФормаСписка");	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции  

//Тренеры
&НаКлиенте
Процедура Подключаемый_НажатиеТренерВидСпорта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидСпортаИмя = Элемент.Имя;
	ВидСпортаНомерСтрока = СтрЗаменить(ВидСпортаИмя, "ТренерВидСпорта", "");
	
	Попытка
		ВидСпортаНомер = Число(ВидСпортаНомерСтрока);
	Исключение
		Возврат;	
	КонецПопытки;
	
	ПоказатьЗначение(, ТекущийТренерВидыСпорта[ВидСпортаНомер - 1].Значение);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеТренерСпортОбъект(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СпортОбъектИмя = Элемент.Имя;
	СпортОбъектНомерСтрока = СтрЗаменить(СпортОбъектИмя, "ТренерСпортОбъект", "");
    
    ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
    СпортОбъектНомер = ОписаниеТипаЧисло.ПривестиЗначение(СпортОбъектНомерСтрока);

    Если СпортОбъектНомер>0 Тогда
    
    	ПоказатьЗначение(, ТекущийТренерСпортОбъекты[СпортОбъектНомер - 1].Значение);	
    
    КонецЕсли; 
	
	
КонецПроцедуры

//Соревнования
&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеНаименование(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущееСоревнованиеСправочник);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеУчастники(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, Страница", "Соревнования", ТекущееСоревнование, "СоревнованиеУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеКоманды(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, Страница", "Соревнования", ТекущееСоревнование, "Команды");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеГруппа(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, СоревнованиеГруппа, Страница", "Соревнования", ТекущееСоревнование, Элемент.Заголовок, "СоревнованиеУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);				
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеМужчины(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, СоревнованиеПол, Страница", "Соревнования", ТекущееСоревнование, "мужчины", "СоревнованиеУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);				
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнования(Элемент)
	
	ПоказатьЗначение(,СписокПобедители[Элемент.Имя]);			
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеЖенщины(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, СоревнованиеПол, Страница", "Соревнования", ТекущееСоревнование, "женщины", "СоревнованиеУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеЗаявка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, СоревнованиеЗаявки, Страница", "Соревнования", ТекущееСоревнование, ТекущееСоревнованиеЗаявки, "Заявки");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеПротокол(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПротоколИмя = Элемент.Имя;
	ПротоколНомерСтрока = СтрЗаменить(ПротоколИмя, "СоревнованиеПротокол", "");
	
	Попытка
		ПротоколНомер = Число(ПротоколНомерСтрока);
	Исключение
		Возврат;	
	КонецПопытки;
	
	ПоказатьЗначение(, ТекущееСоревнованиеПротоколы[ПротоколНомер - 1].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеРейтинг(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РейтингИмя = Элемент.Имя;
	РейтингНомерСтрока = СтрЗаменить(РейтингИмя, "СоревнованиеРейтинг", "");
	
	Попытка
		РейтингНомер = Число(РейтингНомерСтрока);
	Исключение
		Возврат;	
	КонецПопытки;
	
	ПоказатьЗначение(, ТекущееСоревнованиеРейтинги[РейтингНомер - 1].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеРейтингОтчет(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РейтингИмя = Элемент.Имя;
	РейтингНомерСтрока = СтрЗаменить(РейтингИмя, "СоревнованиеРейтингОтчет", "");
	
	Попытка
		РейтингНомер = Число(РейтингНомерСтрока);
	Исключение
		Возврат;	
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура("Рейтинг", ТекущееСоревнованиеРейтинги[РейтингНомер - 1].Значение);
	ОткрытьФорму("Отчет.ПодсчетРейтингов.Форма.ФормаОтчета", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеГруппаМ(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, СоревнованиеГруппаИПол, СоревнованиеПол, Страница",
			"Соревнования",	ТекущееСоревнование, Элемент.Заголовок, "мужчины", "СоревнованиеУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);				
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеГруппаЖ(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, СоревнованиеСсылка, СоревнованиеГруппаИПол, СоревнованиеПол, Страница",
			"Соревнования", ТекущееСоревнование, Элемент.Заголовок, "женщины", "СоревнованиеУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);				
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеСоревнованиеПобедитель(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПобедительКод = Элемент.Имя;
	ПобедительКод = СтрЗаменить(ПобедительКод, ",", "");
	НачалоКода = СтрНайти(ПобедительКод, "_");
	ПобедительКод = Прав(ПобедительКод, СтрДлина(ПобедительКод) - НачалоКода);
	
	СпортсменСсылка = ПолучитьСсылкуНаСпортсмена(ПобедительКод);
	Если СпортсменСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, СпортсменСсылка);
	
КонецПроцедуры

//Группы
&НаКлиенте
Процедура Подключаемый_НажатиеУчебныйГодУчастники(Элемент, СтандартнаяОбработка)
	
	ОткрытьФорму("Отчет.КоличествоСпортсменовПоЭтапамСпортивнойПодготовки.Форма.ФормаОтчета");
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_НажатиеУчебныйГодГруппы(Элемент, СтандартнаяОбработка)
	
	ОткрытьФорму("Отчет.СписокГрупп.Форма.ФормаОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеУчебныйГодТренеры(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗТренеры, Страница", "ГруппыОбщее", Неопределено, ТекущийУчебныйГодТренеры, "ГруппаОбщееТренеры");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаТренеры(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТренерИмя = Элемент.Имя;
	ТренерНомерСтрока = СтрЗаменить(ТренерИмя, "ГруппаТренер", "");
	
	Попытка
		ТренерНомер = Число(ТренерНомерСтрока);
	Исключение
		Возврат;	
	КонецПопытки;
	
	ПоказатьЗначение(, ТекущаяГруппаТренеры[ТренерНомер - 1].Тренер);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаКоманда(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КомандаИмя = Элемент.Имя;
	КомандаНомерСтрока = СтрЗаменить(КомандаИмя, "ГруппаКоманда", "");
	
	Попытка
		КомандаНомер = Число(КомандаНомерСтрока);
	Исключение
		Возврат;	
	КонецПопытки;
	
	ПоказатьЗначение(, ТекущаяГруппаКоманды[КомандаНомер - 1].Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастники(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗУчастники, Страница", "Группы", ТекущийЭтап, ТекущийЭтапУчастники, "ГруппаУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиИмеютДопуски(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗУчастники, Страница", "Группы", ТекущийЭтап, ТекущаяГруппаУчастникиЕстьДопуск, "ГруппаУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиНеИмеютДопуски(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗУчастники, Страница", "Группы", ТекущийЭтап, ТекущаяГруппаУчастникиНетДопуска, "ГруппаУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиАктуальныеСтраховки(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗУчастники, Страница", "Группы", ТекущийЭтап, ТекущаяГруппаУчастникиЕстьСтраховка, "ГруппаУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиНеИмеютАктуальныеСтраховки(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗУчастники, Страница", "Группы", ТекущийЭтап, ТекущаяГруппаУчастникиНетСтраховки, "ГруппаУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиМужчины(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗУчастники, Страница", "Группы", ТекущийЭтап, ТекущаяГруппаУчастникиМужчины, "ГруппаУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиЖенщины(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗУчастники, Страница", "Группы", ТекущийЭтап, ТекущаяГруппаУчастникиЖенщины, "ГруппаУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиГодыРождения(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)

    СтандартнаяОбработка = Ложь;
        
    ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
    
    ГодРожденияНомер = ОписаниеТипаЧисло.ПривестиЗначение(Расшифровка);
    
    Если ГодРожденияНомер <> 0 Тогда
        
        ПараметрыФормы = Новый Структура("Раздел, ЭтапСсылка, ТЗУчастники, ГодРождения, Страница",
        "Этапы", ТекущийЭтап, ТекущийЭтапУчастники, ГодРожденияНомер, "ЭтапУчастники");
        ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаРазряды(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РазрядИмя = Элемент.Имя;
    РазрядНомерСтрока = СтрЗаменить(РазрядИмя, "ТабДокГодыРождения", "");

    
	//РазрядНомерСтрока = СтрЗаменить(РазрядИмя, "ГруппаРазряды", "");
	
	Попытка
		РазрядНомер = Число(РазрядНомерСтрока);
	Исключение
		// {Рарус adilas #00002 -Исправление по SonarQube 2021.04.08
        ЗаписьИсключенияДляЖурнала();
		
		// }Рарус adilas #00002 -Исправление по SonarQube 2021.04.08
	КонецПопытки;
	
	ПоказатьЗначение(, СпортивнаяКлассификация[РазрядНомер - 1].Значение);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчастникиРазряды(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;	
	
	
	
	ПараметрыФормы = Новый Структура("Раздел, ЭтапСсылка, ТЗУчастники, Разряд, Страница",
			"Этапы", ТекущийЭтап, ТекущийЭтапУчастники, ?(Строка(Расшифровка) = "б/р", "б/р",
			Расшифровка), "ЭтапУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_НажатиеГруппаУчебныйГод(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущийЭтапУчебныйГод);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГруппаОтчет(Элемент, СтандартнаяОбработка)
	// {Рарус adilas # -исправления по Sonar 2021.07.14
	// Заменил ТекущаяДата() на получение ТекущаяДатаСеанса();
	ПараметрыФормы = Новый Структура("Период, УчебныйГод, Этап, Тренер", КонецДня(ТекущаяДатаСеансаНаСервере()) + 1, ТекущийЭтапУчебныйГод, ТекущийЭтап, ТекущийЭтапТренер);
	ОткрытьФорму("Отчет.КоличествоСпортсменовПоЭтапамСпортивнойПодготовки.Форма.ФормаОтчета", ПараметрыФормы);
	// }Рарус adilas # -исправления по Sonar 2021.07.14
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// {Рарус adilas # -исправления по Sonar 2021.07.14
&НаСервере
Функция ТекущаяДатаСеансаНаСервере()
	
	ДатаСеанса = ТекущаяДатаСеанса();
	Возврат ДатаСеанса;
	
КонецФункции
// }Рарус adilas # -исправления по Sonar 2021.07.14

&НаКлиенте
Процедура УстановитьТипРамкиРаздела(Элемент)
	
	Если НЕ Элемент = Неопределено Тогда
		
		Если Элемент.Заголовок = ТекущийРаздел Тогда
			Возврат;
		КонецЕсли;	
		
		Элементы["Декорация" + Элемент.Заголовок + "2"].Видимость = Истина;
		Элементы["Декорация" + Элемент.Заголовок].Видимость = Ложь;
		Элементы["Декорация" + ТекущийРаздел + "2"].Видимость = Ложь;
		Элементы["Декорация" + ТекущийРаздел].Видимость = Истина;
		
		//Элемент.Картинка = БиблиотекаКартинок["Раздел" + Элемент.Заголовок + "2"];
		//Элементы["Декорация" + ТекущийРаздел].Картинка = БиблиотекаКартинок["Раздел" + ТекущийРаздел];
		
	Иначе
		
		Элементы.ДекорацияСпортсмены2.Видимость = Истина;
		Элементы.ДекорацияТренеры.Видимость = Истина;
		Элементы.ДекорацияЭтапыСП.Видимость = Истина;
		Элементы.ДекорацияСоревнования.Видимость = Истина;
        //Элементы.ДекорацияНастройки.Видимость = Истина;
		
		//Элементы.ДекорацияСпортсмены.Картинка	 = БиблиотекаКартинок["РазделСпортсмены"];
		//Элементы.ДекорацияТренеры.Картинка		 = БиблиотекаКартинок["РазделТренеры"];
		//Элементы.ДекорацияГруппы.Картинка		 = БиблиотекаКартинок["РазделГруппы"];
		//Элементы.ДекорацияСоревнования.Картинка	 = БиблиотекаКартинок["РазделСоревнования2"];
		//Элементы.ДекорацияНастройки.Картинка	 = БиблиотекаКартинок["РазделНастройки"];
	
	КонецЕсли;
    
    Элементы.ИзменитьФорму.Видимость = Истина;
    Элементы.ГруппаКнопокРаздела.Видимость = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["ГруппаСтраница" + ТекущийРаздел];
	
КонецПроцедуры

//Соревнования
// {Рарус ivaart IN-18500 Динамическая генерация элементов возрастных групп на форме. Создание подгруппы группы и её проверка 2021.10.08
&НаСервере
Функция СоздатьВозрастнуюПодгуппуФормы(Название, место, группа)
	ПодГруппа = Элементы.Добавить(Название,Тип("ГруппаФормы"),Группа);
	ПодГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПодГруппа.ОтображатьЗаголовок = Ложь; 						
	ПодГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ПодГруппа.Ширина = 14;     
	ПодГруппа.ГоризонтальноеПоложениеВГруппе = ?(место = 1, ГоризонтальноеПоложениеЭлемента.Лево, ?(место = 2, ГоризонтальноеПоложениеЭлемента.Центр, ГоризонтальноеПоложениеЭлемента.Право));
	
	Элемент = Элементы.Добавить(Название+место,Тип("ДекорацияФормы"),ПодГруппа);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = "";
	Элемент.Ширина = 14;
	Возврат ПодГруппа;
КонецФункции

&НаСервере
Процедура ЗаполнениеПробеловВГруппе(Группа, ВозрастнаяГруппа, Пол)
	
	Если Группа.ПодчиненныеЭлементы.Количество()<3 тогда
		МассивМестВГ = Новый Массив();
		
		Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
			МассивМестВГ.Добавить(Число(Элемент.Заголовок));
		КонецЦикла;
	      
		Для Счет = 1 По 3 Цикл
			Если МассивМестВГ.Найти(Счет) = Неопределено тогда
				Название = "Группа"+Пол+ВозрастнаяГруппа+Счет+"Пустая";
				Элемент = СоздатьВозрастнуюПодгуппуФормы(Название, Счет, группа);
				Если Счет = 1 тогда
					Элементы.Переместить(Элемент, Группа, Группа.ПодчиненныеЭлементы.Получить(0));
				ИначеЕсли Счет = 2 тогда
					Если Группа.ПодчиненныеЭлементы.Количество()>2 тогда 
						Элементы.Переместить(Элемент, Группа, Группа.ПодчиненныеЭлементы.Получить(1));
					Иначе
						Элементы.Переместить(Элемент, Группа);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
// }Рарус ivaart IN-18500 Динамическая генерация элементов возрастных групп на форме. Создание подгруппы группы и её проверка 2021.10.08

&НаСервере
Процедура СписокСоревнованияПриАктивизацииСтрокиНаСервере()
	// Без возрастных групп
	
	// {Рарус ivaart IN-18500 Динамическая генерация элементов возрастных групп на форме. Очищение 2021.08.11
	СписокПобедители = Новый Структура();
	
	ЭлементыГ = Элементы.СворачимаяСоревнованияТаблицыМ.ПодчиненныеЭлементы; 
	Пока ЭлементыГ.Количество() >0 Цикл
		ЭлементГ = ЭлементыГ.Получить(0);
		Элементы.Удалить(ЭлементГ);
	КонецЦикла;
	
	ЭлементыГ = Элементы.СворачимаяСоревнованияТаблицыЖ.ПодчиненныеЭлементы; 
	Пока ЭлементыГ.Количество() >0 Цикл
		ЭлементГ = ЭлементыГ.Получить(0);
		Элементы.Удалить(ЭлементГ);
	КонецЦикла;
	// }Рарус ivaart IN-18500 Динамическая генерация элементов возрастных групп на форме. Очищение 2021.08.11
		
	Если ЭтоСоревнование Тогда
		ТекущееСоревнованиеСправочник = ТекущееСоревнование.Соревнование;
	КонецЕсли;
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2021.01.26
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(ТекущаяОрганизация).ВозрастныеГруппыОрганизация Тогда
		МеждународныеВозрастныеГруппы = ПолучитьМеждународныеВозрастныеГруппы();
		ГруппыКоличество = МеждународныеВозрастныеГруппы.Количество();	
	КонецЕсли;
	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2021.01.26
	
	Ширина1 = 14;
	Ширина2 = 100;
	//// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	НовыйШрифт = ШрифтыСтиля.ОбычныйШрифт13;
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23	
	Если ЭтоСоревнование Или НЕ ТекущееСоревнование = "" тогда
		Элементы.ТекущееСоревнование.Гиперссылка = истина 
	Иначе 
		ТекущееСоревнование = "<...>";
		Элементы.ТекущееСоревнование.Гиперссылка = Ложь;
	КонецЕсли;
		
	//Дата проведения
	
	// {Рарус adilas #11878 -Ошибка в обработке методиста 2021.01.26
	Если ТекущееСоревнование.Метаданные().Реквизиты.Найти("ДатаНачалаСоревнования") <> Неопределено Тогда
		ТекущееСоревнованиеДатаПроведения = ТекущееСоревнование.ДатаНачалаСоревнования;
	Иначе	
		ТекущееСоревнованиеДатаПроведения = ТекущееСоревнование.ДатаПроведения;	
	КонецЕсли;	
	// }Рарус adilas #11878 -Ошибка в обработке методиста 2021.01.26
	
	//Команды
	
	Если ЭтоСоревнование Тогда
		Элементы.ГруппаСоревнованиеКоманды.Видимость = Истина;
	Иначе
		Элементы.ГруппаСоревнованиеКоманды.Видимость = Ложь;
	КонецЕсли;	
	
	//Группы
	ЭлементНаУдаление = Элементы.Найти("ГруппаСоревнованиеГруппы");
	Если НЕ ЭлементНаУдаление = Неопределено Тогда
		Элементы.Удалить(ЭлементНаУдаление);
	КонецЕсли;
	
	Если ЭтоСоревнование Тогда
		ТекущееСоревнованиеПобедители = ПолучитьПобедителей();
	КонецЕсли;
	
	Элементы.ГруппаСоревнованиеПобедители.Видимость = Ложь;
	
	ТабДокПобедителиМ.Очистить();				
	ТабДокПобедителиЖ.Очистить();	
	
	ГруппаМ = Элементы.СворачимаяСоревнованияТаблицыМ;
	ГруппаЖ = Элементы.СворачимаяСоревнованияТаблицыЖ;
	
	// {Рарус adilas #11068 -Возрастные группы в соревновании 2021.01.26
	Если Не Элементы.Найти("СоревнованиеГруппа1") = Неопределено тогда
		Сч = 1;
		ЭлементСсылка = Элементы.Найти("СоревнованиеГруппа"+Сч);
		Пока Не ЭлементСсылка = Неопределено Цикл 
			Элементы.Удалить(ЭлементСсылка);
			Сч = Сч+1;
			ЭлементСсылка = Элементы.Найти("СоревнованиеГруппа"+Сч);
		КонецЦикла;
	КонецЕсли;
	Если УчетСпортсменовВызовСервера.ТекущиеПараметрыФО(ТекущаяОрганизация).ВозрастныеГруппыОрганизация Тогда
		#Область ВозрастныеГруппы
		// {Рарус adilas #21126 -РС Методиста. Соревнования. 2021.10.07
		// Изначальный работающий вариант (без зацикливания)
		// {Рарус ivaart IN-18500 Динамическая генерация элементов возрастных групп на форме. Генерация формы 2021.08.11
		Элементы.ГруппаСоревнованиеВозрастныеГруппы.Видимость = Ложь;
		ЭтоПерваяГруппа = Истина;
		Если ЭтоСоревнование Тогда
			ГруппаНазвание = "";
			Группа = "";
						
			Элементы.ГруппаСоревнованиеПобедители.Видимость = Истина;
			МассивСтрок = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Пол", Перечисления.ПолФизическогоЛица.Мужской));
			Количество = МассивСтрок.Количество();
			Элементы.СворачимаяСоревнованияТаблицыМ.Заголовок = Количество;
			
			Если Количество > 0 Тогда
				
				Для СчП = 1 По Количество Цикл 
					Элементы.ГруппаСоревнованияТаблицыМ.Видимость = Истина;
					Если Не ГруппаНазвание = МассивСтрок[счп-1].Группа тогда
						Если Не ГруппаНазвание = "" тогда
							Отсуп = Элементы.Добавить("ОтступМ"+ГруппаНазвание,Тип("ДекорацияФормы"),ГруппаМ);
							Отсуп.Заголовок = "";
							Отсуп.Вид = ВидДекорацииФормы.Надпись;
							
							ЗаполнениеПробеловВГруппе(Группа, ГруппаНазвание, "М");
						КонецЕсли;
						ГруппаНазвание = МассивСтрок[счп-1].Группа;
						Группа = Элементы.Добавить("ГруппаМ"+ГруппаНазвание,Тип("ГруппаФормы"),ГруппаМ);
						Группа.Заголовок = ГруппаНазвание;
						Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
						Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
						Группа.Ширина = 45;
						Группа.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
						Группа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
						Группа.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
					КонецЕсли;
					
					ПодГруппа = Элементы.Добавить("ГруппаМ"+ГруппаНазвание+СчП,Тип("ГруппаФормы"),Группа);
					ПодГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ПодГруппа.ОтображатьЗаголовок = Ложь;
					ПодГруппа.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
					ПодГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ПодГруппа.Заголовок = МассивСтрок[СчП - 1].Место;
					ПодГруппа.ОтображатьЗаголовок = Ложь;
					ПодГруппа.Ширина = 15;
                    
					Элемент = Элементы.Добавить("ГруппаМНиз"+СчП,Тип("ДекорацияФормы"),ПодГруппа);
					Элемент.Вид = ВидДекорацииФормы.Надпись;
					Элемент.Заголовок = "(" + МассивСтрок[СчП - 1].Место + ")";
					Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
					Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
					
					ПодГруппа.ГоризонтальноеПоложениеВГруппе = ?(МассивСтрок[СчП - 1].Место = 1, ГоризонтальноеПоложениеЭлемента.Лево, ?(МассивСтрок[СчП - 1].Место = 2, ГоризонтальноеПоложениеЭлемента.Центр, ГоризонтальноеПоложениеЭлемента.Право));

					СписокПобедители.Вставить("ГруппаМВерх"+СчП,МассивСтрок[СчП - 1].Спортсмен.Ссылка);
					
					Элемент = Элементы.Добавить("ГруппаМВерх"+СчП,Тип("ДекорацияФормы"),ПодГруппа);
					Элемент.Вид = ВидДекорацииФормы.Надпись;
					Элемент.Заголовок = МассивСтрок[СчП - 1].Спортсмен;
					Элемент.Гиперссылка = истина;
					Элемент.УстановитьДействие("Нажатие","Подключаемый_НажатиеСоревнования");
					Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
					Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр; 
					Элемент.Ширина = 15; 
					
				КонецЦикла;
				ЗаполнениеПробеловВГруппе(Группа, ГруппаНазвание, "М");
			Иначе
				Элементы.ГруппаСоревнованияТаблицыМ.Видимость = Ложь;
			КонецЕсли;	
				
			МассивСтрок = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Пол", Перечисления.ПолФизическогоЛица.Женский));
			Количество = МассивСтрок.Количество();
			Элементы.СворачимаяСоревнованияТаблицыЖ.Заголовок = Количество;
			
			ГруппаНазвание = "";
			Если Количество > 0 Тогда
				Элементы.ГруппаСоревнованияТаблицыЖ.Видимость = Истина;
				Для СчП = 1 По Количество Цикл
					Если Не ГруппаНазвание = МассивСтрок[счп-1].Группа тогда
						Если Не ГруппаНазвание = "" тогда
							Отсуп = Элементы.Добавить("ОтступЖ"+ГруппаНазвание,Тип("ДекорацияФормы"),ГруппаЖ);
							Отсуп.Заголовок = "";
							Отсуп.Вид = ВидДекорацииФормы.Надпись;
							
							ЗаполнениеПробеловВГруппе(Группа, ГруппаНазвание, "Ж");
						КонецЕсли;       
						ГруппаНазвание = МассивСтрок[счп-1].Группа;
						Группа = Элементы.Добавить("ГруппаЖ"+ГруппаНазвание,Тип("ГруппаФормы"),ГруппаЖ);
						Группа.Заголовок = ГруппаНазвание;
						Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
						Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
						Группа.Ширина = 45;
						Группа.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
						Группа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
						Группа.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
					КонецЕсли;
					
					ПодГруппа = Элементы.Добавить("ГруппаЖ"+ГруппаНазвание+СчП,Тип("ГруппаФормы"),Группа);
					ПодГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ПодГруппа.ОтображатьЗаголовок = Ложь;
					ПодГруппа.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
					ПодГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ПодГруппа.Заголовок = МассивСтрок[СчП - 1].Место;
					ПодГруппа.ОтображатьЗаголовок = Ложь;
					ПодГруппа.Ширина = 15;
                    
					Элемент = Элементы.Добавить("ГруппаЖНиз"+СчП,Тип("ДекорацияФормы"),ПодГруппа);
					Элемент.Вид = ВидДекорацииФормы.Надпись;
					Элемент.Заголовок = "(" + МассивСтрок[СчП - 1].Место + ")";
					Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
					
					ПодГруппа.ГоризонтальноеПоложениеВГруппе = ?(МассивСтрок[СчП - 1].Место = 1, ГоризонтальноеПоложениеЭлемента.Лево, ?(МассивСтрок[СчП - 1].Место = 2, ГоризонтальноеПоложениеЭлемента.Центр, ГоризонтальноеПоложениеЭлемента.Право));

					СписокПобедители.Вставить("ГруппаЖВерх"+СчП,МассивСтрок[СчП - 1].Спортсмен.Ссылка);
					
					Элемент = Элементы.Добавить("ГруппаЖВерх"+СчП,Тип("ДекорацияФормы"),ПодГруппа);
					Элемент.Вид = ВидДекорацииФормы.Надпись;
					Элемент.Заголовок = МассивСтрок[СчП - 1].Спортсмен;
					Элемент.Гиперссылка = истина;
					Элемент.УстановитьДействие("Нажатие","Подключаемый_НажатиеСоревнования");
					Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;					
					Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр; 
					Элемент.Ширина = 15; 

				КонецЦикла;
				ЗаполнениеПробеловВГруппе(Группа, ГруппаНазвание, "Ж");
			Иначе
				Элементы.ГруппаСоревнованияТаблицыЖ.Видимость = Ложь;
			КонецЕсли;	
		КонецЕсли;
		#КонецОбласти
		// }Рарус adilas #21126 -РС Методиста. Соревнования. 2021.10.07
	Иначе 
		
		Элементы.ГруппаСоревнованиеВозрастныеГруппы.Видимость = Ложь;
		ЭтоПерваяГруппа = Истина;
		Если ЭтоСоревнование Тогда
			ГруппаНазвание = "";
			Группа = "";
						
			Элементы.ГруппаСоревнованиеПобедители.Видимость = Истина;
			МассивСтрок = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Пол", Перечисления.ПолФизическогоЛица.Мужской));
			Количество = МассивСтрок.Количество();
			Элементы.СворачимаяСоревнованияТаблицыМ.Заголовок = Количество;
			
			Если Количество > 0 Тогда
				Для место = 1 По 3 Цикл 
					Если Не ГруппаНазвание = "" тогда
						Отсуп = Элементы.Добавить("ОтступМ"+ГруппаНазвание,Тип("ДекорацияФормы"),ГруппаМ);
						Отсуп.Заголовок = "";
						Отсуп.Вид = ВидДекорацииФормы.Надпись;
					КонецЕсли;
					Элементы.ГруппаСоревнованияТаблицыМ.Видимость = Истина;
					ГруппаНазвание = Место;
					Группа = Элементы.Добавить("ГруппаМ"+ГруппаНазвание,Тип("ГруппаФормы"),ГруппаМ);
					Группа.Заголовок = Строка(ГруппаНазвание)+" место";
					Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
					Группа.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
					Группа.Видимость = Ложь;
					
					
					МассивСтрокМеста = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Место, Пол", Место, Перечисления.ПолФизическогоЛица.Мужской));
					Количество = МассивСтрокМеста.Количество(); 
					
					Для СчП = 1 По Количество Цикл 
						Группа.Видимость = Истина;
						
						СписокПобедители.Вставить("ГруппаМВерх"+Место+СчП,МассивСтрокМеста[СчП - 1].Спортсмен.Ссылка);
						
						Элемент = Элементы.Добавить("ГруппаМВерх"+Место+СчП,Тип("ДекорацияФормы"),Группа);
						Элемент.Вид = ВидДекорацииФормы.Надпись;
						Элемент.Заголовок = МассивСтрокМеста[СчП - 1].Спортсмен;
						Элемент.Гиперссылка = истина;
						Элемент.УстановитьДействие("Нажатие","Подключаемый_НажатиеСоревнования");
						Элемент.Ширина = 15;
						Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
						Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
					КонецЦикла;
				КонецЦикла;
			Иначе
				Элементы.ГруппаСоревнованияТаблицыМ.Видимость = Ложь;
			КонецЕсли;	
				
			МассивСтрок = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Пол", Перечисления.ПолФизическогоЛица.Женский));
			Количество = МассивСтрок.Количество();
			Элементы.СворачимаяСоревнованияТаблицыЖ.Заголовок = Количество;
			
			ГруппаНазвание = "";
			Если Количество > 0 Тогда
				Для место = 1 По 3 Цикл
					Если Не ГруппаНазвание = "" тогда
						Отсуп = Элементы.Добавить("ОтступЖ"+ГруппаНазвание,Тип("ДекорацияФормы"),ГруппаЖ);
						Отсуп.Заголовок = "";
						Отсуп.Вид = ВидДекорацииФормы.Надпись;
					КонецЕсли;
					Элементы.ГруппаСоревнованияТаблицыЖ.Видимость = Истина;
					ГруппаНазвание = Место;
					Группа = Элементы.Добавить("ГруппаЖ"+ГруппаНазвание,Тип("ГруппаФормы"),ГруппаЖ);
					Группа.Заголовок = Строка(ГруппаНазвание)+" место";
					Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;					
					Группа.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
					Группа.Видимость = Ложь;
					
					МассивСтрокМеста = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Место, Пол", Место, Перечисления.ПолФизическогоЛица.Женский));
					Количество = МассивСтрокМеста.Количество(); 
					
					Для СчП = 1 По Количество Цикл 
						Группа.Видимость = Истина;
						
						СписокПобедители.Вставить("ГруппаЖВерх"+Место+СчП,МассивСтрокМеста[СчП - 1].Спортсмен.Ссылка);
						
						Элемент = Элементы.Добавить("ГруппаЖВерх"+Место+СчП,Тип("ДекорацияФормы"),Группа);
						Элемент.Вид = ВидДекорацииФормы.Надпись;
						Элемент.Заголовок = МассивСтрокМеста[СчП - 1].Спортсмен;
						Элемент.Гиперссылка = истина;
						Элемент.УстановитьДействие("Нажатие","Подключаемый_НажатиеСоревнования");
						Элемент.Ширина = 15;
						Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
						Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
					КонецЦикла;
				КонецЦикла;
			Иначе
				Элементы.ГруппаСоревнованияТаблицыМ.Видимость = Ложь;
			КонецЕсли;	
		КонецЕсли;
		
		
		
		
		
		//Элементы.ГруппаСоревнованиеПобедители.Видимость = Истина;
		//Элементы.ГруппаСоревнованиеВозрастныеГруппы.Видимость = Истина;
		//Элементы.ГруппаСоревнованиеВозрастныеГруппыСписок.ОтображатьЗаголовок = Не ГруппыКоличество <> 0;

		//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		//Макет = ОбработкаОбъект.ПолучитьМакет("МакетШирокаяТаблица");
		//ОбластьКолонка = Макет.ПолучитьОбласть("ТекДанные|Колонка");
		//ОбластьОтступ = Макет.ПолучитьОбласть("ТекДанные|Отступ");
		//СтруктураКолонки = Новый Структура("Заголовок,Значение");

		//ТабДокПобедителиМ.Вывести(ОбластьОтступ);
		//
		//Элементы.ТабДокПобедителиМ.Видимость = Истина;
		//Элементы.ТабДокПобедителиЖ.Видимость = Истина; 
		//			
		//МассивСтрок = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Пол", Перечисления.ПолФизическогоЛица.Мужской));
		//	
		//	Если МассивСтрок.Количество() > 0 Тогда
		//		Для СчП = 1 По МассивСтрок.Количество() Цикл
		//			Элементы.ГруппаСоревнованияТаблицыМ.Видимость = Истина;
		//			СтруктураКолонки.Заголовок = МассивСтрок[СчП - 1].Спортсмен;
		//			СтруктураКолонки.Значение ="(" + МассивСтрок[СчП - 1].Место + ")";
		//			ОбластьКолонка.Параметры.Заполнить(СтруктураКолонки);
		//			ТабДокПобедителиМ.Присоединить(ОбластьКолонка);
		//		КонецЦикла;
		//	Иначе
		//		Элементы.ГруппаСоревнованияТаблицыМ.Видимость = Ложь;
		//	КонецЕсли;	
		//	
		//	МассивСтрок = ТекущееСоревнованиеПобедители.НайтиСтроки(Новый Структура("Пол", Перечисления.ПолФизическогоЛица.Женский));
		//	
		//	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		//	Макет = ОбработкаОбъект.ПолучитьМакет("МакетШирокаяТаблица");
		//	ОбластьКолонка = Макет.ПолучитьОбласть("ТекДанные|Колонка");
		//	ОбластьОтступ = Макет.ПолучитьОбласть("ТекДанные|Отступ");
		//	СтруктураКолонки = Новый Структура("Заголовок,Значение");
		//	
		//	Если МассивСтрок.Количество() > 0 Тогда				
		//		ТабДокПобедителиЖ.Вывести(ОбластьОтступ);
		//		Для СчП = 1 По МассивСтрок.Количество() Цикл
		//			Элементы.ГруппаСоревнованияТаблицыЖ.Видимость = Истина;
		//			СтруктураКолонки.Заголовок = МассивСтрок[СчП - 1].Спортсмен;
		//			СтруктураКолонки.Значение ="(" + МассивСтрок[СчП - 1].Место + ")";
		//			ОбластьКолонка.Параметры.Заполнить(СтруктураКолонки);
		//			ТабДокПобедителиЖ.Присоединить(ОбластьКолонка);
		//		КонецЦикла;
		//	Иначе
		//		Элементы.ГруппаСоревнованияТаблицыЖ.Видимость = Ложь;					
		//	КонецЕсли;	
		
	КонецЕсли;
	// }Рарус ivaart IN-18500 Динамическая генерация элементов возрастных групп на форме. Генерация формы 2021.08.11
	
	// }Рарус adilas #11068 -Возрастные группы в соревновании 2021.01.26
	
	//Рейтинги
	ТекущееСоревнованиеРейтинги = ПолучитьРейтинги();
		
	Если ТекущееСоревнованиеРейтинги.Количество() = 0 Тогда
		Элементы.ГруппаСоревнованиеРейтингиСписок.Заголовок = "<...>";
	Иначе
		ЗаголовокГруппы = "";
		Для Сч = 1 По ТекущееСоревнованиеРейтинги.Количество() Цикл	
			Строка = ?(сч=1, ТекущееСоревнованиеРейтинги.Получить(Сч-1).Значение, ", "+ТекущееСоревнованиеРейтинги.Получить(Сч-1).Значение);
			ЗаголовокГруппы = ЗаголовокГруппы + Строка;
		КонецЦикла;
		Элементы.ГруппаСоревнованиеРейтингиСписок.Заголовок = ЗаголовокГруппы;
	КонецЕсли;	
	
	//Заявки
	ДанныеПоЗаявкам = ПолучитьЗаявки();
	
	ЗаголовокГруппы = "" + ТекущееСоревнованиеЗаявки.Количество();
		
	Если ЭтоСоревнование Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+ " (от " + ДанныеПоЗаявкам.КоличествоКоманд + " команд)";
	КонецЕсли;
	
	Элементы.СоревнованиеЗаявки.Заголовок = ЗаголовокГруппы;
	
	//Протоколы
	ТекущееСоревнованиеПротоколы = ПолучитьПротоколы();
	
	Если ТекущееСоревнованиеПротоколы.Количество() = 0 Тогда
		
		Элементы.ГруппаСоревнованиеПротоколыСписок.Заголовок = "<...>";
	Иначе
		ЗаголовокГруппы = "";
		Для Сч = 1 По ТекущееСоревнованиеПротоколы.Количество() Цикл	
			Протокол = ТекущееСоревнованиеПротоколы.Получить(Сч-1).Значение;
			Строка = "№" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Протокол.Номер) + " от " + Формат(Протокол.Дата, "ДФ=dd.MM.yyyy")+?(Сч = ТекущееСоревнованиеПротоколы.Количество(), "", ",");
			ЗаголовокГруппы = ЗаголовокГруппы + Строка;
		КонецЦикла;
		Элементы.ГруппаСоревнованиеПротоколыСписок.Заголовок = ЗаголовокГруппы;
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоУчастниковСоревнования()
	
	Возврат ТекущееСоревнование.СоставУчастников.Количество();
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоКомандСоревнования()
	// {Рарус dotere #20267 -Удаление пустых комманд 2021.09.29
	ТаблицаКоманд = ТекущееСоревнование.СоставУчастников.Выгрузить();
	ТаблицаКоманд.Свернуть("Команда", "");
	Для каждого строка из ТаблицаКоманд Цикл
		Если Не ЗначениеЗаполнено(строка.Команда) Тогда
			ТаблицаКоманд.Удалить(строка);
		КонецЕсли;
	КонецЦикла;
		Возврат ТаблицаКоманд.Количество();
	// }Рарус dotere #20267 -Удаление пустых комманд 2021.09.29
КонецФункции

&НаСервере
Функция ПолучитьМеждународныеВозрастныеГруппы()
	
	ТаблицаГрупп = ТекущееСоревнование.СоставУчастников.Выгрузить();
	ТаблицаГрупп.Свернуть("МеждународнаяВозрастнаяГруппа", "");
	ТаблицаГрупп.Сортировать("МеждународнаяВозрастнаяГруппа");
		
	Возврат ТаблицаГрупп.ВыгрузитьКолонку("МеждународнаяВозрастнаяГруппа");
	
КонецФункции

&НаСервере
Функция ПолучитьПобедителей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.МеждународнаяВозрастнаяГруппа КАК Группа,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Спортсмен.ФизическоеЛицо.Пол КАК Пол,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Спортсмен КАК Спортсмен,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Спортсмен.Код КАК Код,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Спортсмен.ФизическоеЛицо.Фамилия + "" "" + ИтоговыеРезультатыСоревнованияСрезПоследних.Спортсмен.ФизическоеЛицо.Имя КАК ФамилияИмя,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Место КАК Место
	|ИЗ
	|	РегистрСведений.ИтоговыеРезультатыСоревнования.СрезПоследних(
	|			,
	|			Организация = &Организация
	|				И УчебныйГод = &УчебныйГод
	|				И Соревнование = &Соревнование
	|				И ВидСпорта = &ВидСпорта
	|				И ДокументОснование = &Ссылка) КАК ИтоговыеРезультатыСоревнованияСрезПоследних
	|ГДЕ
	|	(ИтоговыеРезультатыСоревнованияСрезПоследних.Место = 1
	|			ИЛИ ИтоговыеРезультатыСоревнованияСрезПоследних.Место = 2
	|			ИЛИ ИтоговыеРезультатыСоревнованияСрезПоследних.Место = 3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Группа,
	|	Место,
	|	Спортсмен
	|	
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.Параметры.Вставить("Организация");
	Запрос.Параметры.Вставить("УчебныйГод");
	Запрос.Параметры.Вставить("Соревнование");
	Запрос.Параметры.Вставить("ВидСпорта");
	Запрос.Параметры.Вставить("Ссылка");
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, ТекущееСоревнование);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаСервере
Функция ПолучитьРейтинги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВключениеСоревнованийВРейтинги.Рейтинг КАК Рейтинг
	|ИЗ
	|	РегистрСведений.ВключениеСоревнованийВРейтинги КАК ВключениеСоревнованийВРейтинги
	|ГДЕ
	|	ВключениеСоревнованийВРейтинги.Соревнование = &Соревнование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рейтинг
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Соревнование", ТекущееСоревнованиеСправочник);
	
	РейтингиСписок = Новый СписокЗначений;
	РейтингиСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Рейтинг"));
	
	Возврат РейтингиСписок;
	
КонецФункции	

&НаСервере
Функция ПолучитьЗаявки()
	
	Запрос = Новый Запрос;
	
	Если ЭтоСоревнование Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиСоревнований.Спортсмен КАК Спортсмен,
		|	УчастникиСоревнований.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
		|	УчастникиСоревнований.Команда КАК Команда
		|ПОМЕСТИТЬ ВТ_СписокЗарегистрированныхНаСоревнование
		|ИЗ
		|	РегистрСведений.УчастникиСоревнований.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И УчебныйГод = &УчебныйГод
		|				И ВидСпорта = &ВидСпорта
		|				И Соревнование = &Соревнование
		|				И МеждународнаяВозрастнаяГруппа В (&СписокВозрастныхГрупп)
		|				И Регистратор = &ТекущийДокумент) КАК УчастникиСоревнований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаявкиНаПроведениеСоревнования.Регистратор КАК Заявка,
		|	ЗаявкиНаПроведениеСоревнования.Команда КАК Команда,
		|	ЗаявкиНаПроведениеСоревнования.Тренер КАК Тренер
		|ИЗ
		|	РегистрСведений.ЗаявкиНаПроведениеСоревнования.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И УчебныйГод = &УчебныйГод
		|				И ВидСпорта = &ВидСпорта
		|				И Соревнование = &Соревнование
		|				И МеждународнаяВозрастнаяГруппа В (&СписокВозрастныхГрупп)
		|				И (Спортсмен, Команда) В
		|					(ВЫБРАТЬ
		|						ВТ_СписокЗарегистрированныхНаСоревнование.Спортсмен,
		|						ВТ_СписокЗарегистрированныхНаСоревнование.Команда
		|					ИЗ
		|						ВТ_СписокЗарегистрированныхНаСоревнование КАК ВТ_СписокЗарегистрированныхНаСоревнование)) КАК ЗаявкиНаПроведениеСоревнования
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заявка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Соревнование"         , ТекущееСоревнованиеСправочник);
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиСоревнованийОФПСдачаНормативовСрезПоследних.Спортсмен КАК Спортсмен,
		|	УчастникиСоревнованийОФПСдачаНормативовСрезПоследних.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
		|ПОМЕСТИТЬ ВТ_СписокЗарегистрированныхНаСоревнование
		|ИЗ
		|	РегистрСведений.УчастникиСоревнованийОФПСдачаНормативов.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И УчебныйГод = &УчебныйГод
		|				И ВидСпорта = &ВидСпорта
		|				И ТипСоревнования = &ТипСоревнования
		|				И МеждународнаяВозрастнаяГруппа В (&СписокВозрастныхГрупп)
		|				И Регистратор = &ТекущийДокумент) КАК УчастникиСоревнованийОФПСдачаНормативовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативовСрезПоследних.Регистратор КАК Заявка,
		|	ЗНАЧЕНИЕ(Справочник.Команды.ПустаяСсылка) КАК Команда,
		|	ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативовСрезПоследних.Тренер КАК Тренер
		|ИЗ
		|	РегистрСведений.ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативов.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И УчебныйГод = &УчебныйГод
		|				И ВидСпорта = &ВидСпорта
		|				И ТипСоревнования = &ТипСоревнования
		|				И МеждународнаяВозрастнаяГруппа В (&СписокВозрастныхГрупп)
		|				И Спортсмен В
		|					(ВЫБРАТЬ
		|						ВТ_СписокЗарегистрированныхНаСоревнование.Спортсмен
		|					ИЗ
		|						ВТ_СписокЗарегистрированныхНаСоревнование КАК ВТ_СписокЗарегистрированныхНаСоревнование)) КАК ЗаявкиНаПроведениеСоревнованияОФПСдачаНормативовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заявка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ТипСоревнования"         , ТекущееСоревнование.ТипСоревнования);
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Организация"          , ТекущееСоревнование.Организация);
	Запрос.УстановитьПараметр("УчебныйГод"           , ТекущееСоревнование.УчебныйГод);
	Запрос.УстановитьПараметр("ВидСпорта"            , ТекущееСоревнование.ВидСпорта);
	Запрос.УстановитьПараметр("ТекущийДокумент"      , ТекущееСоревнование);
	Запрос.УстановитьПараметр("СписокВозрастныхГрупп", ТекущееСоревнованиеСправочник.МеждународныеВозрастныеГруппы.ВыгрузитьКолонку("МеждународнаяВозрастнаяГруппа"));
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	Если ЭтоСоревнование Тогда
		ТЗКоманды = ТЗРезультат.Скопировать(, "Команда");
		ТЗКоманды.Свернуть("Команда", "");
		КоличествоКоманд = ТЗКоманды.Количество();
	Иначе
		КоличествоКоманд = 0;
	КонецЕсли;	
	
	ТекущееСоревнованиеЗаявки.Загрузить(ТЗРезультат);
	
	Возврат Новый Структура("КоличествоКоманд", КоличествоКоманд);
	
КонецФункции

&НаСервере
Функция ПолучитьПротоколы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПротоколСоревнования.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПротоколСоревнования КАК ПротоколСоревнования
	|ГДЕ
	|	ПротоколСоревнования.ДокументОснование = &ДокументОснование
	|	И ПротоколСоревнования.Проведен";
	
	Если НЕ ЭтоСоревнование Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПротоколСоревнования", ".ПротоколОФПСдачаНормативов");
	КонецЕсли;	
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееСоревнование);
	
	ПротоколыСписок = Новый СписокЗначений;
	ПротоколыСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат ПротоколыСписок;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаСпортсмена(Код)
	
	Возврат Справочники.Спортсмены.НайтиПоКоду(Код);
	
КонецФункции


//Спортсмены


// {Рарус dotere #22852 -Разделение соревнований по рангу 2021.12.13
&НаСервере
Процедура ПостроитьГрафикПоСпортсмену()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.ДокументОснование КАК Документ,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Соревнование.Наименование КАК Соревнование,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.ДокументОснование.ДатаНачалаСоревнования КАК Дата,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Место КАК Место,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Соревнование.Ранг.Родитель КАК Родитель,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.ДатаНачалаСоревнования КАК ДатаНачалаСоревнования,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.ДатаОкончанияСоревнования КАК ДатаОкончанияСоревнования,
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.Соревнование.Ранг.Наименование КАК Ранг
	|ИЗ
	|	РегистрСведений.ИтоговыеРезультатыСоревнования.СрезПоследних(, Спортсмен = &Спортсмен) КАК ИтоговыеРезультатыСоревнованияСрезПоследних
	|ГДЕ
	|	ИтоговыеРезультатыСоревнованияСрезПоследних.ДокументОснование.Проведен
	|	И 1 = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.УстановитьПараметр("Спортсмен", ТекущийСпортсмен);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("Период");
	Точки = 0;
	Пока Точки < 4 Цикл
		РезультатНачало = ЗначениеГрафика(0);
		ТочкаНачало = ТекущийСпортсменГрафик.УстановитьТочку(Формат(Дата(1,1,1), "ДФ=dd.MM.yyyy"));
		ТекущийСпортсменГрафик.УстановитьЗначение(ТочкаНачало, ТекущийСпортсменГрафик.Серии[Точки], РезультатНачало, ,
					"" + "" + Символы.ПС + "Место: " + 0);
		Точки = Точки + 1;
	КонецЦикла;
	ТекущийСпортсменГрафик.Точки.Очистить();
	Отсчет = 0;
	Если ТЗ.Количество() > 0 Тогда
		НачальнаяДата = ТЗ[0].Дата;
		ДатаОкончания = ТЗ[ТЗ.Количество()-1].Дата;
		Если Год(ДатаОкончания) - Год(НачальнаяДата) = 0 Тогда
			НачальнаяДата = НачалоМесяца(НачальнаяДата);
			ДатаОкончания = КонецМесяца(ДатаОкончания);
		Иначе
			НачальнаяДата = НачалоГода(НачальнаяДата);
			ДатаОкончания = КонецГода(ДатаОкончания);
		КонецЕсли;
		ТекущийСпортсменГрафик.УстановитьТочку("");
	КонецЕсли;
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если СтрокаТЗ.ДатаНачалаСоревнования = СтрокаТЗ.ДатаОкончанияСоревнования Тогда
			ТЗ[Отсчет].Период = Строка(Формат(СтрокаТЗ.ДатаНачалаСоревнования,"ДФ=dd.MM.yyyy"));
		Иначе
			ТЗ[Отсчет].Период = Строка(Формат(СтрокаТЗ.ДатаНачалаСоревнования,"ДФ=dd.MM.yyyy")) + "-" + Строка(Формат(СтрокаТЗ.ДатаОкончанияСоревнования,"ДФ=dd.MM.yyyy"));
		КонецЕсли;	
		Отсчет = Отсчет + 1;
		Значение = СтрокаТЗ.Место;
		Результат = ЗначениеГрафика(Значение);
		Точка = ТекущийСпортсменГрафик.УстановитьТочку(Формат(СтрокаТЗ.Дата, "ДФ=dd.MM.yyyy"));
		Если СтрокаТЗ.Родитель = Справочники.РанжированиеСоревнований.Всероссийские Тогда
			ТекущийСпортсменГрафик.УстановитьЗначение(Точка, ТекущийСпортсменГрафик.Серии[0], Результат, ,
				"" + СтрокаТЗ.Соревнование + Символы.ПС + "Место: " + СтрокаТЗ.Место);
		ИначеЕсли СтрокаТЗ.Родитель = Справочники.РанжированиеСоревнований.Межрегиональные Тогда
			ТекущийСпортсменГрафик.УстановитьЗначение(Точка, ТекущийСпортсменГрафик.Серии[1], Результат, ,
				"" + СтрокаТЗ.Соревнование + Символы.ПС + "Место: " + СтрокаТЗ.Место);
		ИначеЕсли СтрокаТЗ.Родитель = Справочники.РанжированиеСоревнований.Международные Тогда
			ТекущийСпортсменГрафик.УстановитьЗначение(Точка, ТекущийСпортсменГрафик.Серии[2], Результат, ,
				"" + СтрокаТЗ.Соревнование + Символы.ПС + "Место: " + СтрокаТЗ.Место);
		ИначеЕсли СтрокаТЗ.Родитель = Справочники.РанжированиеСоревнований.ФедеральныеИМуниципальные Тогда
			ТекущийСпортсменГрафик.УстановитьЗначение(Точка, ТекущийСпортсменГрафик.Серии[3], Результат, ,
				"" + СтрокаТЗ.Соревнование + Символы.ПС + "Место: " + СтрокаТЗ.Место);
		КонецЕсли
		
	КонецЦикла;
	Если Тз.Количество() > 0 Тогда
		ТекущийСпортсменГрафик.УстановитьТочку(" ");
	КонецЕсли;
	ТекущийСпортсменГрафик.Обновление = Истина;
	ТекущийСпортсменДинамикаУспеха.Загрузить(ТЗ);
	Элементы.ТекущийСпортсменГрафик.Видимость = ТЗ.Количество() > 0;
	Элементы.НадписьДинамикаУспехаРасшифровка.Видимость = ТекущийСпортсменДинамикаУспеха.Количество() > 0;
	
	
	
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ИтоговыеРезультатыСоревнования.", ".ИтоговыеРезультатыСоревнованиийОФПСдачаНормативов.");
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", "ИтоговыеРезультатыСоревнованияСрезПоследних.ТипСоревнования = ЗНАЧЕНИЕ(Перечисление.ТипыСдачиНормативов.Соревнование)");
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//ФлагОФП = Ложь;
	//Пока Выборка.Следующий() Цикл
	//	
	//	Точка = ТекущийСпортсменГрафикОФП.УстановитьТочку(Формат(Выборка.ДатаПроведения, "ДФ=dd.MM.yyyy"));
	//	ТекущийСпортсменГрафикОФП.УстановитьЗначение(Точка, ТекущийСпортсменГрафикОФП.Серии[0], Выборка.Место);
	//	ФлагОФП = Истина;
	//	
	//КонецЦикла;
	////Элементы.ТекущийСпортсменГрафикОФП.Видимость = ФлагОФП;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеГрафика(Значение)
	Если Значение = 1 Тогда
		Значение = 7;
	ИначеЕсли Значение = 2 Тогда
		Значение = 6;
	ИначеЕсли Значение = 3 Тогда
		Значение = 5;
	ИначеЕсли Значение = 4 Тогда
		Значение = 4;
	ИначеЕсли Значение >= 5 И Значение < 10 Тогда
		Значение = 3;	
	ИначеЕсли Значение >= 10 И Значение < 30 Тогда
		Значение = 2;	
	ИначеЕсли Значение >= 30 И Значение < 100 Тогда
		Значение = 1;
	ИначеЕсли Значение >= 100 Тогда
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции
// }Рарус dotere #22852 -Разделение соревнований по рангу 2021.12.13

&НаСервере
Процедура ПостроитьГрафикПоСпортсменуПоказатели()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГОД(ПоказателиФизическогоЗдоровьяСпортсмена.Период) КАК Год,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Быстрота КАК Быстрота,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Выносливость КАК Выносливость,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Сила КАК Сила,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Реакция КАК Реакция
	|ИЗ
	|	РегистрСведений.ПоказателиФизическогоЗдоровьяСпортсмена КАК ПоказателиФизическогоЗдоровьяСпортсмена
	|ГДЕ
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Спортсмен = &Спортсмен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Спортсмен", ТекущийСпортсмен);
	
	ТекущийСпортсменГрафикПоказатели.Точки.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Точка = ТекущийСпортсменГрафикПоказатели.УстановитьТочку(Формат(Выборка.Год, "ЧГ=0"));
		ТекущийСпортсменГрафикПоказатели.УстановитьЗначение(Точка, ТекущийСпортсменГрафикПоказатели.Серии[0], Выборка.Быстрота);	
		ТекущийСпортсменГрафикПоказатели.УстановитьЗначение(Точка, ТекущийСпортсменГрафикПоказатели.Серии[1], Выборка.Выносливость);	
		ТекущийСпортсменГрафикПоказатели.УстановитьЗначение(Точка, ТекущийСпортсменГрафикПоказатели.Серии[2], Выборка.Сила);	
		ТекущийСпортсменГрафикПоказатели.УстановитьЗначение(Точка, ТекущийСпортсменГрафикПоказатели.Серии[3], Выборка.Реакция);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСФППоСпортсмену()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГОД(ПоказателиФизическогоЗдоровьяСпортсмена.Период) КАК Год,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.ПоказательФизическогоРазвития КАК ПоказательФизическогоРазвития,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Рост КАК Рост,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Вес КАК Вес,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.ДатаМедОбследования КАК ДатаМедОбследования,
	|	ПоказателиФизическогоЗдоровьяСпортсмена.ЗаключениеВрача КАК ЗаключениеВрача
	|ИЗ
	|	РегистрСведений.ПоказателиФизическогоЗдоровьяСпортсмена КАК ПоказателиФизическогоЗдоровьяСпортсмена
	|ГДЕ
	|	ПоказателиФизическогоЗдоровьяСпортсмена.Спортсмен = &Спортсмен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Спортсмен", ТекущийСпортсмен);
	
	ТекущийСпортсменСФП.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуРождения()
	
	Возврат Формат(ТекущийСпортсмен.ФизическоеЛицо.ДатаРождения, "ДФ=dd.MM.yyyy");
	
КонецФункции

&НаСервере
Процедура ОбновитьФотографиюНаСервере()
	
	Если Не ТекущийСпортсмен.ФизическоеЛицо.Фото.Пустая() Тогда
		ТекущийСпортсменАдресФотографии = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийСпортсмен.ФизическоеЛицо.Фото.ТекущаяВерсия)), УникальныйИдентификатор);
	Иначе
		ТекущийСпортсменАдресФотографии = "";
	КонецЕсли;
	
	Элементы.ТекущийСпортсменАдресФотографии.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоСпортсмену()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МеждународныеВозрастныеГруппа.МеждународнаяВозрастнаяГруппа КАК Ссылка,
	|	МеждународныеВозрастныеГруппа.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.МеждународныеВозрастныеГруппы.СрезПоследних(, Спортсмен = &Спортсмен) КАК МеждународныеВозрастныеГруппа";
	Запрос.УстановитьПараметр("Спортсмен", ТекущийСпортсмен);
			
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменВозрастнаяГруппа = Выборка.Ссылка;
		ТекущийСпортсменВозрастнаяГруппаОписание = ТекущийСпортсменВозрастнаяГруппа;
		ТекущийСпортсменВозрастнаяГруппаРегистратор = Выборка.Регистратор;
	Иначе
		ТекущийСпортсменВозрастнаяГруппа = Справочники.МеждународныеВозрастныеГруппы.ПустаяСсылка();
		ТекущийСпортсменВозрастнаяГруппаОписание = "<...>";
		ТекущийСпортсменВозрастнаяГруппаРегистратор = Документы.УстановкаМеждународнойВозрастнойГруппы.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(, Спортсмен = &Спортсмен) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПрисвоения УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменРазряд = Выборка.Разряд;
		ТекущийСпортсменРазрядОписание = ТекущийСпортсменРазряд.ПолноеНаименование;
		ТекущийСпортсменРазрядРегистратор = Выборка.Регистратор;
	Иначе
		ТекущийСпортсменРазряд = Справочники.СпортивнаяКлассификация.ПустаяСсылка();
		ТекущийСпортсменРазрядОписание = "б/р";
		ТекущийСпортсменРазрядРегистратор = Документы.ПрисвоениеРазряда.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияДопусков.ДействуетДо КАК ДействуетДо,
	|	РегистрацияДопусков.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям.СрезПоследних(
	|			,
	|			Спортсмен = &Спортсмен
	|				И ВидДопуска = ЗНАЧЕНИЕ(Перечисление.ВидыДопусковКСпортивнойДеятельности.ДопускКТренировочномуПроцессу)) КАК РегистрацияДопусков";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменДопускТренировка = Выборка.Регистратор;
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		Если Выборка.ДействуетДо < ТекущаяДатаСеанса() Тогда
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
			ТекущийСпортсменДопускТренировкаОписание = "Просрочен (действовал до " + Формат(Выборка.ДействуетДо, "ДФ=dd.MM.yyyy") + ")";
		Иначе
			ТекущийСпортсменДопускТренировкаОписание = "Действует до " + Формат(Выборка.ДействуетДо, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	Иначе
		ТекущийСпортсменДопускТренировка = Документы.ДопускиУчастниковКСпортивнымСоревнованиям.ПустаяСсылка();	
		ТекущийСпортсменДопускТренировкаОписание = "<...>";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияДопусков.ДействуетДо КАК ДействуетДо,
	|	РегистрацияДопусков.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям.СрезПоследних(
	|			,
	|			Спортсмен = &Спортсмен
	|				И ВидДопуска = ЗНАЧЕНИЕ(Перечисление.ВидыДопусковКСпортивнойДеятельности.ДопускКСпортивнымСоревнованиям)) КАК РегистрацияДопусков";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменДопуск = Выборка.Регистратор;
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		Если Выборка.ДействуетДо < ТекущаяДатаСеанса() Тогда
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
			ТекущийСпортсменДопускОписание = "Просрочен (действовал до " + Формат(Выборка.ДействуетДо, "ДФ=dd.MM.yyyy") + ")";
		Иначе
			ТекущийСпортсменДопускОписание = "Действует до " + Формат(Выборка.ДействуетДо, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	Иначе
		ТекущийСпортсменДопуск = Документы.ДопускиУчастниковКСпортивнымСоревнованиям.ПустаяСсылка();	
		ТекущийСпортсменДопускОписание = "<...>";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияСтраховыхПолисов.ДатаОкончания КАК ДатаОкончания,
	|	РегистрацияСтраховыхПолисов.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.РегистрацияСтраховыхПолисовСпортсменов.СрезПоследних(, Спортсмен = &Спортсмен) КАК РегистрацияСтраховыхПолисов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменСтраховка = Выборка.Регистратор;
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		Если Выборка.ДатаОкончания < ТекущаяДатаСеанса() Тогда
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
			ТекущийСпортсменСтраховкаОписание = "Просрочен (действовал до " + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy") + ")";
		Иначе
			ТекущийСпортсменСтраховкаОписание = "Действует до " + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	Иначе
		ТекущийСпортсменСтраховка = "";
		ТекущийСпортсменСтраховкаОписание ="<...>";
	КонецЕсли;
	
	// {Рарус dotere #20994 -Учитывается когда был отчислен и поступил вновь 2021.10.01
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоставГруппыСрезПоследних.Группа КАК Группа
	|ИЗ
	|	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(, Спортсмен = &Спортсмен) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппы.СрезПоследних(, ) КАК СоставГруппыСрезПоследних
	|		ПО СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен = СоставГруппыСрезПоследних.Спортсмен
	|			И СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаНачалаОбучения <= СоставГруппыСрезПоследних.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставГруппыСрезПоследних.Период УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	// }Рарус dotere #20994 -Учитывается когда был отчислен и поступил вновь 2021.10.01
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменГруппа = Выборка.Группа;
	Иначе
		ТекущийСпортсменГруппа = Справочники.Группа.ПустаяСсылка();
	КонецЕсли;
	Если ТекущийСпортсменГруппа = Справочники.Группа.ПустаяСсылка() тогда
		ТекущийСпортсменГруппаОписание = "<...>";
	Иначе
		ТекущийСпортсменГруппаОписание = ТекущийСпортсменГруппа;
	КонецЕсли;
	// }Рарус dotere #22852 -Вид спорта от зачисления 2021.12.10

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен КАК Спортсмен,
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта КАК ВидСпорта
		|ИЗ
		|	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(, Спортсмен = &Спортсмен) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Период УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменВидСпорта = Выборка.ВидСпорта;
		ТекущийСпортсменВидСпортаОписание = Выборка.ВидСпорта;
	Иначе
		ТекущийСпортсменВидСпорта = Справочники.ВидыСпорта.ПустаяСсылка();
		ТекущийСпортсменВидСпортаОписание = "<...>";
	КонецЕсли;
	// {Рарус dotere #22852 -Вид спорта от зачисления 2021.12.10

	// {Рарус adilas #21342 -Тестирование релиза Альфа СПОРТ 1.0.0.4. Приказы о зачислении спортсменов на этап спортивной подготовки 2021.10.13
	// {Рарус dotere #20994 -Учитывается когда был отчислен и поступил вновь 2021.10.01
    Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен КАК Спортсмен,
		|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта КАК ВидСпорта
		|ПОМЕСТИТЬ ВТ_СоставУчащихся
		|ИЗ
		|	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(, Спортсмен = &Спортсмен) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер КАК Тренер,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап КАК Этап,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.СпортивнаяПрограмма КАК СпортивнаяПрограмма,
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ВТ_Этапы
		|ИЗ
		|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
		|			,
		|			(Спортсмен, ВидСпорта) В
		|				(ВЫБРАТЬ
		|					ВТ_СоставУчащихся.Спортсмен КАК Спортсмен,
		|					ВТ_СоставУчащихся.ВидСпорта КАК ВидСпорта
		|				ИЗ
		|					ВТ_СоставУчащихся КАК ВТ_СоставУчащихся)) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
		|ГДЕ
		|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыСпортивнойПодготовки.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВТ_Этапы.Тренер КАК Тренер,
		|	ВТ_Этапы.Этап КАК Этап,
		|	ВТ_Этапы.СпортивнаяПрограмма КАК СпортивнаяПрограмма
		|ИЗ
		|	ВТ_Этапы КАК ВТ_Этапы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Этапы.Период УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	// }Рарус dotere #20994 -Учитывается когда был отчислен и поступил вновь 2021.10.01
	// }Рарус adilas #21342 -Тестирование релиза Альфа СПОРТ 1.0.0.4. Приказы о зачислении спортсменов на этап спортивной подготовки 2021.10.13
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//ТекущийСпортсменВидСпорта = Выборка.ВидСпорта;
		//ТекущийСпортсменВидСпортаОписание = Выборка.ВидСпорта;
		ТекущийСпортсменТренер = Выборка.Тренер;
		ТекущийСпортсменТренерОписание = Выборка.Тренер;
        ТекущийСпортсменЭтап = Выборка.Этап;
		ТекущийСпортсменЭтапОписание = Выборка.Этап;
        ТекущийСпортсменСпортПрограмма = Выборка.СпортивнаяПрограмма;
		ТекущийСпортсменСпортПрограммаОписание = Выборка.СпортивнаяПрограмма;
	Иначе
		//ТекущийСпортсменВидСпорта = Справочники.ВидыСпорта.ПустаяСсылка();
		//ТекущийСпортсменВидСпортаОписание = "<...>";
		ТекущийСпортсменТренер = Справочники.Тренеры.ПустаяСсылка();
		ТекущийСпортсменТренерОписание = "<...>";
        ТекущийСпортсменЭтап = Справочники.ЭтапыСпортивнойПодготовки.ПустаяСсылка();
		ТекущийСпортсменЭтапОписание = "<...>";
        ТекущийСпортсменСпортПрограмма = Справочники.СпортивныеПрограммы.ПустаяСсылка();
		ТекущийСпортсменСпортПрограммаОписание = "<...>";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущийСпортсменСпортПрограммаОписание) Тогда 
		ТекущийСпортсменСпортПрограммаОписание = "<...>";
	КонецЕсли;

	Если ТекущийСпортсменТренер = Справочники.Тренеры.ПустаяСсылка() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаявкиНаПроведениеСоревнованияСрезПоследних.Тренер КАК Тренер
		|ИЗ
		|	РегистрСведений.ЗаявкиНаПроведениеСоревнования.СрезПоследних(, Спортсмен = &Спортсмен) КАК ЗаявкиНаПроведениеСоревнованияСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущийСпортсменТренер = Выборка.Тренер;
		Иначе
			ТекущийСпортсменТренер = Справочники.Тренеры.ПустаяСсылка();
		КонецЕсли;	
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗаявкиНаПроведениеСоревнованияСрезПоследних.Команда КАК Команда
	|ИЗ
	|	РегистрСведений.ЗаявкиНаПроведениеСоревнования.СрезПоследних(, Спортсмен = &Спортсмен) КАК ЗаявкиНаПроведениеСоревнованияСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийСпортсменКоманда = Выборка.Команда;
	Иначе
		ТекущийСпортсменКоманда = Справочники.Команды.ПустаяСсылка();
	КонецЕсли;
	Если ТекущийСпортсменКоманда = Справочники.Команды.ПустаяСсылка() тогда
		ТекущийСпортсменКомандаОписание = "<...>";
	Иначе
		ТекущийСпортсменКомандаОписание = ТекущийСпортсменКоманда;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьЦветГиперссылки()
	
	Возврат ЦветаСтиля.ЦветГиперссылки;
	
КонецФункции

&НаСервере
Функция ПолучитьЦветТекстаФормы()
	
	Возврат ЦветаСтиля.ЦветТекстаФормы;
	
КонецФункции

//Тренеры
&НаСервере
Функция ПолучитьДатуРожденияТренера()
	
	Возврат ТекущийТренер.ФизическоеЛицо.ДатаРождения;
	
КонецФункции

&НаСервере
Функция ПолучитьДатуСтажаТренера()
	
	Возврат ТекущийТренер.ПедагогическийСтажРаботыС;
	
КонецФункции

&НаСервере
Процедура ОбновитьФотографиюТренераНаСервере()
	
	Если Не ТекущийТренер.ФизическоеЛицо.Фото.Пустая() Тогда
		ТекущийТренерАдресФотографии = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийТренер.ФизическоеЛицо.Фото.ТекущаяВерсия)), УникальныйИдентификатор);

	Иначе
		ТекущийТренерАдресФотографии = "";
	КонецЕсли;
	
	Элементы.ТекущийТренерАдресФотографии.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоТренеру()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпортивныеЗванияТренеровСрезПоследних.Звание КАК Звание
	|ИЗ
	|	РегистрСведений.СпортивныеЗванияТренеров.СрезПоследних(, Тренер = &Тренер) КАК СпортивныеЗванияТренеровСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпортивныеЗванияТренеровСрезПоследних.ДатаПрисвоения УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьВидыСпортаПоТренеру()
	
	// {Рарус adilas #11631 -Страница тренера 2020.12.10
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен КАК Спортсмен,
	|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Организация КАК Организация,
	|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта КАК ВидСпорта,
	|	СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения КАК ДатаОкончанияОбучения
	|ПОМЕСТИТЬ ВТ_СоставУчащихся
	|ИЗ
	|	РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(, Спортсмен.СтатусСпортсмена <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпортсменов.СпортсменДругогоСпортивногоУчреждения)) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
	|ГДЕ
	|	(СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения > &Дата
	|			ИЛИ СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спортсмен,
	|	Организация,
	|	ВидСпорта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Организация КАК Организация,
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта КАК ВидСпорта,
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен
	|ПОМЕСТИТЬ ВТ_Этапы
	|ИЗ
	|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(
	|			,
	|			(Спортсмен, ВидСпорта) В
	|				(ВЫБРАТЬ
	|					ВТ_СоставУчащихся.Спортсмен КАК Спортсмен,
	|					ВТ_СоставУчащихся.ВидСпорта КАК ВидСпорта
	|				ИЗ
	|					ВТ_СоставУчащихся КАК ВТ_СоставУчащихся)) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
	|ГДЕ
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &Тренер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидСпорта,
	|	Спортсмен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоличествоВидовСпортаТренеровОстатки.ВидСпорта КАК ВидСпорта,
	|	""Введён вручную"" КАК ВведёнВручную,
	|	КоличествоВидовСпортаТренеровОстатки.ДатаВидаСпорта КАК ДатаВидаСпорта
	|ПОМЕСТИТЬ ВТ_Объединение
	|ИЗ
	|	РегистрНакопления.КоличествоВидовСпортаТренеров.Остатки(, Тренер = &Тренер) КАК КоличествоВидовСпортаТренеровОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КоличествоВидовСпортаТренеров КАК КоличествоВидовСпортаТренеров
	|		ПО КоличествоВидовСпортаТренеровОстатки.Организация = КоличествоВидовСпортаТренеров.Организация
	|			И КоличествоВидовСпортаТренеровОстатки.ВидСпорта = КоличествоВидовСпортаТренеров.ВидСпорта
	|			И КоличествоВидовСпортаТренеровОстатки.Тренер = КоличествоВидовСпортаТренеров.Тренер
	|			И КоличествоВидовСпортаТренеровОстатки.ДатаВидаСпорта = КоличествоВидовСпортаТренеров.ДатаВидаСпорта
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(КоличествоВидовСпортаТренеров.Регистратор) = ТИП(Документ.ВводВидаСпортаВручную)
	|	И КоличествоВидовСпортаТренеров.Регистратор.Проведен
	|	И КоличествоВидовСпортаТренеров.Регистратор.ПометкаУдаления = ЛОЖЬ
	|	И КоличествоВидовСпортаТренеров.Регистратор.Проведен
	|	И КоличествоВидовСпортаТренеров.Регистратор.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Этапы.ВидСпорта,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_Этапы КАК ВТ_Этапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Объединение.ВидСпорта КАК ВидСпортаСсылка
	|ИЗ
	|	ВТ_Объединение КАК ВТ_Объединение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидСпортаСсылка";
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("Тренер", ТекущийТренер);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТекущийТренерВидыСпорта.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("ВидСпортаСсылка"));
	
	// }Рарус adilas #11631 -Страница тренера 2020.12.10
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСпортОбъектыПоТренеру()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |   СпортивныеОбъекты.СпортивныйОбъект КАК СпортивныйОбъект
    |ИЗ
    |   РегистрСведений.СпортивныеОбъекты КАК СпортивныеОбъекты
    |ГДЕ
    |   СпортивныеОбъекты.Тренер = &Тренер
    |
    |УПОРЯДОЧИТЬ ПО
    |   СпортивныйОбъект";
	
	Запрос.УстановитьПараметр("Тренер", ТекущийТренер);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТекущийТренерСпортОбъекты.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("СпортивныйОбъект"));
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВидыСпорта()
	ПолучитьВидыСпортаПоТренеру();
	ЗаголовокГруппы = "<...>";
	Для Каждого элемент Из ТекущийТренерВидыСпорта Цикл 
		Если ЗаголовокГруппы = "<...>" тогда
			ЗаголовокГруппы = "";
		Иначе 
			ЗаголовокГруппы = ЗаголовокГруппы+", ";
		КонецЕсли;
		ЗаголовокГруппы = ЗаголовокГруппы+Строка(элемент);
	КонецЦикла;
	Элементы.ГруппаТренерВидыСпортаСписок.Заголовок = ЗаголовокГруппы;
КонецПроцедуры	

Процедура ОтобразитьСпортОбъекты()
    ПолучитьСпортОбъектыПоТренеру();
	ЗаголовокГруппы = "<...>";
	Для Каждого элемент Из ТекущийТренерСпортОбъекты Цикл 
		Если ЗаголовокГруппы = "<...>" тогда
			ЗаголовокГруппы = "";
		Иначе 
			ЗаголовокГруппы = ЗаголовокГруппы+", ";
		КонецЕсли;
		ЗаголовокГруппы = ЗаголовокГруппы+Строка(элемент);
	КонецЦикла;
	Элементы.ГруппаТренерСпортивныеОбъектыСписок.Заголовок = ЗаголовокГруппы;
КонецПроцедуры	

Процедура ОтобразитьЭтапыСП()

    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    Макет = ОбработкаОбъект.ПолучитьМакет("МакетТаблица");
    ОбластьКолонкаЗаголовок = Макет.ПолучитьОбласть("ТекДанныеЗаголовок|Колонка");
    ОбластьКолонкаЗначение = Макет.ПолучитьОбласть("ТекДанныеЗначение|Колонка");
    ОбластьОтступ = Макет.ПолучитьОбласть("ТекДанные|Отступ");
    ОбластьЗаголовкаСтроки = Макет.ПолучитьОбласть("ЗаголовокСтроки|КолонкаДляСтроки");
    ОбластьСтрока = Макет.ПолучитьОбласть("ТекДанныеСтроки|КолонкаДляСтроки");
    
    ТабДокЭтапыСпортивнойПодготовки.Очистить();
    
    ОбластьЗаголовкаСтроки.Параметры.Заголовок = "Виды спорта"; 
    ТабДокЭтапыСпортивнойПодготовки.Вывести(ОбластьЗаголовкаСтроки);


    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта КАК ВидСпорта,
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап КАК Этап,
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап.Последовательность КАК ЭтапПоследовательность
        |ПОМЕСТИТЬ ТЗЭтапы
        |ИЗ
        |	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(&ТекДата, ) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставУчащихсяСпортивногоУчреждения.СрезПоследних(&ТекДата, ) КАК СоставУчащихсяСпортивногоУчрежденияСрезПоследних
        |		ПО ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Организация = СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Организация
        |			И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта = СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ВидСпорта
        |			И ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен = СоставУчащихсяСпортивногоУчрежденияСрезПоследних.Спортсмен
        |ГДЕ
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер = &ТекущийТренер
        |	И (СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения = ДАТАВРЕМЯ(1, 1, 1)
        |			ИЛИ СоставУчащихсяСпортивногоУчрежденияСрезПоследних.ДатаОкончанияОбучения >= &ТекДата)
        |
        |СГРУППИРОВАТЬ ПО
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта,
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап,
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Спортсмен,
        |	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Этап.Последовательность
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ТЗЭтапы.ВидСпорта КАК ВидСпорта,
        |	ТЗЭтапы.Этап КАК Этап,
        |	ТЗЭтапы.Спортсмен КАК Спортсмен,
        |	ТЗЭтапы.ЭтапПоследовательность КАК ЭтапПоследовательность,
        |	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд
        |ИЗ
        |	ТЗЭтапы КАК ТЗЭтапы
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(
        |				&ТекДата,
        |				Спортсмен В
        |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
        |						ТЗЭтапы.Спортсмен КАК Спортсмен
        |					ИЗ
        |						ТЗЭтапы КАК ТЗЭтапы)) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
        |		ПО ТЗЭтапы.Спортсмен = ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен
        |			И ТЗЭтапы.ВидСпорта = ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта
        |
        |УПОРЯДОЧИТЬ ПО
        |	ЭтапПоследовательность,
        |	ВидСпорта,
        |	Спортсмен";
    // {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
    Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
    Запрос.УстановитьПараметр("ТекущийТренер", ТекущийТренер);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ТекущийТренерЭтапыСП.Загрузить(РезультатЗапроса.Выгрузить());
    
    ТЗЭтапы = ТекущийТренерЭтапыСП.Выгрузить();
    ТЗЭтапы.Свернуть("Этап, ЭтапПоследовательность");
    ТЗЭтапы.Сортировать("ЭтапПоследовательность");
    
    ТЗВидыСпорта = ТекущийТренерЭтапыСП.Выгрузить();
    ТЗВидыСпорта.Свернуть("ВидСпорта");
    ТЗВидыСпорта.Сортировать("ВидСпорта");
    
    Для каждого СтрокаЭтап Из ТЗЭтапы Цикл
        
        ТекЭтап = СтрокаЭтап.Этап;
        ОбластьКолонкаЗаголовок.Параметры.Заголовок = ТекЭтап;
        ТабДокЭтапыСпортивнойПодготовки.Присоединить(ОбластьКолонкаЗаголовок);
        
    КонецЦикла; 
    
    Для каждого СтрокаВидСпорта Из ТЗВидыСпорта Цикл
        
        ТекВидСпорта = СтрокаВидСпорта.Видспорта;
        ОбластьСтрока.Параметры.Значение = ТекВидСпорта;
        ТабДокЭтапыСпортивнойПодготовки.Вывести(ОбластьСтрока);
        
        Для каждого СтрокаЭтап Из ТЗЭтапы Цикл
            
            ТекЭтап = СтрокаЭтап.Этап;
            ОтборСтрок = Новый Структура("Этап, ВидСпорта",ТекЭтап,ТекВидСпорта);
          	НайденоСтрок = ТекущийТренерЭтапыСП.НайтиСтроки(ОтборСтрок);
            
            ОбластьКолонкаЗначение.Параметры.Значение = НайденоСтрок.Количество();
            ОбластьКолонкаЗначение.Параметры.Заголовок = Новый Структура("ТекЭтап, ТекВидСпорта", ТекЭтап, ТекВидСпорта);
            ТабДокЭтапыСпортивнойПодготовки.Присоединить(ОбластьКолонкаЗначение);
            
          КонецЦикла; 
    
    КонецЦикла; 
        
КонецПроцедуры

//ЭтапыСП
//&НаСервере
//Процедура СписокГруппыПриАктивизацииСтрокиНаСервере()
//	
//    УдалитьГруппыГруппы();
//	ПолучитьДанныеГруппы();
//	
//	Ширина1 = 20;
//	Ширина2 = 5;
//	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
//	НовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
//	НовыйШрифт2 = ШрифтыСтиля.ОбычныйШрифт16;
//    // }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
//    ТекущийЭтапОписание = ТекущийЭтап.Ссылка;
//    
//    Для Сч = 1 По ТекущаяГруппаТренеры.Количество() Цикл
//		Если НЕ ТекущаяГруппаТренеры[Сч - 1].Тренер.Пустая() Тогда
//			ГруппаТренер = ТекущаяГруппаТренеры[Сч - 1].Тренер.ФизическоеЛицо;
//			
//			ЭлементСсылка = Элементы.Добавить("ГруппаТренер" + Сч, Тип("ДекорацияФормы"), Элементы.ГруппаЭтапыТренеры);
//			ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
//			ЭлементСсылка.Заголовок = "" + ГруппаТренер.Фамилия + " " + Лев(ГруппаТренер.Имя, 1) + "." + Лев(ГруппаТренер.Отчество, 1) + ?(Сч = ТекущаяГруппаТренеры.Количество(), ".", ".,");
//			ЭлементСсылка.Шрифт = НовыйШрифт2;
//			ЭлементСсылка.Гиперссылка = Истина;
//			ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_НажатиеГруппаТренеры");
//		КонецЕсли;	
//    КонецЦикла; 
//    
//	Для Сч = 1 По ТекущаяГруппаКоманды.Количество() Цикл
//		Если НЕ ТекущаяГруппаКоманды[Сч - 1].Команда.Пустая() Тогда
//			ЭлементСсылка = Элементы.Добавить("ГруппаКоманда" + Сч, Тип("ДекорацияФормы"), Элементы.ГруппаЭтапКоличествоСпортсменов);
//			ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
//			ЭлементСсылка.Заголовок = "" + ТекущаяГруппаКоманды[Сч - 1].Команда + ?(Сч = ТекущаяГруппаКоманды.Количество(), "", ",");
//			ЭлементСсылка.Шрифт = НовыйШрифт;
//			ЭлементСсылка.Гиперссылка = Истина;
//			ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_НажатиеГруппаКоманда");	
//		КонецЕсли;	
//	КонецЦикла;	
//	
//    Элементы.ГруппаУчастники.Заголовок = "" + ТекущаяГруппаУчастники.Количество() + " " + СклонениеПредставленийОбъектов.ПросклонятьПредставление("спортсмены", 2);
//	
//    Элементы.ГруппаСоставИмеютДопуски.Заголовок = "" + ТекущаяГруппаУчастникиЕстьДопуск.Количество() + ",";

//    Элементы.ГруппаСоставНеИмеютДопуски.Заголовок = "" + ТекущаяГруппаУчастникиНетДопуска.Количество();
//    
//    Элементы.ГруппаСоставАктуальныеСтраховки.Заголовок = "" + ТекущаяГруппаУчастникиЕстьСтраховка.Количество() + ",";

//    Элементы.ГруппаСоставНеИмеютАктуальныеСтраховки.Заголовок = "" + ТекущаяГруппаУчастникиНетСтраховки.Количество();
//        
//    Элементы.ГруппаСоставМужчины.Заголовок = "" + ТекущаяГруппаУчастникиМужчины.Количество();
//    
//    Элементы.ГруппаСоставЖенщины.Заголовок = "" + ТекущаяГруппаУчастникиЖенщины.Количество();
//    
//    ВсегоВариантовЛет = ТекущаяГруппаГодыРождения.Количество();
//    
//    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
//    Макет = ОбработкаОбъект.ПолучитьМакет("МакетТаблица");
//    ОбластьКолонка = Макет.ПолучитьОбласть("ТекДанные|Колонка");
//    ОбластьОтступ = Макет.ПолучитьОбласть("ТекДанные|Отступ");
//    СтруктураКолонки = Новый Структура("Заголовок,Значение");
//    
//    ТабДокГодыРождения.Очистить();
//    ТабДокГодыРождения.Вывести(ОбластьОтступ);
//    
//    Для Сч = 1 По ВсегоВариантовЛет Цикл
//        
//        СтруктураКолонки.Заголовок = ТекущаяГруппаГодыРождения[Сч - 1].Значение;
//        
//        МассивСтрок = ТекущаяГруппаУчастники.НайтиСтроки(Новый Структура("ГодРождения", СтруктураКолонки.Заголовок));
//        
//        СтруктураКолонки.Значение = МассивСтрок.Количество();
//        
//        ОбластьКолонка.Параметры.Заполнить(СтруктураКолонки);
//        
//        ТабДокГодыРождения.Присоединить(ОбластьКолонка);
//        
//    КонецЦикла;
//    
//    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
//    Макет = ОбработкаОбъект.ПолучитьМакет("МакетТаблица");
//    ОбластьКолонка = Макет.ПолучитьОбласть("ТекДанные|Колонка");
//    ОбластьОтступ = Макет.ПолучитьОбласть("ТекДанные|Отступ");
//    СтруктураКолонки = Новый Структура("Заголовок,Значение");
//        
//    КоличествоУчастниковСРазрядами = 0;
//    
//    ВсегоВариантовРазрядов = СпортивнаяКлассификация.Количество();
//    
//    
//    Разряды.Очистить();
//    ТабДокРазряды.Вывести(ОбластьОтступ);
//    
//    Для Сч = 1 По ВсегоВариантовРазрядов Цикл
//        
//        СтруктураКолонки.Заголовок = СпортивнаяКлассификация[Сч - 1].Значение;
//        
//        МассивСтрок = ТекущаяГруппаУчастники.НайтиСтроки(Новый Структура("Разряд", СтруктураКолонки.Заголовок));
//        
//        СтруктураКолонки.Значение = МассивСтрок.Количество();
//        
//        КоличествоУчастниковСРазрядами = КоличествоУчастниковСРазрядами + СтруктураКолонки.Значение;
//        
//        ОбластьКолонка.Параметры.Заполнить(СтруктураКолонки);
//        
//        ТабДокРазряды.Присоединить(ОбластьКолонка);
//        
//    КонецЦикла;
//    
//    СтруктураКолонки.Заголовок = "б/р";
//    СтруктураКолонки.Значение = ТекущаяГруппаУчастники.Количество() - КоличествоУчастниковСРазрядами;
//    ОбластьКолонка.Параметры.Заполнить(СтруктураКолонки);
//    ТабДокРазряды.Присоединить(ОбластьКолонка);

//	Если НЕ ТекущаяГруппаДокументФормирования.Пустая() Тогда
//		СведенияТекст = СтроковыеФункции.ФорматированнаяСтрока(
//				НСтр("ru = '<a href=""%1"">%2</a>, действует до %3'"), ПолучитьНавигационнуюСсылку(ТекущаяГруппаДокументФормирования),
//				Формат(ТекущаяГруппаДокументФормирования.Дата, "ДФ=dd.MM.yyyy"), Формат(ТекущаяЭтапУчебныйГод.ДатаОкончания, "ДФ=dd.MM.yyyy"));
//	Иначе
//		СведенияТекст = "Группа не сформирована!"
//	КонецЕсли;	
//    
//	Элементы.НадписьГруппаДатаСоздания.Заголовок = СведенияТекст;

//    Элементы.ГруппаУчебныйГод.Заголовок = ?(ЗначениеЗаполнено(ТекущаяЭтапУчебныйГод), Строка(Формат(ТекущаяЭтапУчебныйГод.ДатаНачала, "ДФ=dd.MM.yyyy"))+"-"+Строка(Формат(ТекущаяЭтапУчебныйГод.ДатаОкончания, "ДФ=dd.MM.yyyy"))+?(ТекущийУчебныйГод = ТекущаяЭтапУчебныйГод, " (Текущий)", ""), "<...>");
//    
//КонецПроцедуры

&НаСервере
Процедура УдалитьГруппыГруппы()
	
    //ЭлементНаУдаление = Элементы.Найти("ГруппаГруппаНаименование");
    //Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //	Элементы.Удалить(ЭлементНаУдаление);
    //КонецЕсли;
    //
    //ЭлементНаУдаление = Элементы.Найти("ГруппаГруппаТренеры");
    //Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //	Элементы.Удалить(ЭлементНаУдаление);
    //КонецЕсли;
    //
    //ЭлементНаУдаление = Элементы.Найти("ГруппаГруппаКоманда");
    //Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //	Элементы.Удалить(ЭлементНаУдаление);
    //КонецЕсли;
    //
    //ЭлементНаУдаление = Элементы.Найти("ГруппаГруппаСостав");
    //Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //	Элементы.Удалить(ЭлементНаУдаление);
    //КонецЕсли;
    //
    //ЭлементНаУдаление = Элементы.Найти("ГруппаГруппаДатаСоздания");
    //Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //	Элементы.Удалить(ЭлементНаУдаление);
    //КонецЕсли;
    //	
    //ЭлементНаУдаление = Элементы.Найти("ГруппаГруппаУчебныйГод");
    //Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //	Элементы.Удалить(ЭлементНаУдаление);
    //КонецЕсли;
    //
    //Для Сч = 1 По 7 Цикл
    //	ЭлементНаУдаление = Элементы.Найти("ГруппаГруппа" + Сч);
    //	Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //		Элементы.Удалить(ЭлементНаУдаление);
    //	КонецЕсли;
    //КонецЦикла;
    //
    //ЭлементНаУдаление = Элементы.Найти("ГруппаГруппа5_1");
    //	Если НЕ ЭлементНаУдаление = Неопределено Тогда
    //		Элементы.Удалить(ЭлементНаУдаление);
    //	КонецЕсли;

    Для Сч = 1 По ТекущаяГруппаТренеры.Количество() Цикл
    	ЭлементНаУдаление = Элементы.Найти("ГруппаТренер" + Сч);
    	Если НЕ ЭлементНаУдаление = Неопределено Тогда
    		Элементы.Удалить(ЭлементНаУдаление);
    	КонецЕсли;
    КонецЦикла;
    
    Для Сч = 1 По ТекущаяГруппаКоманды.Количество() Цикл
    	ЭлементНаУдаление = Элементы.Найти("ГруппаКоманда" + Сч);
    	Если НЕ ЭлементНаУдаление = Неопределено Тогда
    		Элементы.Удалить(ЭлементНаУдаление);
    	КонецЕсли;
    КонецЦикла;


    
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьСтраницуГруппы()
	
	ТекущийУчебныйГодСтруктура = ПолучитьТекущийУчебныйГод();
	
	Если ТекущийУчебныйГодСтруктура = Неопределено Тогда
		ТекущийУчебныйГод = ПредопределенноеЗначение("Справочник.УчебныйГод.ПустаяСсылка");
		Возврат;
	Иначе
		ТекущийУчебныйГод = ТекущийУчебныйГодСтруктура.ТекущийУчебныйГод;
	КонецЕсли;
	
	УчебныйГодДокумент = ТекущийУчебныйГодСтруктура.ТекущийУчебныйГодДокумент;
	ОбновитьСписокЭтапы();
	
	ОбновитьСтраницуГруппыНаСервере(ТекущийУчебныйГодСтруктура.ТекущийУчебныйГодОписание);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСтраницуГруппыНаСервере(ТекущийУчебныйГодОписание)
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	НовыйШрифт = ШрифтыСтиля.ОбычныйШрифт13;
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23 
	ЭлементСсылка = Элементы.ДекорацияСтрокаЧасть2;
	ЭлементСсылка.Заголовок = ?(ТекущийУчебныйГод.Пустая(), "<нет>", Формат(ПолучитьНачалоУчебногоГода(ТекущийУчебныйГод),"ДФ=dd.MM.yyyy")+"-"+Формат(ПолучитьКонецУчебногоГода(ТекущийУчебныйГод),"ДФ=dd.MM.yyyy")); 
	
	ЭлементСсылка = Элементы.ДекорацияСтрокаЧасть4;
	ЭлементСсылка.Заголовок = "" + ПолучитьКоличествоСпортсменовУчебногоГода();
	
	ЭлементСсылка = Элементы.ДекорацияСтрокаЧасть5;
	ЭлементСсылка.Заголовок = СклонениеПредставленийОбъектов.ПросклонятьПредставление("спортсмены", 2);
		
	ЭлементСсылка = Элементы.ДекорацияСтрокаЧасть7;
	ЭлементСсылка.Заголовок = "" + ПолучитьКоличествоТренеровУчебногоГода();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаСоставУчебногоГодаСпортсмены()
	// {Рарус ivaart IN-17956 Уточнение отбора для записей. Добавление условия "проведён = истина" 2021.08.19
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗачислениеСпортсменовНаЭтапСпортсмены.Спортсмен.Ссылка КАК Спортсмен,
	|	ЗачислениеСпортсменовНаЭтапСпортсмены.Спортсмен.ФизическоеЛицо.ГодРождения КАК СпортсменФизическоеЛицоГодРождения
	|ИЗ
	|	Документ.ЗачислениеСпортсменовНаЭтап.Спортсмены КАК ЗачислениеСпортсменовНаЭтапСпортсмены
	|ГДЕ
	|	ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка.ДатаЗачисления МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
	|	И ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗачислениеСпортсменовНаЭтапСпортсмены.Спортсмен.Ссылка";
	
	Возврат ТекстЗапроса;
	// {Рарус ivaart IN-17956 Уточнение отбора для записей. Добавление условия "проведён = истина" 2021.08.19	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСоставУчебногоГодаТренеры()
	// {Рарус ivaart IN-17956 Уточнение отбора для записей. Изменение запроса 2021.08.19
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка.Тренер КАК Тренер
	|ИЗ
	|	Документ.ЗачислениеСпортсменовНаЭтап.Спортсмены КАК ЗачислениеСпортсменовНаЭтапСпортсмены
	|ГДЕ
	|	ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка.ДатаЗачисления МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
	|	И ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗачислениеСпортсменовНаЭтапСпортсмены.Ссылка.Тренер";
	Возврат ТекстЗапроса;
	// {Рарус ivaart IN-17956 Уточнение отбора для записей. Изменение запроса 2021.08.19	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСоставУчебногоГодаЭтапы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗачислениеСпортсменовНаЭтап.Тренер КАК Тренер
	|ИЗ
	|	Документ.ЗачислениеСпортсменовНаЭтап КАК ЗачислениеСпортсменовНаЭтап
	|ГДЕ
	|	ЗачислениеСпортсменовНаЭтап.ДатаЗачисления МЕЖДУ &НачалоУчебногоГода И &КонецУчебногоГода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗачислениеСпортсменовНаЭтап.Тренер";
	
	Возврат ТекстЗапроса;
		
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСоставГрупп()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Организация КАК Организация,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта КАК ВидСпорта,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
	|	МАКСИМУМ(ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПрисвоения) КАК ДатаПрисвоения
	|ПОМЕСТИТЬ ВТ_Разряды
	|ИЗ
	|	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(&Дата, ) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Организация,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Организация КАК Организация,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта КАК ВидСпорта,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен КАК Спортсмен,
	|	ПодтвержденныеРазрядыСпортсменовСрезПоследних.Разряд КАК Разряд
	|ПОМЕСТИТЬ ВТ_РазрядыАктуальные
	|ИЗ
	|	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(&Дата, ) КАК ПодтвержденныеРазрядыСпортсменовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Разряды КАК ВТ_Разряды
	|		ПО ПодтвержденныеРазрядыСпортсменовСрезПоследних.Организация = ВТ_Разряды.Организация
	|			И ПодтвержденныеРазрядыСпортсменовСрезПоследних.ВидСпорта = ВТ_Разряды.ВидСпорта
	|			И ПодтвержденныеРазрядыСпортсменовСрезПоследних.Спортсмен = ВТ_Разряды.Спортсмен
	|			И ПодтвержденныеРазрядыСпортсменовСрезПоследних.ДатаПрисвоения = ВТ_Разряды.ДатаПрисвоения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СоставГруппы.Регистратор ССЫЛКА Документ.ФормированиеГруппы
	|			ТОГДА СоставГруппы.Регистратор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументФормирования,
	|	СоставГруппы.Спортсмен КАК Спортсмен,
	|	СоставГруппы.ТренерСборной КАК Тренер,
	|	Заявки.Команда КАК Команда,
	|	ЕСТЬNULL(РегистрацияДопусков.Период, ДАТАВРЕМЯ(1, 1, 1)) <= &Дата
	|		И ЕСТЬNULL(РегистрацияДопусков.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1)) > &Дата КАК ЕстьДопуск,
	|	ЕСТЬNULL(РегистрацияСтраховыхПолисов.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) <= &Дата
	|		И ЕСТЬNULL(РегистрацияСтраховыхПолисов.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) > &Дата КАК ЕстьСтраховка,
	|	СоставГруппы.Спортсмен.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской) КАК ПолМужской,
	|	СоставГруппы.Спортсмен.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский) КАК ПолЖенский,
	|	ГОД(СоставГруппы.Спортсмен.ФизическоеЛицо.ДатаРождения) КАК ГодРождения,
	|	ВТ_РазрядыАктуальные.Разряд КАК Разряд
	|ИЗ
	|	РегистрСведений.СоставГруппы.СрезПоследних(
	|			&Дата,
	|			УчебныйГод = &УчебныйГод
	|				И Группа = &Группа
	|				И ТренерСборной = &Тренер) КАК СоставГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявкиНаПроведениеСоревнования.СрезПоследних(&Дата, УчебныйГод = &УчебныйГод) КАК Заявки
	|		ПО СоставГруппы.УчебныйГод = Заявки.УчебныйГод
	|			И СоставГруппы.Организация = Заявки.Организация
	|			И СоставГруппы.ВидСпорта = Заявки.ВидСпорта
	|			И СоставГруппы.Спортсмен = Заявки.Спортсмен
	|			И СоставГруппы.ТренерСборной = Заявки.Тренер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям.СрезПоследних(&Дата, ) КАК РегистрацияДопусков
	|		ПО СоставГруппы.Организация = РегистрацияДопусков.Организация
	|			И СоставГруппы.ВидСпорта = РегистрацияДопусков.ВидСпорта
	|			И СоставГруппы.Спортсмен = РегистрацияДопусков.Спортсмен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияСтраховыхПолисовСпортсменов.СрезПоследних(&Дата, ) КАК РегистрацияСтраховыхПолисов
	|		ПО СоставГруппы.Организация = РегистрацияСтраховыхПолисов.Организация
	|			И СоставГруппы.ВидСпорта = РегистрацияСтраховыхПолисов.ВидСпорта
	|			И СоставГруппы.Спортсмен = РегистрацияСтраховыхПолисов.Спортсмен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазрядыАктуальные КАК ВТ_РазрядыАктуальные
	|		ПО СоставГруппы.Организация = ВТ_РазрядыАктуальные.Организация
	|			И СоставГруппы.ВидСпорта = ВТ_РазрядыАктуальные.ВидСпорта
	|			И СоставГруппы.Спортсмен = ВТ_РазрядыАктуальные.Спортсмен
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СоставГруппы.ДатаИсключенияИзГруппы = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоставГруппы.ДатаИсключенияИзГруппы > &Дата
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спортсмен
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
		
КонецФункции	

&НаСервере
Функция ПолучитьТекущийУчебныйГод()
	
	ДокументУчебныйГод = УчетСпортсменовСервер.ПолучитьДокументТекущегоУчебногоГода();
	
	Если НЕ ДокументУчебныйГод.Пустая() Тогда
		Возврат Новый Структура("ТекущийУчебныйГод, ТекущийУчебныйГодДокумент, ТекущийУчебныйГодОписание", ДокументУчебныйГод.УчебныйГод, ДокументУчебныйГод,
			"" + Формат(Год(ДокументУчебныйГод.УчебныйГод.ДатаНачала), "ЧГ=0") + "-" + Формат(Год(ДокументУчебныйГод.УчебныйГод.ДатаОкончания), "ЧГ=0"));	
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьУчастниковУчебногоГодаСпортсмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСоставУчебногоГодаСпортсмены();
	
	Запрос.УстановитьПараметр("НачалоУчебногоГода", ПолучитьНачалоУчебногоГода(ТекущийУчебныйГод));
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("КонецУчебногоГода", ПолучитьКонецУчебногоГода(ТекущийУчебныйГод));
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	СписокСпортсмменовЭтапыСП.Очистить();
	СписокСпортсмменовЭтапыСП.ЗагрузитьЗначения(ТЗРезультат.ВыгрузитьКолонку("Спортсмен"));
	
	Возврат ТЗРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьУчастниковУчебногоГодаТренеры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСоставУчебногоГодаТренеры();
	// {Рарус ivaart IN-17956 Уточнение отбора для записей. Вместо отбору "равно" по учебному году - диапазон дат 2021.08.18
	//Запрос.УстановитьПараметр("УчебныйГод",	ТекущийУчебныйГод);
	Запрос.УстановитьПараметр("НачалоУчебногоГода",	ПолучитьНачалоУчебногоГода(ТекущийУчебныйГод));
	Запрос.УстановитьПараметр("КонецУчебногоГода",	ПолучитьКонецУчебногоГода(ТекущийУчебныйГод));
	// }Рарус ivaart IN-17956 Уточнение отбора для записей. Вместо тождеству учебных годов - диапазон дат 2021.08.18
	
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьУчастниковУчебногоГодаЭтапы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСоставУчебногоГодаЭтапы();
	
	Запрос.УстановитьПараметр("НачалоУчебногоГода",	ПолучитьНачалоУчебногоГода(ТекущийУчебныйГод));
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("КонецУчебногоГода", ПолучитьКонецУчебногоГода(ТекущийУчебныйГод));
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоСпортсменовУчебногоГода()
	
	ТЗРезультат = ПолучитьУчастниковУчебногоГодаСпортсмены();
	
	Возврат ТЗРезультат.Количество();
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоТренеровУчебногоГода()
	
	ТЗРезультат = ПолучитьУчастниковУчебногоГодаТренеры();
	ТЗРезультат.Свернуть("Тренер");
	ТЗРезультат.Сортировать("Тренер");
	
	ТекущийУчебныйГодТренеры.Загрузить(ТЗРезультат);
	
	Возврат ТЗРезультат.Количество();
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоГруппУчебногоГода()
	
	ТЗРезультат = ПолучитьУчастниковУчебногоГодаЭтапы();
	
	Возврат ТЗРезультат.Количество();
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеГруппы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСоставГрупп();
	
	Запрос.УстановитьПараметр("УчебныйГод",	ТекущийЭтапУчебныйГод);
	Запрос.УстановитьПараметр("Группа",	ТекущийЭтап);
	Запрос.УстановитьПараметр("Тренер",	ТекущийЭтапТренер);
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	ТЗУчастники = Запрос.Выполнить().Выгрузить();
		
	ТЗ = ТЗУчастники.Скопировать(, "ДокументФормирования");
	ТЗ.Свернуть("ДокументФормирования");
	ТЗ.Сортировать("ДокументФормирования");
	
	ТекущаяГруппаДокументФормирования = Документы.ФормированиеГруппы.ПустаяСсылка();
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если НЕ СтрокаТЗ.ДокументФормирования = Неопределено Тогда
			ТекущаяГруппаДокументФормирования = СтрокаТЗ.ДокументФормирования;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	ТЗ = ТЗУчастники.Скопировать(, "Тренер");
	ТЗ.Свернуть("Тренер");
	ТЗ.Сортировать("Тренер");
	ТекущаяГруппаТренеры.Загрузить(ТЗ);
	
	ТЗ = ТЗУчастники.Скопировать(, "Команда");
	ТЗ.Свернуть("Команда");
	ТЗ.Сортировать("Команда");
	ТекущаяГруппаКоманды.Загрузить(ТЗ);
	
	ТекущаяГруппаУчастникиЕстьДопуск.Очистить();
	ТекущаяГруппаУчастникиНетДопуска.Очистить();
	ТекущаяГруппаУчастникиЕстьСтраховка.Очистить();
	ТекущаяГруппаУчастникиНетСтраховки.Очистить();
	ТекущаяГруппаУчастникиМужчины.Очистить();
	ТекущаяГруппаУчастникиЖенщины.Очистить();
	ТекущийЭтапГодыРождения.Очистить();
	
	Для Каждого СтрокаТЗ Из ТЗУчастники Цикл
		
		Если СтрокаТЗ.ЕстьДопуск Тогда
			НоваяСтрока = ТекущаяГруппаУчастникиЕстьДопуск.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		Иначе
			НоваяСтрока = ТекущаяГруппаУчастникиНетДопуска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЕсли;
		
		Если СтрокаТЗ.ЕстьСтраховка Тогда
			НоваяСтрока = ТекущаяГруппаУчастникиЕстьСтраховка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		Иначе
			НоваяСтрока = ТекущаяГруппаУчастникиНетСтраховки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЕсли;
		
		Если СтрокаТЗ.ПолМужской Тогда
			НоваяСтрока = ТекущаяГруппаУчастникиМужчины.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЕсли;
		
		Если СтрокаТЗ.ПолЖенский Тогда
			НоваяСтрока = ТекущаяГруппаУчастникиЖенщины.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЕсли;
		
		Если ТекущийЭтапГодыРождения.НайтиПоЗначению(СтрокаТЗ.ГодРождения) = Неопределено Тогда
			ТекущийЭтапГодыРождения.Добавить(СтрокаТЗ.ГодРождения);
		КонецЕсли;	
		
	КонецЦикла;
	
	ТекущийЭтапГодыРождения.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	ТЗУчастники.Свернуть("Спортсмен, ГодРождения, Разряд");
	ТекущийЭтапУчастники.Загрузить(ТЗУчастники);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпортивнаяКлассификация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпортивнаяКлассификация КАК СпортивнаяКлассификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпортивнаяКлассификация.Порядок
	|АВТОУПОРЯДОЧИВАНИЕ";
	ТЗ = Запрос.Выполнить().Выгрузить();
	СпортивнаяКлассификация.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьСписокГруппПоОтбору()
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	Группы.Группа.Ссылка КАК Группа
	//|ИЗ
	//|	РегистрСведений.СоставГруппы.СрезПоследних КАК Группы
	//|ГДЕ
	//|	Группы.ТренерСборной = &Тренер";
	//// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	//Запрос.УстановитьПараметр("Дата",	ТекущаяДатаСеанса());
	//// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	//Запрос.УстановитьПараметр("Тренер", Тренер);
	//
	//ТЗРезультат = Запрос.Выполнить().Выгрузить();
	//ТЗРезультат.Свернуть("Группа");
	//
	//Возврат ТЗРезультат.ВыгрузитьКолонку("Группа");
	//
КонецФункции

&НаСервере
Функция ПолучитьСписокТренеровПоОтбору()
	// {Рарус dotere #21519 -Попадают виды спорта введенные вручную 2021.10.19
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер КАК Ссылка,
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта КАК ВидСпорта
	|ПОМЕСТИТЬ ВТ_ВидыСпорта
	|ИЗ
	|	РегистрСведений.ЭтапыСпортивнойПодготовкиСпортсменов.СрезПоследних(&Дата, ) КАК ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.Тренер,
	|	ЭтапыСпортивнойПодготовкиСпортсменовСрезПоследних.ВидСпорта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставГруппыСрезПоследних.ТренерСборной,
	|	СоставГруппыСрезПоследних.ВидСпорта
	|ИЗ
	|	РегистрСведений.СоставГруппы.СрезПоследних(&Дата, ) КАК СоставГруппыСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КоличествоВидовСпортаТренеровОстатки.Тренер,
	|	КоличествоВидовСпортаТренеровОстатки.ВидСпорта
	|ИЗ
	|	РегистрНакопления.КоличествоВидовСпортаТренеров.Остатки(&Дата, ) КАК КоличествоВидовСпортаТренеровОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ВидыСпорта.Ссылка КАК Ссылка,
	|	ВТ_ВидыСпорта.ВидСпорта КАК ВидСпорта
	|ИЗ
	|	ВТ_ВидыСпорта КАК ВТ_ВидыСпорта
	|ГДЕ
	|	ВТ_ВидыСпорта.ВидСпорта = &ВидСпорта";
	// }Рарус dotere #21519 -Попадают виды спорта введенные вручную 2021.10.19
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Запрос.УстановитьПараметр("ВидСпорта", ВидСпортаОтборТренеры);
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	ТЗРезультат.Свернуть("Ссылка");
	
	Возврат ТЗРезультат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокЭтапы()
    
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЭтапыСП, "Ссылка");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЭтапыСП, "ВидСпорта");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЭтапыСП, "Тренер");

		УчебныйГод = ПолучитьУчебныйГодПоДокументу(УчебныйГодДокумент);
		
		Если НЕ УчебныйГод.Пустая() Тогда
			СписокЭтапыСП.Параметры.УстановитьЗначениеПараметра("ПериодНачало", ПолучитьНачалоУчебногоГода(УчебныйГод));
			СписокЭтапыСП.Параметры.УстановитьЗначениеПараметра("ПериодКонец", ПолучитьКонецУчебногоГода(УчебныйГод));
		КонецЕсли;
		
		Если НЕ Тренер.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЭтапыСП, "Тренер", Тренер, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;	
        
        Если НЕ ВидСпортаОтборГруппы.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЭтапыСП, "ВидСпорта", ВидСпортаОтборГруппы, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;	
	
	Элементы.СписокЭтапыСП.ТекущаяСтрока = 1;
	Если Элементы.СписокЭтапыСП.ТекущиеДанные = Неопределено Тогда
		ТекущийЭтап = Неопределено;
		ТекущийЭтапТренер = Неопределено;
		УдалитьГруппыГруппы();
	Иначе
		//СписокГруппыПриАктивизацииСтроки(Элементы.СписокГруппы);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНачалоУчебногоГода(УчебныйГод)
	возврат УчебныйГод.ДатаНачала;
КонецФункции

&НаСервере
Функция ПолучитьКонецУчебногоГода(УчебныйГод)
	возврат УчебныйГод.ДатаОкончания;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокСпортсменов()
	
    ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокСпортсменыТаблица, "ВидСпорта");
    ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Тренер");
    ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокСпортсменыТаблица, "СтатусСпортсмена");
    ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Отчислен");
	
	// {Рарус adilas #23011 -Список спортсменов. Отбор. Все учащиеся. 2021.12.21
	СписокСпортсменыТаблица.Отбор.Элементы.Очистить();
	// }Рарус adilas #23011 -Список спортсменов. Отбор. Все учащиеся. 2021.12.21
	
    Если НЕ ВидСпортаОтборСпортсмены.Пустая() Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "ВидСпорта", ВидСпортаОтборСпортсмены, ВидСравненияКомпоновкиДанных.Равно);
    КонецЕсли;
    
    Если НЕ Тренер.Пустая() Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Тренер", Тренер, ВидСравненияКомпоновкиДанных.Равно);
    КонецЕсли;	
    
    // {Рарус adilas #23011 -Список спортсменов. Отбор. Все учащиеся. 2021.12.21
	Если НЕ СтатусСпортсменаОтбор = "Все" Тогда		
		
		Если СтатусСпортсменаОтбор = "Спортсмен" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "СтатусСпортсмена", ПредопределенноеЗначение("Перечисление.СтатусыСпортсменов.Спортсмен"), ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Отчислен", Ложь, ВидСравненияКомпоновкиДанных.Равно);
			
		ИначеЕсли СтатусСпортсменаОтбор = "Другого" Тогда  
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "СтатусСпортсмена", ПредопределенноеЗначение("Перечисление.СтатусыСпортсменов.СпортсменДругогоСпортивногоУчреждения"), ВидСравненияКомпоновкиДанных.Равно);	
			
		ИначеЕсли СтатусСпортсменаОтбор = "Занимающийся спортсмен" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "СтатусСпортсмена", ПредопределенноеЗначение("Перечисление.СтатусыСпортсменов.ЗанимающийсяСпортсмен"), ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Отчислен", Ложь, ВидСравненияКомпоновкиДанных.Равно);
			
		ИначеЕсли СтатусСпортсменаОтбор = "Занимающийся обучающийся" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "СтатусСпортсмена", ПредопределенноеЗначение("Перечисление.СтатусыСпортсменов.ЗанимающийсяОбучающийся"), ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Отчислен", Ложь, ВидСравненияКомпоновкиДанных.Равно);
			
		ИначеЕсли СтатусСпортсменаОтбор = "Отчислен" Тогда	
			
			// {Рарус dotere -Не попадают спортсмены со статусом из другого спорт учереждения. 2021.10.18
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "СтатусСпортсмена", ПредопределенноеЗначение("Перечисление.СтатусыСпортсменов.СпортсменДругогоСпортивногоУчреждения"), ВидСравненияКомпоновкиДанных.НеРавно);
			// }Рарус dotere -Не попадают спортсмены со статусом из другого спорт учереждения. 2021.10.18	
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Отчислен", Истина, ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Новый", Ложь, ВидСравненияКомпоновкиДанных.Равно);
			
		ИначеЕсли СтатусСпортсменаОтбор = "Новый" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСпортсменыТаблица, "Новый", Истина, ВидСравненияКомпоновкиДанных.Равно);	 
			
		КонецЕсли;
		
	КонецЕсли; 
    // }Рарус adilas #23011 -Список спортсменов. Отбор. Все учащиеся. 2021.12.21 
    
    Элементы.СписокСпортсмены.ТекущаяСтрока = 1;	
           	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСоревнований()
	
    ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокСоревнования, "ВидСпорта");
    
    Если НЕ ВидСпортаОтборСоревнования.Пустая() Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСоревнования, "ВидСпорта", ВидСпортаОтборСоревнования, ВидСравненияКомпоновкиДанных.Равно);
    КонецЕсли;
    
    Элементы.СписокСоревнования.ТекущаяСтрока = 1;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокТренеров(ИмяОтбора)
	
	Если ИмяОтбора = "ВидСпорта" Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокТренеры, "Ссылка");
		Если НЕ ВидСпортаОтборТренеры.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТренеры, "Ссылка", ПолучитьСписокТренеровПоОтбору(), ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
// {Рарус ivaart IN-19983 Отбор тренеров по статусу 2021.08.31
	// {Рарус dotere #23010 -Отбор переключателями 2021.12.23
	ИначеЕсли ИмяОтбора = "Статус" тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокТренеры, "Статус");
		Если ОтборТренерСтатус = "Работает" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТренеры, "Статус", ПолучитьСтатусТренера("Работает"), ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли ОтборТренерСтатус = "Уволен" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТренеры, "Статус", ПолучитьСтатусТренера("Уволен"), ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли ОтборТренерСтатус = "ТренерДругогоСпортУчереждения" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТренеры, "Статус", ПолучитьСтатусТренера("ТренерДругогоСпортУчереждения"), ВидСравненияКомпоновкиДанных.Равно);	
		КонецЕсли;
	// }Рарус dotere #23010 -Отбор переключателями 2021.12.23
// }Рарус ivaart IN-19983 Отбор тренеров по статусу 2021.08.31
	КонецЕсли;		
	
	Элементы.СписокТренеры.ТекущаяСтрока = 1;	
	
КонецПроцедуры
// {Рарус dotere #23010 -Отбор переключателями 2021.12.23
&НаСервере
Функция ПолучитьСтатусТренера(Выбор)
	Если Выбор = "ТренерДругогоСпортУчереждения" Тогда
		Возврат Перечисления.СтатусыТренеров.ТренерДругогоСпортивногоУчреждения;
	ИначеЕсли Выбор = "Работает" Тогда
		Возврат Перечисления.СтатусыТренеров.Работает
	ИначеЕсли Выбор = "Уволен" Тогда
		Возврат Перечисления.СтатусыТренеров.Уволен
	Иначе
		Возврат Перечисления.СтатусыТренеров.ПустаяСсылка()
	КонецЕсли
КонецФункции
// }Рарус dotere #23010 -Отбор переключателями 2021.12.23
&НаСервере
Функция ПолучитьУчебныйГодПоДокументу(УчебныйГодДокумент)
	
	Возврат УчебныйГодДокумент.УчебныйГод;
	
КонецФункции	

&НаКлиенте
Процедура ВидСпортаОтборСоревнованиеПриИзменении(Элемент)
    ОбновитьСписокСоревнований();
КонецПроцедуры

&НаКлиенте
Процедура ВидСпортаОтборГруппаПриИзменении(Элемент)
    ОбновитьСписокЭтапы();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельПриказы(Команда)
    
    ВидимостьПриказов = НЕ ВидимостьПриказов;
    ВидимостьОтчетов = Ложь;
    ВидимостьНастроек = Ложь;
    
    УстановитьВидимостьПанелей();
	УстановитьКартинкиПанелей();
	Если ВидимостьПриказов тогда
		Элементы.ОткрытьПанельПриказы.Картинка = БиблиотекаКартинок.КнопкаПриказыАктивная;
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельОтчеты(Команда)
    
    ВидимостьПриказов = Ложь;
    ВидимостьОтчетов = НЕ ВидимостьОтчетов;
    ВидимостьНастроек = Ложь;
    
    УстановитьВидимостьПанелей();
	УстановитьКартинкиПанелей();
	Если ВидимостьОтчетов тогда
		Элементы.ОткрытьПанельОтчеты.Картинка = БиблиотекаКартинок.КнопкаДокументыАктивная;
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельНастройки(Команда)
    
    ВидимостьПриказов = Ложь;
    ВидимостьОтчетов = Ложь;
    ВидимостьНастроек = НЕ ВидимостьНастроек;

    УстановитьВидимостьПанелей();
	УстановитьКартинкиПанелей();
	Если ВидимостьНастроек тогда
		Элементы.ОткрытьПанельНастройки.Картинка = БиблиотекаКартинок.КнопкаНастройкиАктивная;
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПанелей()
    
    Элементы.ГруппаВспомогательнаяПанель.Видимость = (ВидимостьНастроек ИЛИ ВидимостьОтчетов ИЛИ ВидимостьПриказов);
    
    Элементы.ГруппаПанельНастройки.Видимость = ВидимостьНастроек;
    Элементы.ГруппаПанельОтчеты.Видимость = ВидимостьОтчетов;
    Элементы.ГруппаПанельПриказы.Видимость = ВидимостьПриказов;
    
    Элементы.ДекорацияОтступМеждуПанелями.Видимость = Элементы.ГруппаВспомогательнаяПанель.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкиПанелей()
	Элементы.ОткрытьПанельПриказы.Картинка = БиблиотекаКартинок.КнопкаПриказы;
	Элементы.ОткрытьПанельОтчеты.Картинка = БиблиотекаКартинок.КнопкаДокументы;
	Элементы.ОткрытьПанельНастройки.Картинка = БиблиотекаКартинок.КнопкаНастройки;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЖурналПриказовОЗачисленииИОтчисленииНажатие(Элемент)
    ОткрытьФорму("ЖурналДокументов.СоставУчащихсяСпортивногоУчреждения.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПриказыОЗачисленииПереводахМеждуГруппамиНажатие(Элемент)
    ОткрытьФорму("ЖурналДокументов.СоставГрупп.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПриказовОЗачисленииПереводахНаЭтапыСпортивнойПодготовкиНажатие(Элемент)
    ОткрытьФорму("ЖурналДокументов.ЭтапыСпортивнойПодготовкиСпортсменов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСогласийНаОбработкуПДНажатие(Элемент)
    ОткрытьФорму("ЖурналДокументов.СогласияНаОбработкуПерсональныхДанных.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВедомостейКПННажатие(Элемент)
    ОткрытьФорму("Документ.РезультатыСдачиКонтрольноПереводныхНормативов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСоревнованийНажатие(Элемент)
    ОткрытьФорму("ЖурналДокументов.Соревнования.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналЗаявокНаСоревнованияНажатие(Элемент)
  ОткрытьФорму("ЖурналДокументов.СоставЗаявок.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПротоколовСоревнованийНажатие(Элемент)
    ОткрытьФорму("ЖурналДокументов.ПротоколыСоревнований.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПриказыОПрисвоенииРазрядовИЗванийСпортсменамНажатие(Элемент)
     ОткрытьФорму("ЖурналДокументов.РазрядыИЗванияСпортсменов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналДопусковНажатие(Элемент)
    ОткрытьФорму("ЖурналДокументов.ДопускиСпортсменов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСпортсменовПоЭтапамСпортивнойПодготовкиНажатие(Элемент)
    ОткрытьФорму("Отчет.КоличествоСпортсменовПоЭтапамСпортивнойПодготовки.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ВыступлениеНаСоревнованияхНажатие(Элемент)
    ОткрытьФорму("Отчет.ВыступлениеНаСоревнованиях.Форма");
КонецПроцедуры

&НаКлиенте
Процедура АктуальныйСписокСоревнованийНажатие(Элемент)
    ОткрытьФорму("Отчет.АктуальныйСписокСоревнований.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоКоличествуТренеровНажатие(Элемент)
    ОткрытьФорму("Отчет.ОтчетПоКоличествуТренеров.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СтатусСпортсменаОтборПриИзменении(Элемент)
    ОбновитьСписокСпортсменов();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// {Рарус adilas #23011 -Список спортсменов. Отбор. Все учащиеся. 2021.12.21
	СписокСпортсменыТаблица.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	СписокСпортсменыТаблица.Параметры.УстановитьЗначениеПараметра("Организация", ПараметрыСеанса.ТекущаяОрганизация);
	// }Рарус adilas #23011 -Список спортсменов. Отбор. Все учащиеся. 2021.12.21
    СтатусСпортсменаОтбор = "Все";
	
    ТекущийУчебныйГодСтруктура = ПолучитьТекущийУчебныйГод();
   // {Рарус kotana #IN-19037 -Ошибка при начале работы методиста для новой организации 02.08.2021
      
    Если ТекущийУчебныйГодСтруктура <> Неопределено Тогда
        
        УчебныйГод = ТекущийУчебныйГодСтруктура.ТекущийУчебныйГод;
        
        СписокЭтапыСП.Параметры.УстановитьЗначениеПараметра("ПериодНачало", ПолучитьНачалоУчебногоГода(УчебныйГод));
        СписокЭтапыСП.Параметры.УстановитьЗначениеПараметра("ПериодКонец", ПолучитьКонецУчебногоГода(УчебныйГод));	
        
    Иначе
        
        СписокЭтапыСП.Параметры.УстановитьЗначениеПараметра("ПериодНачало", НачалоГода(ТекущаяДатаСеанса()));
        СписокЭтапыСП.Параметры.УстановитьЗначениеПараметра("ПериодКонец", КонецГода(ТекущаяДатаСеанса()));
        
    КонецЕсли;
	// }Рарус kotana #IN-19037 Ошибка при начале работы методиста для новой организации 02.08.2021
	// {Рарус dotere #23010 -При первоначальном открытии показывает только тех тренеров которые работают 12.01.2022
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТренеры, "Статус", ПолучитьСтатусТренера("Работает"), ВидСравненияКомпоновкиДанных.Равно);
	// }Рарус dotere #23010 -При первоначальном открытии показывает только тех тренеров которые работают 12.01.2022
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТекТренерЭтапСПНажатие(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
    
	СтандартнаяОбработка = Ложь;	
    
    ЭтапСП = Расшифровка.ТекЭтап;
    ВидСпорта = Расшифровка.ТекВидСпорта;
        
	ПараметрыФормы = Новый Структура("Раздел, ЭтапСП, ТЗСпортсмены, ВидСпорта, Страница",
			"ТренерыСпортсменыЭтапа", ЭтапСП, ТекущийТренерЭтапыСП, ВидСпорта, "ТренерУчастники");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	

КонецПроцедуры

&НаКлиенте
Процедура СоревнованияНажатие(Элемент)
   ОткрытьФорму("Справочник.Соревнование.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КатегорииСпортивныхСудейНажатие(Элемент)
    ОткрытьФорму("Справочник.КатегорииСпортивныхСудей.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СпортивныеОбъектыНажатие(Элемент)
    ОткрытьФорму("Справочник.СпортивныеОбъекты.ФормаСписка");
КонецПроцедуры

// {Рарус adilas #15409 -Тестирование релиза Альфа Спорт 1.0.0.1. Учебный год  2021.04.08
//
&НаКлиенте
Процедура УчебныеГодаНажатие(Элемент)
	
	ОткрытьФорму("Справочник.УчебныйГод.Форма.ФормаСписка");
	
КонецПроцедуры
// }Рарус adilas #15409 -Тестирование релиза Альфа Спорт 1.0.0.1. Учебный год  2021.04.08

&НаКлиенте
Процедура СудейскиеКатегорииТренеровНажатие(Элемент)
    ОткрытьФорму("Справочник.КатегорииСпортивныхСудей.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПанельНастройкиРазрядыНажатие(Элемент)
    ОткрытьФорму("Справочник.СпортивнаяКлассификация.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДиспансеризацииНажатие(Элемент)
    ОткрытьФорму("Отчет.ОтчетПоДиспансеризации.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СписокСпортсменовПоЭтапамСпортивнойПодготовкиНажатие(Элемент)
    ОткрытьФорму("Отчет.СписокСпортсменовПоЭтапам.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СписокСпортсменовПоГруппаНажатие(Элемент)
    ОткрытьФорму("Отчет.СписокСпортсменовПоГруппам.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СпортсменыПоРайонамДиспансеризацииНажатие(Элемент)
    ОткрытьФорму("Отчет.ОтчетПоДиспансеризации.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СпортсменыПоСпортивнымОбъектамНажатие(Элемент)
    ОткрытьФорму("Отчет.ОтчетПоСпортсменамНаСпортивныхОбъектах.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ПриказыНаОтчислениеИзСпортивногоУчрежденияНажатие(Элемент)
    ОткрытьФорму("Документ.ИсключениеИзСпортивногоУчреждения.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПриказыНаЗачислениеНаЭтапСпортивнойПодготовкиНажатие(Элемент)
    ОткрытьФорму("Документ.ЗачислениеСпортсменовНаЭтап.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПриказыОЗакрепленииСпортсменовВГруппыНажатие(Элемент)
    ОткрытьФорму("Документ.ФормированиеГруппы.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПриказыОПереводахНаЭтапыСпортивнойПодготовкиНажатие(Элемент)
    ОткрытьФорму("Документ.ПереводСпортсменовНаЭтап.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПриказыОПереводахМеждуГруппамиНажатие(Элемент)
    ОткрытьФорму("Документ.ПереводСпортсменовМеждуГруппами.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура АнализСоревновательнойДеятельностиНажатие(Элемент)
	ОткрытьФорму("Отчет.ОтчетПоСоревновательнойДеятельности.Форма");
КонецПроцедуры


&НаКлиенте
Процедура ЖурналСтраховокНажатие(Элемент)
	 ОткрытьФорму("Документ.СтраховойПолисСпортсмена.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РейтингиНажатие(Элемент)
	ОткрытьФорму("Справочник.Рейтинги.ФормаСписка");
КонецПроцедуры

// {Рарус adilas #16383 -Организаторы соревнований 2021.05.25
&НаКлиенте
Процедура ОрганизаторыСоревнованийНажатие(Элемент)
	ОткрытьФорму("Справочник.ОрганизаторыСоревнований.ФормаСписка");	
КонецПроцедуры

// }Рарус adilas #16383 -Организаторы соревнований 2021.05.25

&НаКлиенте
Процедура СводнаяЧисленностьЗанимающихсяНажатие(Элемент)
	ОткрытьФорму("Отчет.ОтчетПоСводнойЧисленностиЗанимающихся.Форма");
КонецПроцедуры

// {Рарус adilas #00002 -Исправление по SonarQube 2021.04.08
//
&НаСервере
Процедура ЗаписьИсключенияДляЖурнала()
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение в процедуре Подключаемый_НажатиеГруппаРазряды()'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
КонецПроцедуры

&НаКлиенте
Процедура СпортивныеПрограммыНажатие(Элемент)
	
	ОткрытьФорму("Справочник.СпортивныеПрограммы.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТренерВидыСпорта1ЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,элементы.ТекущийТренерВидыСпортаТаблица.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТренерСпортивныеОбъектыТаблицаЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,элементы.ТекущийТренерСпортивныеОбъектыТаблица.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура Запрос(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТекущийУчебныйГодНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,ТекущийУчебныйГод);
КонецПроцедуры

&НаКлиенте
Процедура НадписьСоревнованиеМужчиныНажатие(Элемент)
	Подключаемый_НажатиеСоревнованиеМужчины(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НадписьСоревнованиеЖенщиныНажатие(Элемент)
	Подключаемый_НажатиеСоревнованиеЖенщины(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийГруппаСоревнованиеРейтингиТаблицаЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,элементы.ТекущийГруппаСоревнованиеРейтингиТаблица.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийГруппаСоревнованиеПротоколыТаблицаЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,элементы.ТекущийГруппаСоревнованиеПротоколыТаблица.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура СоревнованиеЗаявкиНажатие(Элемент)
	Подключаемый_НажатиеСоревнованиеЗаявка(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СборныеНажатие(Элемент)
	ОткрытьФорму("Справочник.Сборные.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСпортРазрядамНажатие(Элемент)
	ОткрытьФорму("Отчет.ДанныеПоСпортивнымРазрядамИЗваниям.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ВыездыСпотрсменовНаМероприятияНажатие(Элемент)
	ОткрытьФорму("Документ.ВыездСпортсменовНаМероприятие.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйКалендарныйПланНажатие(Элемент)
	ОткрытьФорму("Документ.ЕдиныйКалендарныйПлан.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.СведенияОбОтветственныхЛицах.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СпортивныеДисциплиныНажатие(Элемент)
    ОткрытьФорму("Справочник.СпортивныеДисциплины.ФормаСписка");
КонецПроцедуры


&НаКлиенте
Процедура НаградыТренеровНажатие(Элемент)
    ОткрытьФорму("Справочник.Награды.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЗаявленияНаПриемВСпортивноеУчреждениеНажатие(Элемент)
    ОткрытьФорму("Документ.ЗаявленияНаПриемВСпортивноеУчреждение.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЦелиПроведенияРейтингаНажатие(Элемент)
    ОткрытьФорму("Справочник.ЦелиПроведенияРейтинга.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РангиСборныхНажатие(Элемент)
    ОткрытьФорму("Справочник.РангиСборных.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтрокаЧасть2Нажатие(Элемент)
	ПоказатьЗначение(,ТекущийУчебныйГод);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтрокаЧасть4Нажатие(Элемент)
	// {Рарус ivaart IN-17956 Открытие отчёта с отбором 2021.08.18
	СтруктураОтбора = Новый Структура("Спортсмены", СписокСпортсмменовЭтапыСП);
	// }Рарус ivaart IN-17956 Открытие отчёта с отбором 2021.08.18
	ОткрытьФорму("Отчет.СписокСпортсменов.Форма.ФормаОтчета", СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтрокаЧасть6Нажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Раздел, ГруппаСсылка, ТЗТренеры, Страница", "ГруппыОбщее", Неопределено, ТекущийУчебныйГодТренеры, "ГруппаОбщееТренеры");
	ОткрытьФорму("Обработка.РабочийСтолМетодист.Форма.ФормаРасшифровка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КолСпортсменовНаЭтапеСпортсменАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСтроку(Элементы.КолСпортсменовНаЭтапе);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтроку(Таблица)
	ПоказатьЗначение(,Таблица.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СписокМужчиныНаЭтапеСсылкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСтроку(Элементы.СписокМужчиныНаЭтапе);
КонецПроцедуры

&НаКлиенте
Процедура СписокЖенщиныНаЭтапеДатаРожденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСтроку(Элементы.СписокЖенщиныНаЭтапе);
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиМестаЗанятийНажатие(Элемент) 
	ОткрытьФорму("Справочник.МестаЗанятий.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеНажатие(Элемент)
    ОткрытьФорму("ОбщаяФорма.ПланировщикРасписанияПоМестам");
КонецПроцедуры

&НаКлиенте
Процедура СпортсменыАдаптивныхВидовСпортаНажатие(Элемент)
    ОткрытьФорму("Отчет.СпортсменыАдаптивныхВидовСпорта.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура СпортивныеСборныеКомандыСпортсменовНажатие(Элемент)
	ОткрытьФорму("Отчет.СборныеКомандыСпортсменов.Форма");	
КонецПроцедуры

// {Рарус adilas #22474 -Отчет. Посещаемость занятий 2021.11.23
&НаКлиенте
Процедура ПосещаемостьЗанятийНажатие(Элемент)
	ОткрытьФорму("Отчет.ПосещаемостьЗанятий.Форма.");
КонецПроцедуры
// }Рарус adilas #22474 -Отчет. Посещаемость занятий 2021.11.23

&НаКлиенте
Процедура СписокПереводовНаЭтапЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПоказатьЗначение(,Элемент.Родитель.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура МестаЗанятийНажатие(Элемент)
	ОткрытьФорму("Справочник.МестаЗанятий.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РазрядыИЗванияСпортсменаНажатие(Элемент)
	ОткрытьФорму("Справочник.СпортивнаяКлассификация.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЗванияТренераНажатие(Элемент)
	ОткрытьФорму("Справочник.ЗванияТренеров.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НаградыНажатие(Элемент)
	ОткрытьФорму("Справочник.Награды.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВозрастныеГруппыНажатие(Элемент)
	ОткрытьФорму("Документ.УстановкаМеждународнойВозрастнойГруппы.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловСпортсмена(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Спортсмен", ТекущийСпортсмен);
	
	ОткрытьФорму("ОбщаяФорма.СписокФайловСпортсмена", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыНажатие(Элемент)
	ОткрытьФорму("Справочник.Команды.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиДостиженийСпортсменовНажатие(Элемент)
	ОткрытьФорму("Справочник.ХарактеристикиДостиженийСпортсменов.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияДостиженийСпортсменовНажатие(Элемент)
	ОткрытьФорму("ЖурналДокументов.РегистрацияДостиженийСпортсменов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СрокиПодтвержденияРазрядовСпортсменовНажатие(Элемент)
	ОткрытьФорму("Отчет.СрокиПодтвержденияРазрядовСпортсменов.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ЧисленностьЗанимающихсяВВозрастеОт5До18ЛетНажатие(Элемент)
	ОткрытьФорму("Отчет.ЧисленностьЗанимающихсяВОрганизацииВВозрастеОт5До18Лет.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура ТренерскийСоставНажатие(Элемент)
	ОткрытьФорму("Отчет.ТренерскийСостав.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура ЧисленностьЗанимающихсяПоПрограммамСпортивнойПодготовкиНажатие(Элемент)
	ОткрытьФорму("Отчет.ЧисленностьЗанимающихсяПоПрограммамСпортивнойПодготовки.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСпортсмена(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗакрытияФормыСпортсмена", ЭтотОбъект);
	ОткрытьФорму("Справочник.Спортсмены.Форма.ФормаЭлемента",,ЭтаФорма,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытияФормыСпортсмена(Результат, ДополнительныеПараметры) Экспорт
	Элементы.СписокСпортсмены.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура СписокСпортсменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Параметр = Новый Структура;
	Спортсмен = Элементы.СписокСпортсмены.ТекущиеДанные;
	Параметр.Вставить("Ключ",Спортсмен.Ссылка);
	ОткрытьФорму("Справочник.Спортсмены.Форма.ФормаЭлемента",Параметр,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТренера(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗакрытияФормыТренера", ЭтотОбъект);
	ОткрытьФорму("Справочник.Тренеры.Форма.ФормаЭлемента",,ЭтаФорма,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура СписокТренерыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Параметр = Новый Структура;
	Тренер = Элементы.СписокТренеры.ТекущиеДанные.Ссылка;
	Параметр.Вставить("Ключ",Тренер);
	ОткрытьФорму("Справочник.Тренеры.Форма.ФормаЭлемента",Параметр,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытияФормыТренера(Результат, ДополнительныеПараметры) Экспорт
	Элементы.СписокТренеры.Обновить();
КонецПроцедуры
// }Рарус dotere #23361 -Программное создание и выбор тренера и спортсмена (На стандартном функционале выпадает ошибка на вебе) 2021.12.21
// }Рарус dotere #23010 -Убирает тренеров из другого спорт учереждения если отбор пустой 2021.12.16
// }Рарус adilas #00002 -Исправление по SonarQube 2021.04.08

#КонецОбласти