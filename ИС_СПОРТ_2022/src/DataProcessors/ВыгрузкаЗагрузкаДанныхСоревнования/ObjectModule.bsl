
Процедура ЗагрузитьДанныеИзЗаявки(ТаблицаДанныхДляЗагрузки, ДокументСоревнование, МассивОшибок, МассивСозданныхОбъектов, ДатаЗаявки, ДатаПолученияДопуска,ДатаФормированияКоманды) Экспорт

	ТаблицаДанныхДляЗагрузки.Колонки.Добавить("ТренерСсылка"                , Новый ОписаниеТипов("СправочникСсылка.Тренеры"));
	ТаблицаДанныхДляЗагрузки.Колонки.Добавить("СпортивноеУчреждениеСсылка"  , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ТаблицаРазрядыСпортсменов = Новый ТаблицаЗначений;
	ТаблицаРазрядыСпортсменов.Колонки.Добавить("Спортсмен"    , Новый ОписаниеТипов("справочникСсылка.Спортсмены"));
	ТаблицаРазрядыСпортсменов.Колонки.Добавить("Разряд"       , Новый ОписаниеТипов("справочникСсылка.СпортивнаяКлассификация"));
	
	массивСпортсменовДляУчастия = Новый Массив;
	массивТренеровДляУчастия    = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанныхДляЗагрузки);
	Запрос.УстановитьПараметр("ПустаяСтрока" , "");
	Запрос.УстановитьПараметр("УчебныйГод"        , ДокументСоревнование.УчебныйГод);
	Запрос.УстановитьПараметр("Организатор"  , ДокументСоревнование.Организатор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанных.Индекс КАК Индекс,
	               |	ВЫРАЗИТЬ(ТаблицаДанных.Группа КАК СТРОКА(150)) КАК Группа,
	               |	ВЫРАЗИТЬ(ТаблицаДанных.СпортивноеУчреждение КАК СТРОКА(150)) КАК СпортивноеУчреждение,
	               |	ВЫРАЗИТЬ(ТаблицаДанных.Разряд КАК СТРОКА(15)) КАК Разряд,
	               |	ВЫРАЗИТЬ(ТаблицаДанных.Фамилия КАК СТРОКА(100)) КАК Фамилия,
	               |	ВЫРАЗИТЬ(ТаблицаДанных.Имя КАК СТРОКА(100)) КАК Имя,
	               |	ВЫРАЗИТЬ(ТаблицаДанных.Отчество КАК СТРОКА(100)) КАК Отчество,
	               |	ТаблицаДанных.ДатаРождения КАК ДатаРождения
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Индекс КАК Индекс,
	               |	ВТ_Данные.Группа КАК Группа,
	               |	ВТ_Данные.Разряд КАК Разряд,
	               |	ВТ_Данные.Фамилия КАК Фамилия,
	               |	ВТ_Данные.Имя КАК Имя,
	               |	ВТ_Данные.Отчество КАК Отчество,
	               |	ВТ_Данные.ДатаРождения КАК ДатаРождения,
	               |	МАКСИМУМ(ЕСТЬNULL(ФормированиеГруппы.Ссылка, ЗНАЧЕНИЕ(документ.ФормированиеГруппы.пустаяссылка))) КАК ФормированиеКомандыСсылка
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФормированиеГруппы КАК ФормированиеГруппы
	               |		ПО ВТ_Данные.Группа = ФормированиеГруппы.Группа.Наименование
	               |			И (ФормированиеГруппы.Проведен)
	               |			И (ФормированиеГруппы.УчебныйГод = &УчебныйГод)
	               |			И (ФормированиеГруппы.Организация = &Организатор)
	               |			И (НЕ ФормированиеГруппы.Группа.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Данные.Индекс,
	               |	ВТ_Данные.Группа,
	               |	ВТ_Данные.Разряд,
	               |	ВТ_Данные.Фамилия,
	               |	ВТ_Данные.Имя,
	               |	ВТ_Данные.Отчество,
	               |	ВТ_Данные.ДатаРождения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Индекс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПодготовленныеДанные.Индекс КАК Индекс,
	               |	ВТ_ПодготовленныеДанные.Группа КАК Группа,
	               |	ВТ_ПодготовленныеДанные.ФормированиеКомандыСсылка КАК ФормированиеКомандыСсылка,
	               |	МАКСИМУМ(ФизическиеЛица.Ссылка) КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТ_ФизическиеЛица
	               |ИЗ
	               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО ВТ_ПодготовленныеДанные.Фамилия = ФизическиеЛица.Фамилия
	               |			И ВТ_ПодготовленныеДанные.Имя = ФизическиеЛица.Имя
	               |			И (ВЫБОР
	               |				КОГДА ВТ_ПодготовленныеДанные.Отчество <> (ВЫРАЗИТЬ(&ПустаяСтрока КАК СТРОКА(100)))
	               |					ТОГДА ВТ_ПодготовленныеДанные.Отчество = ФизическиеЛица.Отчество
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА МЕСЯЦ(ВТ_ПодготовленныеДанные.ДатаРождения) = 1
	               |						И ДЕНЬ(ВТ_ПодготовленныеДанные.ДатаРождения) = 1
	               |					ТОГДА ГОД(ВТ_ПодготовленныеДанные.ДатаРождения) = ГОД(ФизическиеЛица.ДатаРождения)
	               |				ИНАЧЕ ВТ_ПодготовленныеДанные.ДатаРождения = ФизическиеЛица.ДатаРождения
	               |			КОНЕЦ)
	               |			И (НЕ ФизическиеЛица.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ПодготовленныеДанные.Индекс,
	               |	ВТ_ПодготовленныеДанные.Группа,
	               |	ВТ_ПодготовленныеДанные.ФормированиеКомандыСсылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Индекс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Индекс КАК Индекс,
	               |	МАКСИМУМ(СпортивнаяКлассификация.Ссылка) КАК РазрядСсылка
	               |ПОМЕСТИТЬ ВТ_Разряды
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпортивнаяКлассификация КАК СпортивнаяКлассификация
	               |		ПО (ВЫБОР
	               |				КОГДА ВТ_Данные.Разряд <> &ПустаяСтрока
	               |					ТОГДА ВТ_Данные.Разряд = СпортивнаяКлассификация.КодДляИнтеграции
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |			И (НЕ СпортивнаяКлассификация.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Данные.Индекс
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Индекс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ФизическиеЛица.Индекс КАК Индекс,
	               |	ВТ_ФизическиеЛица.Группа КАК Группа,
	               |	ВТ_ФизическиеЛица.ФормированиеКомандыСсылка КАК ФормированиеКомандыСсылка,
	               |	МАКСИМУМ(ЕСТЬNULL(Спортсмены.Ссылка, ЗНАЧЕНИЕ(справочник.спортсмены.пустаяссылка))) КАК Спортсмен
	               |ПОМЕСТИТЬ ВТ_Спортсмены
	               |ИЗ
	               |	ВТ_ФизическиеЛица КАК ВТ_ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спортсмены КАК Спортсмены
	               |		ПО (ВЫБОР
	               |				КОГДА НЕ ВТ_ФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
	               |					ТОГДА ВТ_ФизическиеЛица.ФизическоеЛицо = Спортсмены.ФизическоеЛицо
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ФизическиеЛица.Индекс,
	               |	ВТ_ФизическиеЛица.Группа,
	               |	ВТ_ФизическиеЛица.ФормированиеКомандыСсылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Индекс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Спортсмены.Индекс КАК Индекс,
	               |	ВТ_Спортсмены.Группа КАК Группа,
	               |	ВТ_Спортсмены.ФормированиеКомандыСсылка КАК ФормированиеКомандыСсылка,
	               |	ВТ_Спортсмены.Спортсмен КАК Спортсмен,
	               |	ЕСТЬNULL(ВТ_Разряды.РазрядСсылка, ЗНАЧЕНИЕ(справочник.спортивнаяклассификация.пустаяссылка)) КАК РазрядСсылка
	               |ИЗ
	               |	ВТ_Спортсмены КАК ВТ_Спортсмены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Разряды КАК ВТ_Разряды
	               |		ПО ВТ_Спортсмены.Индекс = ВТ_Разряды.Индекс
	               |ИТОГИ ПО
	               |	Группа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТренерскийСостав.Тренер КАК СТРОКА(150)) КАК Тренер,
	               |	ТренерскийСостав.Индекс КАК Индекс
	               |ПОМЕСТИТЬ ВТ_ТренерскийСостав
	               |ИЗ
	               |	&ТаблицаДанных КАК ТренерскийСостав
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТренерскийСостав.Тренер КАК Тренер,
	               |	ВТ_ТренерскийСостав.Индекс КАК Индекс,
	               |	ЕСТЬNULL(Тренеры.Ссылка, ЗНАЧЕНИЕ(справочник.физическиелица.пустаяссылка)) КАК ТренерСсылка
	               |ИЗ
	               |	ВТ_ТренерскийСостав КАК ВТ_ТренерскийСостав
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Тренеры КАК Тренеры
	               |		ПО ВТ_ТренерскийСостав.Тренер = Тренеры.Наименование
	               |ИТОГИ ПО
	               |	Тренер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Индекс КАК Индекс,
	               |	ВТ_Данные.СпортивноеУчреждение КАК СпортивноеУчреждение,
	               |	ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(справочник.организации.пустаяссылка)) КАК Организация
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	               |		ПО ВТ_Данные.СпортивноеУчреждение = Организации.Наименование
	               |ИТОГИ ПО
	               |	СпортивноеУчреждение";
	
	ТаблицаДанныхДляЗагрузки.Колонки.Добавить("Спортсмен", Новый ОписаниеТипов("СправочникСсылка.Спортсмены"));
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаСпортивноеУчреждение = Пакет[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСпортивноеУчреждение.Следующий() Цикл
		
		СпортивноеУчреждениеСсылка = Неопределено;
		
		Выборка = ВыборкаСпортивноеУчреждение.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Организация) Тогда
				СпортивноеУчреждениеСсылка = Выборка.Организация;
				ТаблицаДанныхДляЗагрузки[Выборка.Индекс].СпортивноеУчреждениеСсылка = Выборка.Организация;
			ИначеЕсли НЕ СпортивноеУчреждениеСсылка = Неопределено Тогда
				ТаблицаДанныхДляЗагрузки[Выборка.Индекс].СпортивноеУчреждениеСсылка = СпортивноеУчреждениеСсылка;
			Иначе
				объектСпортивноеУчреждение              = Справочники.Организации.СоздатьЭлемент();
				объектСпортивноеУчреждение.Наименование = Выборка.СпортивноеУчреждение;
				объектСпортивноеУчреждение.Записать();
				
				СпортивноеУчреждениеСсылка = объектСпортивноеУчреждение.Ссылка;
				ТаблицаДанныхДляЗагрузки[Выборка.Индекс].СпортивноеУчреждениеСсылка = СпортивноеУчреждениеСсылка;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;	
	
	ВыборкаТренер  = Пакет[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТренер.Следующий() Цикл
		
		ТренерСсылка = Неопределено;
		
		Выборка = ВыборкаТренер.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ТренерСсылка) Тогда
				ТренерСсылка = Выборка.ТренерСсылка;
				ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ТренерСсылка = Выборка.ТренерСсылка;
			ИначеЕсли НЕ ТренерСсылка = Неопределено Тогда
				ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ТренерСсылка = ТренерСсылка;
			Иначе
				объектТренерФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				объектТренерФизЛицо.Наименование  = Выборка.Тренер;
				объектТренерФизЛицо.Комментарий   = "Создан загрузкой из Exel";
				объектТренерФизЛицо.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				объектТренерФизЛицо.ОбменДанными.Загрузка = Истина;
				
				физЛицоТренер = Неопределено;
				
				Попытка
					объектТренерФизЛицо.Записать();
					МассивСозданныхОбъектов.Добавить(объектТренерФизЛицо.Ссылка);
					физЛицоТренер = объектТренерФизЛицо.Ссылка;	
				Исключение
					// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось создать тренера %1'"),
					Выборка.Тренер);
					// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					МассивОшибок.Добавить(ТекстОшибки);
				КонецПопытки;
				
				Если Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				объектТренер = Справочники.Тренеры.СоздатьЭлемент();
				объектТренер.Наименование   = физЛицоТренер.Наименование;
				объектТренер.ФизическоеЛицо = физЛицоТренер;
				объектТренер.Комментарий   = "Создан загрузкой из Exel";
				объектТренер.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				
				Попытка
					объектТренер.Записать();
					МассивСозданныхОбъектов.Добавить(объектТренер.Ссылка);
					ТренерСсылка = объектТренер.Ссылка;
					ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ТренерСсылка = ТренерСсылка;	
				Исключение
					// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось создать тренера %1'"),
					Выборка.Тренер);
					// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					МассивОшибок.Добавить(ТекстОшибки);
				КонецПопытки;
	
			КонецЕсли;
			
			массивТренеровДляУчастия.Добавить(ТренерСсылка);
			
		КонецЦикла;	
		
	КонецЦикла;	                
	
	ЗапросТренерскийСостав = Новый Запрос;
	ЗапросТренерскийСостав.УстановитьПараметр("ТаблицаДанных",ТаблицаДанныхДляЗагрузки);
	ЗапросТренерскийСостав.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанных.Индекс КАК Индекс,
	               |	ТаблицаДанных.ТренерСсылка КАК ТренерСсылка,
	               |	ТаблицаДанных.СпортивноеУчреждениеСсылка КАК СпортивноеУчреждениеСсылка
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |&ТаблицаДанных КАК ТаблицаДанных
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Индекс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Индекс КАК Индекс,
	               |	ВТ_Данные.СпортивноеУчреждениеСсылка КАК СпортивноеУчреждениеСсылка,
	               |	ЕСТЬNULL(ТренерскийСоставСпортивногоУчреждения.Регистратор, ЗНАЧЕНИЕ(документ.ФормированиеТренерскогоСоставаСпортивногоУчреждения.пустаяссылка)) КАК ДокументСсылка,
	               |	ВТ_Данные.ТренерСсылка КАК ТренерСсылка
	               |ПОМЕСТИТЬ ВТ_ДокументРегистратор
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТренерскийСоставСпортивногоУчреждения КАК ТренерскийСоставСпортивногоУчреждения
	               |		ПО ВТ_Данные.СпортивноеУчреждениеСсылка = ТренерскийСоставСпортивногоУчреждения.Организация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Индекс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТренерскийСоставСпортивногоУчреждения.Регистратор КАК Регистратор,
	               |	ТренерскийСоставСпортивногоУчреждения.Организация КАК Организация,
	               |	ТренерскийСоставСпортивногоУчреждения.Тренер КАК Тренер
	               |ПОМЕСТИТЬ ВТ_Исключения
	               |ИЗ
	               |	РегистрСведений.ТренерскийСоставСпортивногоУчреждения КАК ТренерскийСоставСпортивногоУчреждения
	               |ГДЕ
	               |	ТренерскийСоставСпортивногоУчреждения.Регистратор В
	               |			(ВЫБРАТЬ
	               |				ВТ_ДокументРегистратор.ДокументСсылка
	               |			ИЗ
	               |				ВТ_ДокументРегистратор)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДокументРегистратор.Индекс КАК Индекс,
	               |	ВТ_ДокументРегистратор.СпортивноеУчреждениеСсылка КАК СпортивноеУчреждениеСсылка,
	               |	ВТ_ДокументРегистратор.ДокументСсылка КАК ДокументСсылка,
	               |	ВТ_ДокументРегистратор.ТренерСсылка КАК ТренерСсылка
	               |ИЗ
	               |	ВТ_ДокументРегистратор КАК ВТ_ДокументРегистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключения КАК ВТ_Исключения
	               |		ПО ВТ_ДокументРегистратор.СпортивноеУчреждениеСсылка = ВТ_Исключения.Организация
	               |			И ВТ_ДокументРегистратор.ДокументСсылка = ВТ_Исключения.Регистратор
	               |			И ВТ_ДокументРегистратор.ТренерСсылка = ВТ_Исключения.Тренер
	               |ГДЕ
	               |	ВТ_Исключения.Регистратор ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	СпортивноеУчреждениеСсылка";
	
	ВыборкаТренерскийСоставСпортУчр = ЗапросТренерскийСостав.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТренерскийСоставСпортУчр.Следующий() Цикл
		
		ДокументТренерскийСостав   = Неопределено;
		
		Выборка = ВыборкаТренерскийСоставСпортУчр.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Организация) И ДокументТренерскийСостав = Неопределено Тогда
				ДокументТренерскийСостав = Выборка.ДокументСсылка.ПолучитьОбъект();
				строкаТренерДокумент = ДокументТренерскийСостав.Добавить();
				строкаТренерДокумент.Тренер = Выборка.ТренерСсылка;
			ИначеЕсли НЕ ДокументТренерскийСостав = Неопределено Тогда
				строкаТренерДокумент = ДокументТренерскийСостав.Добавить();
				строкаТренерДокумент.Тренер = Выборка.ТренерСсылка;
			Иначе
				ДокументТренерскийСостав                = Документы.ФормированиеТренерскогоСоставаСпортивногоУчреждения.СоздатьДокумент();
				ДокументТренерскийСостав.Дата           = ДокументСоревнование.УчебныйГод.ДатаНачала;
				ДокументТренерскийСостав.Комментарий    = "Создан загрузкой из Exel";
				ДокументТренерскийСостав.Ответственный  = ПараметрыСеанса.ТекущийПользователь;
				строкаТренерДокумент = ДокументТренерскийСостав.Добавить();
				строкаТренерДокумент.Тренер = Выборка.ТренерСсылка;
				ДокументТренерскийСостав.Записать();                                                            
			КонецЕсли; 
		КонецЦикла;
		
		Если НЕ ДокументТренерскийСостав = Неопределено Тогда
			Попытка
				ДокументТренерскийСостав.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокументТренерскийСостав.Записать();
				// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось провести документ Формирование тренерского состава.'"),
				ДокументТренерскийСостав.Дата,
				ДокументТренерскийСостав.Номер);
				// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
				МассивОшибок.Добавить(ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаКоманда = Пакет[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Вид_КИ = Справочники.ВидыКонтактнойИнформации.Город;
	Тип_КИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
	
	МассивКоманд = Новый Массив;
	
	Пока ВыборкаКоманда.Следующий() Цикл
		
		объектФормированиеКоманды = Неопределено;
		массивСпортсменовВДокументеФормированиеКоманды = Новый Массив;
		
		Выборка = ВыборкаКоманда.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ФормированиеКомандыСсылка) И объектФормированиеКоманды = Неопределено Тогда
				объектФормированиеКоманды = Выборка.ФормированиеКомандыСсылка.ПолучитьОбъект();
				ПолучитьМассивСпортсменовВКоманде(массивСпортсменовВДокументеФормированиеКоманды,объектФормированиеКоманды.Ссылка);
				ОбъектКоманда = объектФормированиеКоманды.Группа;
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ФормированиеКомандыСсылка) И объектФормированиеКоманды = Неопределено Тогда	
				ОбъектКоманда = Справочники.Группа.СоздатьЭлемент();
				ОбъектКоманда.Наименование  = СокрЛП(ВыборкаКоманда.Группа);
				ОбъектКоманда.Комментарий   = "Создан загрузкой из Exel";
				ОбъектКоманда.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				ОбъектКоманда.Записать();
				
				МассивСозданныхОбъектов.Добавить(ОбъектКоманда.Ссылка);
				
				объектФормированиеКоманды               = Документы.ФормированиеГруппы.СоздатьДокумент();
				объектФормированиеКоманды.Дата          = НачалоДня(ДатаФормированияКоманды);
				объектФормированиеКоманды.УчебныйГод         = ДокументСоревнование.УчебныйГод;
				объектФормированиеКоманды.Организация   = ТаблицаДанныхДляЗагрузки[Выборка.Индекс].СпортивноеУчреждениеСсылка;
				объектФормированиеКоманды.Группа       = ОбъектКоманда.Ссылка;
				объектФормированиеКоманды.Комментарий   = "Создан загрузкой из Exel";
				объектФормированиеКоманды.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;	
							
			Если Выборка.Спортсмен = Справочники.Спортсмены.ПустаяСсылка() Тогда
					
				объектФизическоеЛицо                       = Справочники.ФизическиеЛица.СоздатьЭлемент();
				строкаДанных                               = ТаблицаДанныхДляЗагрузки[Выборка.Индекс];
				ЗаполнитьЗначенияСвойств(объектФизическоеЛицо,строкаДанных);
				объектФизическоеЛицо.Наименование          = строкаДанных.Фамилия + " " + строкаДанных.Имя + ?(строкаДанных.Отчество = "", "", " ") + строкаДанных.Отчество;
				объектФизическоеЛицо.ФамилияЛатиница       = строкаДанных.Surname;
				объектФизическоеЛицо.ИмяЛатиница           = строкаДанных.Name;
				объектФизическоеЛицо.ОбменДанными.Загрузка = Истина;
				объектФизическоеЛицо.Комментарий           = "Создан загрузкой из Exel";
				объектФизическоеЛицо.Ответственный         = ПараметрыСеанса.ТекущийПользователь;
				
				Если ЗначениеЗаполнено(строкаДанных.Город) Тогда
				    строкаКИ               = объектФизическоеЛицо.КонтактнаяИнформация.Добавить();
					строкаКИ.Вид           = Вид_КИ;
					строкаКИ.Тип           = Тип_КИ;
					строкаКИ.Представление = строкаДанных.Город;
				КонецЕсли;
				
				Попытка
					объектФизическоеЛицо.Записать();
				Исключение
					// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось создать физ.лицо %1 %2 %3'"),
					строкаДанных.Фамилия,
					строкаДанных.Имя,
					Формат(строкаДанных.ДатаРождения, "ДЛФ=Д"));
					// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					МассивОшибок.Добавить(ТекстОшибки);
					Продолжить;
				КонецПопытки;
				
				объектСпортсмен                       = Справочники.Спортсмены.СоздатьЭлемент();
				объектСпортсмен.Наименование          = объектФизическоеЛицо.Наименование;
				объектСпортсмен.ФизическоеЛицо        = объектФизическоеЛицо.Ссылка;
				объектСпортсмен.ОбменДанными.Загрузка = Истина;
				объектСпортсмен.Комментарий           = "Создан загрузкой из Exel";
				объектСпортсмен.Ответственный         = ПараметрыСеанса.ТекущийПользователь;
				
				Попытка
					объектСпортсмен.Записать();
					массивСпортсменовДляУчастия.Добавить(объектСпортсмен.Ссылка);
					МассивСозданныхОбъектов.Добавить(объектСпортсмен.Ссылка);
				Исключение
					// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось создать спортсмена %1 %2 %3. Физ лицо помечено на удаление.'"),
					строкаДанных.Фамилия,
					строкаДанных.Имя,
					Формат(строкаДанных.ДатаРождения, "ДЛФ=Д"));
					// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
					МассивОшибок.Добавить(ТекстОшибки);
					
					объектФизическоеЛицо.ПометкаУдаления = Истина;
					объектФизическоеЛицо.Записать();
					Продолжить;
				КонецПопытки;
				
				ТаблицаДанныхДляЗагрузки[Выборка.Индекс].Спортсмен = объектСпортсмен.Ссылка;	
				
			Иначе
				массивСпортсменовДляУчастия.Добавить(Выборка.Спортсмен);
				ТаблицаДанныхДляЗагрузки[Выборка.Индекс].Спортсмен = Выборка.Спортсмен;
				
				Если Выборка.Спортсмен.ФизическоеЛицо.ДатаРождения <> ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ДатаРождения Тогда
					Если Месяц(Выборка.Спортсмен.ФизическоеЛицо.ДатаРождения) = 1 И День(Выборка.Спортсмен.ФизическоеЛицо.ДатаРождения) = 1
						И Месяц(ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ДатаРождения) <> 1 И День(ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ДатаРождения) <> 1 Тогда
						объектФизЛицо = Выборка.Спортсмен.ФизическоеЛицо.ПолучитьОбъект();
						объектФизЛицо.ДатаРождения = ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ДатаРождения;
						Попытка
							объектФизЛицо.Записать();
						Исключение
							// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
							ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузитьДанныеИзЗаявки().ВыборкаКоманда.Следующий().объектФизЛицо.Записать();'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
						КонецПопытки;	
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.РазрядСсылка) Тогда
				строкаРазряд           = ТаблицаРазрядыСпортсменов.Добавить();
				строкаРазряд.Спортсмен = ТаблицаДанныхДляЗагрузки[Выборка.Индекс].Спортсмен;
				строкаРазряд.Разряд    = Выборка.РазрядСсылка;
			КонецЕсли;
			
			Если массивСпортсменовВДокументеФормированиеКоманды.Найти(ТаблицаДанныхДляЗагрузки[Выборка.Индекс].Спортсмен) = Неопределено Тогда
				строкаСоставКоманды                  = объектФормированиеКоманды.Спортсмены.Добавить();
				строкаСоставКоманды.КлючСтроки       = СокрЛП(ТаблицаДанныхДляЗагрузки[Выборка.Индекс].Спортсмен.УникальныйИдентификатор());
				строкаСоставКоманды.Спортсмен        = ТаблицаДанныхДляЗагрузки[Выборка.Индекс].Спортсмен;
				КлючСтроки                           = строкаСоставКоманды.КлючСтроки;
			Иначе
				КлючСтроки                           = СокрЛП(ТаблицаДанныхДляЗагрузки[Выборка.Индекс].Спортсмен.УникальныйИдентификатор());
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ТренерСсылка) Тогда
				Если НЕ массивСпортсменовВДокументеФормированиеКоманды.Количество() = 0 Тогда
					строкиЛичныйТренер = объектФормированиеКоманды.СписокЛичныхТренеров.НайтиСтроки(Новый Структура("КлючСтроки, Тренер", КлючСтроки, ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ТренерСсылка));
					Если НЕ строкиЛичныйТренер.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				строкаТренерСпортсмен            = объектФормированиеКоманды.СписокЛичныхТренеров.Добавить();
				строкаТренерСпортсмен.КлючСтроки = КлючСтроки;
				строкаТренерСпортсмен.Тренер     = ТаблицаДанныхДляЗагрузки[Выборка.Индекс].ТренерСсылка;
			КонецЕсли;
				
		КонецЦикла;

		Попытка
			объектФормированиеКоманды.Записать(РежимЗаписиДокумента.Проведение);
			МассивСозданныхОбъектов.Добавить(объектФормированиеКоманды.Ссылка);
			
			МассивКоманд.Добавить(ОбъектКоманда.Ссылка);
		Исключение
			объектФормированиеКоманды.Записать();
			// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			               НСтр("ru = 'Не удалось проверсти документ %1.
			               |Проведите документ, сформируйте возрастные группы и заполните заявку вручную.'"),
			               объектФормированиеКоманды.Ссылка);
			// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			МассивОшибок.Добавить(Новый Структура("Объект, ТекстОшибки", объектФормированиеКоманды.Ссылка, ТекстОшибки));
			Продолжить;
		КонецПопытки;
			
	КонецЦикла;
	
	СформироватьВозрастныеГруппыПоУчебномуГоду(ДокументСоревнование, МассивКоманд, МассивОшибок);
	
	СформироватьМедДопускСпортсменов(ДокументСоревнование,ТаблицаДанныхДляЗагрузки, МассивОшибок, МассивСозданныхОбъектов, ДатаПолученияДопуска);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРазрядов", ТаблицаРазрядыСпортсменов);
	Запрос.УстановитьПараметр("ДатаДокумента"  , ДокументСоревнование.Дата);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТаблицаРазрядов.Спортсмен КАК Спортсмен,
	                |	ТаблицаРазрядов.Разряд КАК Разряд
	                |ПОМЕСТИТЬ ВТ_ТаблицаРазрядов
	                |ИЗ
	                |	&ТаблицаРазрядов КАК ТаблицаРазрядов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	РазрядыСпортсменов.Спортсмен КАК Спортсмен,
	                |	РазрядыСпортсменов.Разряд КАК Разряд
	                |ПОМЕСТИТЬ ВТ_УказанныеРанееРазряды
	                |ИЗ
	                |	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(
	                |			&ДатаДокумента,
	                |			(Спортсмен, Разряд) В
	                |				(ВЫБРАТЬ
	                |					ВТ_ТаблицаРазрядов.Спортсмен,
	                |					ВТ_ТаблицаРазрядов.Разряд
	                |				ИЗ
	                |					ВТ_ТаблицаРазрядов)) КАК РазрядыСпортсменов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ТаблицаРазрядов.Спортсмен КАК Спортсмен,
	                |	ВТ_ТаблицаРазрядов.Разряд КАК Разряд,
	                |	НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) КАК ДатаПрисвоения
	                |ИЗ
	                |	ВТ_ТаблицаРазрядов КАК ВТ_ТаблицаРазрядов
	                |ГДЕ
	                |	НЕ (ВТ_ТаблицаРазрядов.Спортсмен, ВТ_ТаблицаРазрядов.Разряд) В
	                |				(ВЫБРАТЬ
	                |					ВТ_УказанныеРанееРазряды.Спортсмен,
	                |					ВТ_УказанныеРанееРазряды.Разряд
	                |				ИЗ
	                |					ВТ_УказанныеРанееРазряды)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		объектПрисвоениеРазрядов                  = Документы.ПрисвоениеРазряда.СоздатьДокумент();
		объектПрисвоениеРазрядов.Дата             = ДатаФормированияКоманды;
		объектПрисвоениеРазрядов.Комментарий      = "Создан загрузкой из Exel";
		объектПрисвоениеРазрядов.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			строкаСпортсмен = объектПрисвоениеРазрядов.СоставУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСпортсмен, Выборка);
		КонецЦикла;
		Попытка
			объектПрисвоениеРазрядов.Записать(РежимЗаписиДокумента.Проведение);
			МассивСозданныхОбъектов.Добавить(объектПрисвоениеРазрядов.Ссылка);
		Исключение
			// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			              НСтр("ru = 'Не удалось проверсти документ %1.
			              |Проведите документ вручную.'"),
			              объектПрисвоениеРазрядов.Ссылка);
			// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23			  
			МассивОшибок.Добавить(Новый Структура("Объект, ТекстОшибки", объектПрисвоениеРазрядов.Ссылка, ТекстОшибки));
		КонецПопытки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКоманд"                , МассивКоманд);
	Запрос.УстановитьПараметр("УчебныйГод"                  , ДокументСоревнование.УчебныйГод);
	Запрос.УстановитьПараметр("массивТренеровДляУчастия"    , массивТренеровДляУчастия);
	Запрос.УстановитьПараметр("массивСпортсменовДляУчастия" , массивСпортсменовДляУчастия);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставГруппы.УчебныйГод КАК УчебныйГод,
	               |	СоставГруппы.Организация КАК Организация,
	               |	СоставГруппы.Группа КАК Группа,
	               |	СоставГруппы.Спортсмен КАК Спортсмен,
	               |	ВозрастныеГруппы.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	               |ПОМЕСТИТЬ ВТ_СписокСпортсменов
	               |ИЗ
	               |	РегистрСведений.СоставГруппы.СрезПоследних(
	               |			,
	               |			Группа В (&МассивКоманд)
	               |				И УчебныйГод = &УчебныйГод
	               |				И Спортсмен В (&массивСпортсменовДляУчастия)) КАК СоставГруппы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МеждународныеВозрастныеГруппы.СрезПоследних(, УчебныйГод = &УчебныйГод) КАК ВозрастныеГруппы
	               |		ПО СоставГруппы.УчебныйГод = ВозрастныеГруппы.УчебныйГод
	               |			И СоставГруппы.Спортсмен = ВозрастныеГруппы.Спортсмен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТренерскийСостав.Организация КАК Организация,
	               |	ТренерскийСостав.УчебныйГод КАК УчебныйГод,
	               |	ТренерскийСостав.Группа КАК Группа,
	               |	ТренерскийСостав.Спортсмен КАК Спортсмен,
	               |	ТренерскийСостав.Тренер КАК Тренер
	               |ПОМЕСТИТЬ ВТ_ТренерскийСостав
	               |ИЗ
	               |	РегистрСведений.ЛичныйТренерСпортсмена.СрезПоследних(
	               |			,
	               |			Группа В (&МассивКоманд)
	               |				И УчебныйГод = &УчебныйГод
	               |				И Тренер В (&массивТренеровДляУчастия)) КАК ТренерскийСостав
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СписокСпортсменов.УчебныйГод КАК УчебныйГод,
	               |	ВТ_СписокСпортсменов.Организация КАК Организация,
	               |	ВТ_СписокСпортсменов.Группа КАК Группа,
	               |	ВТ_СписокСпортсменов.Спортсмен КАК Спортсмен,
	               |	ВТ_СписокСпортсменов.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа,
	               |	ВТ_ТренерскийСостав.Тренер КАК Тренер
	               |ИЗ
	               |	ВТ_ТренерскийСостав КАК ВТ_ТренерскийСостав
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокСпортсменов КАК ВТ_СписокСпортсменов
	               |		ПО ВТ_ТренерскийСостав.Организация = ВТ_СписокСпортсменов.Организация
	               |			И ВТ_ТренерскийСостав.УчебныйГод = ВТ_СписокСпортсменов.УчебныйГод
	               |			И ВТ_ТренерскийСостав.Группа = ВТ_СписокСпортсменов.Группа
	               |			И ВТ_ТренерскийСостав.Спортсмен = ВТ_СписокСпортсменов.Спортсмен
	               |ГДЕ
	               |	НЕ ВТ_СписокСпортсменов.Спортсмен ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	Тренер";
	
	ВыборкаТренер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТренер.Следующий() Цикл
		
		объектЗаявка                       = Документы.ЗаявкаНаПроведениеСоревнования.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(объектЗаявка,ДокументСоревнование,,"Дата, Номер, СоставУчастников");
		объектЗаявка.Дата                  = ДатаЗаявки;
		объектЗаявка.Тренер                = ВыборкаТренер.Тренер;
		объектЗаявка.Комментарий           = "Создан загрузкой Exel";
		объектЗаявка.Ответственный         = ПараметрыСеанса.ТекущийПользователь;
		
		объектЗаявка.ДополнительныеСвойства.Вставить("НеВыводитьСообщения", Истина);
		
		Выборка = ВыборкаТренер.Выбрать();
		Пока Выборка.Следующий() Цикл
			строкаСоставУчастников = объектЗаявка.СоставУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСоставУчастников, Выборка);
		КонецЦикла;
		
		Попытка
			объектЗаявка.Записать(РежимЗаписиДокумента.Проведение);
			МассивСозданныхОбъектов.Добавить(объектЗаявка.Ссылка);
		Исключение
			объектЗаявка.Записать();
			ТекстОшибки = "Не удалось проверсти документ. Проведите документ вручную.";
			МассивОшибок.Добавить(Новый Структура("Объект, ТекстОшибки", объектЗаявка.Ссылка, ТекстОшибки));
		КонецПопытки;
			
	КонецЦикла;	
		
КонецПроцедуры

Процедура СформироватьВозрастныеГруппыПоУчебномуГоду(ДокументСоренование, МассивКоманд, МассивОшибок)
	
	массивВозрастныхГрупп = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчебныйГод"    , ДокументСоренование.УчебныйГод);
	Запрос.УстановитьПараметр("ДатаДокумента" , ДокументСоренование.Дата);
	Запрос.УстановитьПараметр("МассивКоманд"  , МассивКоманд);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	УстановкаМеждународнойВозрастнойГруппы.Ссылка КАК Ссылка,
	                |	МеждународныеВозрастныеГруппы.ДатаНачала КАК ДатаНачала,
	                |	МеждународныеВозрастныеГруппы.ДатаОкончания КАК ДатаОкончания
	                |ПОМЕСТИТЬ ВТ_СписокВозрастныхГруппНаУчебныйГод
	                |ИЗ
	                |	Документ.УстановкаМеждународнойВозрастнойГруппы КАК УстановкаМеждународнойВозрастнойГруппы
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МеждународныеВозрастныеГруппы КАК МеждународныеВозрастныеГруппы
	                |		ПО УстановкаМеждународнойВозрастнойГруппы.МеждународнаяВозрастнаяГруппа = МеждународныеВозрастныеГруппы.Ссылка
	                |ГДЕ
	                |	УстановкаМеждународнойВозрастнойГруппы.УчебныйГод = &УчебныйГод
	                |	И УстановкаМеждународнойВозрастнойГруппы.Проведен
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СоставГруппы.Спортсмен КАК Спортсмен,
	                |	ФизическиеЛица.ДатаРождения КАК ДатаРождения
	                |ПОМЕСТИТЬ ВТ_Спортсмены
	                |ИЗ
	                |	РегистрСведений.СоставГруппы.СрезПоследних(
	                |			&ДатаДокумента,
	                |			УчебныйГод = &УчебныйГод
	                |				И Группа В (&МассивКоманд)) КАК СоставГруппы
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	                |		ПО СоставГруппы.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	МеждународныеВозрастныеГруппы.Спортсмен КАК Спортсмен
	                |ПОМЕСТИТЬ ВТ_УчтенныеСпортсменыВУчебномГоду
	                |ИЗ
	                |	РегистрСведений.МеждународныеВозрастныеГруппы.СрезПоследних(
	                |			&ДатаДокумента,
	                |			УчебныйГод = &УчебныйГод
	                |				И Спортсмен В
	                |					(ВЫБРАТЬ
	                |						ВТ_Спортсмены.Спортсмен
	                |					ИЗ
	                |						ВТ_Спортсмены)) КАК МеждународныеВозрастныеГруппы
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_Спортсмены.Спортсмен КАК Спортсмен,
	                |	ВТ_СписокВозрастныхГруппНаУчебныйГод.Ссылка КАК Ссылка
	                |ИЗ
	                |	ВТ_Спортсмены КАК ВТ_Спортсмены
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокВозрастныхГруппНаУчебныйГод КАК ВТ_СписокВозрастныхГруппНаУчебныйГод
	                |		ПО ВТ_Спортсмены.ДатаРождения >= ВТ_СписокВозрастныхГруппНаУчебныйГод.ДатаНачала
	                |			И ВТ_Спортсмены.ДатаРождения <= ВТ_СписокВозрастныхГруппНаУчебныйГод.ДатаОкончания
	                |ГДЕ
	                |	НЕ ВТ_Спортсмены.Спортсмен В
	                |				(ВЫБРАТЬ
	                |					ВТ_УчтенныеСпортсменыВУчебномГоду.Спортсмен
	                |				ИЗ
	                |					ВТ_УчтенныеСпортсменыВУчебномГоду)
	                |ИТОГИ ПО
	                |	Ссылка";
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Отказ = Ложь;
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокумент.Ссылка) Тогда
			Отказ = Истина;
		Иначе
			документОбъект = ВыборкаДокумент.Ссылка.ПолучитьОбъект();
			документОбъект.Комментарий   = документОбъект.Комментарий + ?(документОбъект.Комментарий <> "", " ", "") + "Дополенен загрузкой из Exel";
			документОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь; 
		КонецЕсли;
		
		Выборка = ВыборкаДокумент.Выбрать();
		Пока Выборка.Следующий() Цикл
			
		    ТекстСообщения = ТекстСообщения + СокрЛП(Выборка.Спортсмен) + ", ";
			Если НЕ Отказ Тогда
				строкаСпортсмен = документОбъект.Спортсмены.Добавить();
				строкаСпортсмен.Спортсмен  = Выборка.Спортсмен;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Отказ Тогда
			// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			              НСтр("ru = 'Не удалось установить возрастную группу спортсменам %1.
			              |Внесите спортсменов вручную.'"),
			              Сред(ТекстСообщения,1,СтрДлина(ТекстСообщения)-2));
			// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23			
			МассивОшибок.Добавить(ТекстОшибки);
		Иначе
			Попытка 
				документОбъект.Записать(РежимЗаписиДокумента.Проведение);
				массивВозрастныхГрупп.Добавить(ВыборкаДокумент.Ссылка.МеждународнаяВозрастнаяГруппа);
			Исключение
				// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			              НСтр("ru = 'Не удалось установить возрастную группу спортсменам %1.
			              |Внесите спортсменов вручную.'"),
			              Сред(ТекстСообщения,1,СтрДлина(ТекстСообщения)-2));
				// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23		  
			    МассивОшибок.Добавить(ТекстОшибки);
			КонецПопытки;	
		КонецЕсли;	
		
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("массивВозрГрупп", массивВозрастныхГрупп);
	Запрос.УстановитьПараметр("Соревнование"   , ДокументСоренование.Соревнование);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	МеждународныеВозрастныеГруппы.МеждународнаяВозрастнаяГруппа КАК МеждународнаяВозрастнаяГруппа
	                |ПОМЕСТИТЬ ВТ_СписокГруппВСоревнование
	                |ИЗ
	                |	Справочник.Соревнование.МеждународныеВозрастныеГруппы КАК МеждународныеВозрастныеГруппы
	                |ГДЕ
	                |	МеждународныеВозрастныеГруппы.Ссылка = &Соревнование
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	МеждународныеВозрастныеГруппы.Ссылка КАК ВозрГруппа
	                |ИЗ
	                |	Справочник.МеждународныеВозрастныеГруппы КАК МеждународныеВозрастныеГруппы
	                |ГДЕ
	                |	МеждународныеВозрастныеГруппы.Ссылка В (&массивВозрГрупп)
	                |			И НЕ МеждународныеВозрастныеГруппы.Ссылка В
	                |					(ВЫБРАТЬ
	                |						ВТ_СписокГруппВСоревнование.МеждународнаяВозрастнаяГруппа
	                |					ИЗ
	                |						ВТ_СписокГруппВСоревнование)";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	объектСоревнование = ДокументСоренование.Соревнование.ПолучитьОбъект();
	
	Пока Выборка.Следующий() Цикл
		строкаМеждВозрГруппа                                = объектСоревнование.МеждународныеВозрастныеГруппы.Добавить();
		строкаМеждВозрГруппа.МеждународнаяВозрастнаяГруппа  = Выборка.ВозрГруппа;
	КонецЦикла;	
	
	объектСоревнование.Записать();
		
КонецПроцедуры	

Процедура СформироватьМедДопускСпортсменов(ДокументСоревнование, ТаблицаДанныхДляЗагрузки, МассивОшибок, МассивСозданныхОбъектов, ДатаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанных" , ТаблицаДанныхДляЗагрузки);
	Запрос.УстановитьПараметр("ДатаДокумента" , ДатаДокумента);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанных.Спортсмен КАК СпортсменСсылка,
	               |	ТаблицаДанных.Допуск КАК Допуск,
	               |	ТаблицаДанных.СрокМедДопуска КАК СрокМедДопуска
	               |ПОМЕСТИТЬ ВТ_ВнешниеДанные
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных
	               |ГДЕ
	               |	ТаблицаДанных.Спортсмен <> ЗНАЧЕНИЕ(справочник.спортсмены.пустаяссылка)
	               |	И ТаблицаДанных.Допуск
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РегистрацияДопусков.Спортсмен КАК Спортсмен,
	               |	РегистрацияДопусков.ДействуетДо КАК ДействуетДо
	               |ПОМЕСТИТЬ ВТ_ЗарегистрированныеДопуски
	               |ИЗ
	               |	РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям.СрезПоследних(
	               |			&ДатаДокумента,
	               |			Спортсмен В
	               |					(ВЫБРАТЬ
	               |						ВТ_ВнешниеДанные.СпортсменСсылка
	               |					ИЗ
	               |						ВТ_ВнешниеДанные)
	               |				И ДействуетДо > &ДатаДокумента) КАК РегистрацияДопусков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВнешниеДанные.СпортсменСсылка КАК СпортсменСсылка,
	               |	ВТ_ВнешниеДанные.СрокМедДопуска КАК СрокМедДопуска
	               |ИЗ
	               |	ВТ_ВнешниеДанные КАК ВТ_ВнешниеДанные
	               |ГДЕ
	               |	НЕ ВТ_ВнешниеДанные.СпортсменСсылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_ЗарегистрированныеДопуски.Спортсмен
	               |				ИЗ
	               |					ВТ_ЗарегистрированныеДопуски)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой()Тогда
		объектДопускКСоревнованиям      = Документы.ДопускиУчастниковКСпортивнымСоревнованиям.СоздатьДокумент();
		объектДопускКСоревнованиям.Дата = ДатаДокумента;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			строкаОбъектДопуск                      = объектДопускКСоревнованиям.ДопускиСпортсменов.Добавить();
			строкаОбъектДопуск.ДатаПолученияДопуска = ДатаДокумента;
			строкаОбъектДопуск.ДействуетДо          = Выборка.СрокМедДопуска;
			строкаОбъектДопуск.Спортсмен            = Выборка.СпортсменСсылка;
		КонецЦикла;
		объектДопускКСоревнованиям.Комментарий          = "Создан загрузкой из Exel";
		объектДопускКСоревнованиям.Ответственный        = ПараметрыСеанса.ТекущийПользователь;
		Попытка
			объектДопускКСоревнованиям.Записать(РежимЗаписиДокумента.Проведение);
			МассивСозданныхОбъектов.Добавить(объектДопускКСоревнованиям.Ссылка);
		Исключение
			объектДопускКСоревнованиям.Записать();
			// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверсти документ %1.
			|Проведите документ вручную.'"),
			объектДопускКСоревнованиям.Ссылка);
			// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			МассивОшибок.Добавить(Новый Структура("Объект, ТекстОшибки", объектДопускКСоревнованиям.Ссылка, ТекстОшибки));
		КонецПопытки;		 
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПолучитьМассивСпортсменовВКоманде(массивСпортсменовВДокументеФормированиеКоманды, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Спортсмены.Спортсмен КАК Спортсмен
	                |ИЗ
	                |	Документ.ФормированиеГруппы.Спортсмены КАК Спортсмены
	                |ГДЕ
	                |	Спортсмены.Ссылка = &Ссылка";
	массивСпортсменовВДокументеФормированиеКоманды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Спортсмен");
	
КонецПроцедуры	

Процедура СоздатьСпортсменовВБазе(МассивСпортсменов, МассивРезультатов) Экспорт
	
	Вид_КИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	Тип_КИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
	
	Для Каждого СтрокаСпортсмен Из массивСпортсменов Цикл
		
		ОбъектФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектФизЛицо,СтрокаСпортсмен);
		ОбъектФизЛицо.Наименование = СтрокаСпортсмен.Фамилия + " " + СтрокаСпортсмен.Имя + " " + СтрокаСпортсмен.Отчество;
		
		Если ЗначениеЗаполнено(СтрокаСпортсмен.Город) Тогда
			строкаКонтактнаяИнформация     = ОбъектФизЛицо.КонтактнаяИнформация.Добавить();
			строкаКонтактнаяИнформация.Вид = Вид_КИ;
			строкаКонтактнаяИнформация.Тип = Тип_КИ;
			строкаКонтактнаяИнформация.Представление = СтрокаСпортсмен.Город;
		КонецЕсли;	
		
		Попытка
			ОбъектФизЛицо.Записать();
		Исключение
			// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать спортсмена %1. Создайте вручную.'"),
				ОбъектФизЛицо.Наименование);
			// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
			
		КонецПопытки;
		
		ОбъектСпортсмен = Справочники.Спортсмены.СоздатьЭлемент();
		ОбъектСпортсмен.Наименование   = ОбъектФизЛицо.Наименование;
		ОбъектСпортсмен.ФизическоеЛицо = ОбъектФизЛицо.Ссылка;
		
		Попытка
			ОбъектСпортсмен.Записать();
		Исключение
			// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать спортсмена %1. Физическое лицо было создано успешно.
				|Создайте спортсмена вручную из физического лица!'"),
				ОбъектФизЛицо.Наименование);
			// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
			
		КонецПопытки;
		
		Если СтрокаСпортсмен.СоздатьДопускВБазе Тогда
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры