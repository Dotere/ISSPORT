#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	 ДокументСоревнование = Параметры.ДокументСоревнование;
	 
	 Если Параметры.Свойство("Выгрузка") Тогда
		 ВыгрузкаФайла = Параметры.Выгрузка; 
	 КонецЕсли;
	 
	 Код                     = 1;
	 Фамилия                 = 4;
	 Имя                     = 5;
	 Пол                     = 7;
	 ДатаРождения            = 12;
	 НомерСтроки             = 2;
	 Команда                 = 17;
	 Тренер                  = 18;
	 СпортивноеУчреждение    = 23;
	 
	 Элементы.Команда.Видимость              = НЕ ВыгрузкаФайла;
	 Элементы.Тренер.Видимость               = НЕ ВыгрузкаФайла;
	 Элементы.СпортивноеУчреждение.Видимость = НЕ ВыгрузкаФайла;
	 
	 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Отчество",6);
	 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Год рождения",13);
	 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Разряд",14);
	 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Город",15);
	 Если ВыгрузкаФайла Тогда
		 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Команда", 16);
		 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Тренер",17);
		 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Спортивное учреждение", 20);
	 КонецЕсли;
	 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Наличие медицинского допуска", 19);
	 ДобавитьСтрокуВТаблицуНеобязательныхКолонок("Срок медицинского допуска", 20);
	 	 	
КонецПроцедуры
 
 &НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ФормаВыгрузить.Видимость         = ВыгрузкаФайла;
	Элементы.ФормаВыгрузить.КнопкаПоУмолчанию = ВыгрузкаФайла;
	Элементы.ФормаЗагрузить.Видимость         = НЕ ВыгрузкаФайла;
	Элементы.ФормаЗагрузить.КнопкаПоУмолчанию = НЕ ВыгрузкаФайла;
	
	Элементы.ГруппаЗагрузка.Видимость         = НЕ ВыгрузкаФайла;
	Элементы.ГруппаВыгрузка.Видимость         = ВыгрузкаФайла;
	
	Элементы.НомерСтроки.Видимость            = НЕ ВыгрузкаФайла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборФайла

&НаКлиенте
Процедура ПапкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("ВыборЗавершение", Новый ОписаниеОповещения("ВложениеВыборЗавершение", ЭтотОбъект));
    Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
    НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда 
		Если Не Подключено Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстСообщения = НСтр("ru='Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
			ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыборЗавершение);
		КонецЕсли;
	#Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыборЗавершение);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        НачатьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры.ВыборЗавершение);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложениеВыборЗавершение(ДополнительныеПараметры, ДопПараметр) Экспорт
    НачатьПолучениеКаталогаДокументов(Новый ОписаниеОповещения("КаталогДокументовЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура КаталогДокументовЗавершение(ИмяКаталогаДокументов, ДополнительныеПараметры) Экспорт 
    Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
    ОписаниеОп = новый ОписаниеОповещения("КаталогВыбран", ЭтотОбъект);
    Диалог.Показать(ОписаниеОп);
КонецПроцедуры 

&НаКлиенте
Процедура КаталогВыбран(ВыбранныеФайлы, ДополнительныеПараметры)  Экспорт
    Если ВыбранныеФайлы<>Неопределено и ВыбранныеФайлы.Количество()>0 Тогда
        Папка = ВыбранныеФайлы[0];
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если НЕ РасширениеПодключено Тогда
			НачатьУстановкуРасширенияРаботыСФайлами();
		КонецЕсли;
		
	#КонецЕсли
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      = "Excel файлы(*.xls;*.xlsx)|*.xls;*.xlsx";
	ДиалогВыбораФайла.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выберите файлы для заполнения документов '"), ("ru = 'заполнения'"));
	ДиалогВыбораФайла.ПредварительныйПросмотр     = ЛОЖЬ;
	ДиалогВыбораФайла.Расширение                  = "xlsx";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = "";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДляЗагрузки", Истина);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыбранФайл", ЭтотОбъект,ПараметрыОповещения);
	ДиалогВыбораФайла.Показать(ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайл(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		ПоказатьПредупреждение( , "Файл не выбраны!");
		Возврат;
	КонецЕсли;
	ПомещаемыеФайлы = Новый Массив;

	
	Если ВыбранныеФайлы.Количество() Тогда
		Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
				Файл = ИмяФайла;
			КонецЦикла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИПередатьФайлыНаСерверЗавершение", ЭтаФорма);
		НачатьПомещениеФайлов(ОписаниеОповещения,ПомещаемыеФайлы,, Ложь);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИПередатьФайлыНаСерверЗавершение(Знач МассивФайлов,Знач ВыбранноеИмяФайла)  Экспорт
	
	Состояние("Выполняется чтение файла...");
	
	Если МассивФайлов.Количество()>0 Тогда
		
		Для Каждого ИмяФайла_ Из МассивФайлов Цикл
			ПутьКФайлу 					= ИмяФайла_.ПолноеИмя;
			АдресВоВременномХранилице 	= ИмяФайла_.Хранение;
			РасширениеФайла 			= Прав(ИмяФайла_.Имя,СтрДлина(ИмяФайла_.Имя)-(СтрНайти(ИмяФайла_.Имя,".",НаправлениеПоиска.СКонца,,1)));;	
		КонецЦикла;
		
		ЗагрузитьДанныеНаСервере();
		
		Если ТаблицаДанныхЗагрузка.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данных для загрузки не обнаружено.");
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные прочитаны.");
	
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для Каждого строкаНеобязательнаяКолонка Из ТаблицаНеобязательныхКолонок Цикл
		строкаНеобязательнаяКолонка.Использовать = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВсе(Команда)
	
	Для Каждого строкаНеобязательнаяКолонка Из ТаблицаНеобязательныхКолонок Цикл
		строкаНеобязательнаяКолонка.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ТаблицаДанныхЗагрузка.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данных для загрузки не обнаружено или файл не прочитан!");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ВыгрузкаЗагрузкаДанныхСоревнования.Форма.ФормаЗагрузкиЗаявокИзФайла",
	    Новый Структура("ДокументСоревнование, Адрес", ДокументСоревнование, ПолучитьАдресВременногоХранилища())); 
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаФайла

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Папка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран каталог!",,"Папка","Папка");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано имя файла!",,"ИмяФайла","ИмяФайла");
		Отказ = Истина;
	КонецЕсли;
	
	МассивСимволов = Новый Массив;
	МассивСимволов.Добавить("/");
	МассивСимволов.Добавить("|");
	МассивСимволов.Добавить("\");
	МассивСимволов.Добавить(":");
	МассивСимволов.Добавить(";");
	МассивСимволов.Добавить("*");
	МассивСимволов.Добавить("?");
	МассивСимволов.Добавить(Символ(34));
	МассивСимволов.Добавить("<");
	МассивСимволов.Добавить(">");
	
	Для Каждого Символ_ Из МассивСимволов Цикл
		Если Найти(ИмяФайла, Символ_)<> 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Имя файла не должно содержать символ %1'"),
				Символ_);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИмяФайла","ИмяФайла");
		    Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Элемент_ Из Элементы.ОбязательныеКолонки.ПодчиненныеЭлементы Цикл
		Если Элемент_.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если ЭтотОбъект[Элемент_.Имя] = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите позицию обязательной колонки!",,Элемент_.Имя,Элемент_.Имя);
		        Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	строкиОшибкиТЧ = ТаблицаНеобязательныхКолонок.НайтиСтроки(Новый Структура("Использовать, Позиция", Истина,0));
	Для Каждого строкаОшибкаТЧ Из строкиОшибкиТЧ Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Укажите позицию колонки %1!'"),
				строкаОшибкаТЧ.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТаблицаНеобязательныхКолонок","ТаблицаНеобязательныхКолонок");
		Отказ = Истина;
	КонецЦикла;	
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Попытка
		
		ВыгрузитьНаСервере();
		
		ТабличныйДокумент.Записать(Папка + "\" + ИмяФайла + ".xls",ТипФайлаТабличногоДокумента.XLS);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Выгрузка завершена. Создан Файл: %1",
				Папка + "\" + ИмяФайла + ".xls");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Оповестить("ВыгрузкаДанныхВСистемуХронометража");
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сформировать файл по причине:" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСервере()
	
	ТабличныйДокумент.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента"     , ?(ДокументСоревнование.ДатаНачалаСоревнования = Дата(1,1,1),ДокументСоревнование.Дата,ДокументСоревнование.ДатаНачалаСоревнования));
	Запрос.УстановитьПараметр("Ссылка"            , ДокументСоревнование);
	Запрос.УстановитьПараметр("СписокСпортсменов" , ДокументСоревнование.СоставУчастников.ВыгрузитьКолонку("Спортсмен"));
	Запрос.УстановитьПараметр("УчебныйГод"        , ДокументСоревнование.УчебныйГод);
	Запрос.УстановитьПараметр("Соревнование"      , ДокументСоревнование.Соревнование);
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Разряды.Спортсмен КАК Спортсмен,
	              |	МАКСИМУМ(Разряды.Период) КАК Период
	              |ПОМЕСТИТЬ ВТ_МаксРазряды
	              |ИЗ
	              |	РегистрСведений.ПодтвержденныеРазрядыСпортсменов.СрезПоследних(&ДатаДокумента, Спортсмен В (&СписокСпортсменов)) КАК Разряды
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Разряды.Спортсмен
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВТ_МаксРазряды.Спортсмен КАК Спортсмен,
	              |	ПодтвержденныеРазрядыСпортсменов.Разряд КАК Разряд
	              |ПОМЕСТИТЬ ВТ_Разряды
	              |ИЗ
	              |	ВТ_МаксРазряды КАК ВТ_МаксРазряды
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодтвержденныеРазрядыСпортсменов КАК ПодтвержденныеРазрядыСпортсменов
	              |		ПО ВТ_МаксРазряды.Спортсмен = ПодтвержденныеРазрядыСпортсменов.Спортсмен
	              |			И ВТ_МаксРазряды.Период = ПодтвержденныеРазрядыСпортсменов.Период
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Заявки.Спортсмен КАК Спортсмен,
	              |	Заявки.Тренер КАК Тренер,
	              |	Заявки.Организация КАК СпортивноеУчреждение
	              |ПОМЕСТИТЬ ВТ_ЗаявкиОтТренера
	              |ИЗ
	              |	РегистрСведений.ЗаявкиНаПроведениеСоревнования.СрезПоследних(
	              |			&ДатаДокумента,
	              |			Спортсмен В (&СписокСпортсменов)
	              |				И УчебныйГод = &УчебныйГод
	              |				И Соревнование = &Соревнование) КАК Заявки
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	РегистрацияДопусков.Спортсмен КАК Спортсмен,
	              |	РегистрацияДопусков.Период КАК Период
	              |ПОМЕСТИТЬ ВТ_МаксДопуск
	              |ИЗ
	              |	РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям.СрезПоследних(&ДатаДокумента, Спортсмен В (&СписокСпортсменов)) КАК РегистрацияДопусков
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВТ_МаксДопуск.Спортсмен КАК Спортсмен,
	              |	РегистрацияДопусков.ДействуетДо КАК ДействуетДо
	              |ПОМЕСТИТЬ ВТ_Допуски
	              |ИЗ
	              |	ВТ_МаксДопуск КАК ВТ_МаксДопуск
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияДопусковКСпортивнымСоревнованиям КАК РегистрацияДопусков
	              |		ПО ВТ_МаксДопуск.Спортсмен = РегистрацияДопусков.Спортсмен
	              |			И ВТ_МаксДопуск.Период = РегистрацияДопусков.Период
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СоставУчастников.Спортсмен КАК Спортсмен,
	              |	СоставУчастников.GUIDУчастника КАК GUIDУчастника,
	              |	ФизическиеЛица.Фамилия КАК Фамилия,
	              |	ФизическиеЛица.Имя КАК Имя,
	              |	ФизическиеЛица.Отчество КАК Отчество,
	              |	ФизическиеЛица.Пол КАК Пол,
	              |	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
	              |	ГОД(ФизическиеЛица.ДатаРождения) КАК ГодРождения,
	              |	ФизическиеЛица.ФамилияЛатиница КАК ФамилияЛатиница,
	              |	ФизическиеЛица.ИмяЛатиница КАК ИмяЛатиница,
	              |	ФизическиеЛица.ОтчествоЛатиница КАК ОтчествоЛатиница,
	              |	ЕСТЬNULL(ВТ_Разряды.Разряд, ЗНАЧЕНИЕ(справочник.спортивнаяклассификация.пустаяссылка)) КАК Разряд,
	              |	СоставУчастников.Команда КАК Команда,
	              |	ВТ_ЗаявкиОтТренера.СпортивноеУчреждение КАК СпортивноеУчреждение,
	              |	ВТ_ЗаявкиОтТренера.Тренер КАК Тренер,
	              |	ВТ_Допуски.ДействуетДо КАК ДействуетДо,
	              |	ВЫБОР
	              |		КОГДА ЕСТЬNULL(ВТ_Допуски.Спортсмен, ЗНАЧЕНИЕ(справочник.спортсмены.пустаяссылка)) = ЗНАЧЕНИЕ(справочник.спортсмены.пустаяссылка)
	              |			ТОГДА ЛОЖЬ
	              |		ИНАЧЕ ВЫБОР
	              |				КОГДА ВТ_Допуски.ДействуетДо >= &ДатаДокумента
	              |						ИЛИ ВТ_Допуски.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ
	              |	КОНЕЦ КАК НаличиеДопуска,
	              |	ФизическиеЛицаГород.Представление КАК Город
	              |ИЗ
	              |	Документ.Соревнование.СоставУчастников КАК СоставУчастников
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Разряды КАК ВТ_Разряды
	              |		ПО СоставУчастников.Спортсмен = ВТ_Разряды.Спортсмен
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявкиОтТренера КАК ВТ_ЗаявкиОтТренера
	              |		ПО СоставУчастников.Спортсмен = ВТ_ЗаявкиОтТренера.Спортсмен
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Допуски КАК ВТ_Допуски
	              |		ПО СоставУчастников.Спортсмен = ВТ_Допуски.Спортсмен
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	              |		ПО СоставУчастников.Спортсмен.ФизическоеЛицо = ФизическиеЛица.Ссылка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаГород
				  // {Рарус dotere #23001 -Изменилось имя контактной информации 2021.12.13
				  |		ПО СоставУчастников.Спортсмен.ФизическоеЛицо = ФизическиеЛицаГород.Ссылка
				  // }Рарус dotere #23001 -Изменилось имя контактной информации 2021.12.13
	              |			И (ФизическиеЛицаГород.Вид = ЗНАЧЕНИЕ(справочник.видыконтактнойинформации.ГородСоревнование))
	              |ГДЕ
	              |	СоставУчастников.Ссылка = &Ссылка";
	
	тзДанные = Запрос.Выполнить().Выгрузить();
		
	СписокКолонок = СформироватьСписокКолонок(); 
	
	Для Индекс = 0 По СписокКолонок.Количество() - 1 Цикл
		ЗаполнитьОбластьТабличногоДокумента(1, Индекс + 1, СписокКолонок[Индекс].Представление); 
	КонецЦикла;	
	
	Для Индекс = 0 По тзДанные.Количество()- 1 Цикл
		строкаДанных = тзДанные[Индекс];
		
		Для ИндексПозиции = 0 По СписокКолонок.Количество() -1 Цикл
			
			ИндексСтроки  = Индекс + 2;
			ИндексКолонки = ИндексПозиции + 1;
			
			строкаИспользовать = СписокКолонок[ИндексПозиции].Представление;
			Если строкаИспользовать = "Код" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.GUIDУчастника);
			КонецЕсли;
			Если строкаИспользовать = "Фамилия" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Фамилия);
			КонецЕсли;
			Если строкаИспользовать = "Имя" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Имя);
			КонецЕсли;
			Если строкаИспользовать = "Пол" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Пол);
			КонецЕсли;
			Если строкаИспользовать = "ДатаРождения" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, Формат(строкаДанных.ДатаРождения,"ДЛФ=Д"));
			КонецЕсли;
			Если строкаИспользовать = "№" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, Индекс +1);
			КонецЕсли;
			Если строкаИспользовать = "Отчество" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Отчество);
			КонецЕсли;
			Если строкаИспользовать = "Surname" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.ФамилияЛатиница);
			КонецЕсли;
			Если строкаИспользовать = "Name" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.ИмяЛатиница);
			КонецЕсли;
			Если строкаИспользовать = "Фамилия Имя" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Фамилия + " " +строкаДанных.Имя);
			КонецЕсли;
			Если строкаИспользовать = "S+N" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.ФамилияЛатиница + " " + строкаДанных.ИмяЛатиница);
			КонецЕсли;
			Если строкаИспользовать = "Год рождения" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.ГодРождения);
			КонецЕсли;
			Если строкаИспользовать = "Разряд" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Разряд.КодДляИнтеграции);
			КонецЕсли;
			Если строкаИспользовать = "Город" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Город);
			КонецЕсли;
			Если строкаИспользовать = "Команда" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Команда);
			КонецЕсли;
			Если строкаИспользовать = "Спортивное учреждение" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.СпортивноеУчреждение);
			КонецЕсли;
			Если строкаИспользовать = "Тренер" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, строкаДанных.Тренер);
			КонецЕсли;
			Если строкаИспользовать = "Наличие медицинского допуска" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, ?(строкаДанных.НаличиеДопуска, "Да", "Нет"));
			КонецЕсли;
			Если строкаИспользовать = "Срок медицинского допуска" Тогда
				ЗаполнитьОбластьТабличногоДокумента(ИндексСтроки, ИндексКолонки, Формат(строкаДанных.ДействуетДо,"ДЛФ=Д"));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры	

#КонецОбласти

#Область ЗагрузкаФайла

&НаКлиенте
Процедура ЗагрузитьЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Закрыть(ДопПараметры);
	Иначе
		Для Каждого СтрокаОшибка Из ДопПараметры.МассивОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибка);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьДанныеНаСервере()
					
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Если НЕ ЗначениеЗаполнено(АдресВоВременномХранилице) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка чтения файла " + ПутьКФайлу);
		Возврат;
	КонецЕсли; 
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилице);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);	
	
    ТабличныйДокументЗагрузка.Очистить();
	ТабличныйДокументЗагрузка.Прочитать(ИмяВременногоФайла);
	
	ТаблицаДанныхЗагрузка.Очистить();
	
	СписокКолонок = СформироватьСписокКолонок();
	
	ИндексСтроки = 0;
	Для ИндексОбласти = НомерСтроки По ТабличныйДокументЗагрузка.ВысотаТаблицы Цикл
		
		ИндексОбласти = СтрЗаменить(ИндексОбласти, " ", "");
		
		Если НЕ ЗначениеЗаполнено(ТабличныйДокументЗагрузка.Область("R" + СокрЛП(ИндексОбласти) + "C" + СокрЛП(Фамилия)).Текст) Тогда
			Продолжить;
		КонецЕсли;	
		
		строкаДанных        = ТаблицаДанныхЗагрузка.Добавить();
		строкаДанных.Индекс = ИндексСтроки;
		
		Для Индекс = 0 По СписокКолонок.Количество() -1 Цикл
			строкаИспользовать = СписокКолонок[Индекс].Представление;
			ПозицияКолонки = СписокКолонок[Индекс].Значение;
			Если строкаИспользовать = "S+N" Тогда
				ПрочитатьЯчейкуТабличногоДокумента(ИндексОбласти, ПозицияКолонки, "SurnameName", строкаДанных);
			ИначеЕсли строкаИспользовать = "Фамилия Имя" Тогда
				ПрочитатьЯчейкуТабличногоДокумента(ИндексОбласти, ПозицияКолонки, "ФамилияИмя", строкаДанных);
			ИначеЕсли строкаИспользовать = "Наличие медицинского допуска" Тогда
				ПрочитатьЯчейкуТабличногоДокумента(ИндексОбласти, ПозицияКолонки, "Допуск", строкаДанных);
			ИначеЕсли строкаИспользовать = "Срок медицинского допуска" Тогда
				ПрочитатьЯчейкуТабличногоДокумента(ИндексОбласти, ПозицияКолонки, "СрокМедДопуска", строкаДанных);
			ИначеЕсли строкаИспользовать = "Год рождения" Тогда
				ПрочитатьЯчейкуТабличногоДокумента(ИндексОбласти, ПозицияКолонки, "ГодРождения", строкаДанных);	
			Иначе
				ПрочитатьЯчейкуТабличногоДокумента(ИндексОбласти, ПозицияКолонки, строкаИспользовать, строкаДанных);
			КонецЕсли;	
		КонецЦикла;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	// Удаляем временный файл
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузитьДанныеНаСервере()'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуНеобязательныхКолонок(Наименование, Позиция)
	
	строкаНеобязательныхКолонок              = ТаблицаНеобязательныхКолонок.Добавить();
	строкаНеобязательныхКолонок.Наименование = Наименование;
	строкаНеобязательныхКолонок.Позиция      = Позиция;
	строкаНеобязательныхКолонок.Использовать = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьОбластьТабличногоДокумента(Строка, Позиция, Значение)
	Попытка
		Область       = ТабличныйДокумент.Область("R" + СокрЛП(Строка) + "C" + СокрЛП(Позиция));
		Область.Текст = Значение;
	Исключение
		// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗаполнитьОбластьТабличногоДокумента()'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
	КонецПопытки;
КонецПроцедуры

&НаСервере                                                                                                                                          
Процедура ПрочитатьЯчейкуТабличногоДокумента(СтрокаТабДок, ПозицияТабДок, ИмяКолонки, строкаТЧ)
	Попытка
		Текст =  СокрЛП(ТабличныйДокументЗагрузка.Область("R" + СокрЛП(СтрокаТабДок) + "C" + СокрЛП(ПозицияТабДок)).Текст);
		Текст =  СтрЗаменить(Текст,"ё","е");
		Текст =  СтрЗаменить(Текст,"Ё","Е");
		Если ИмяКолонки = "Фамилия" ИЛИ ИмяКолонки = "Имя" ИЛИ ИмяКолонки = "Отчество" ИЛИ ИмяКолонки = "СпортивноеУчреждение" Тогда
			Текст = ВРег(Текст);
		ИначеЕсли ИмяКолонки = "Тренер" Тогда
			массивФИО= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
			Текст = ?(массивФИО.Количество()=0, Текст, массивФИО[0]);
		ИначеЕсли ИмяКолонки = "ДатаРождения" ИЛИ ИмяКолонки = "СрокМедДопуска" Тогда
			массивДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст,".");
			Если МассивДата.Количество() = 3 Тогда
				Год = ?(СтрДлина(МассивДата[2]) = 2, "20" + СокрЛП(МассивДата[2]), МассивДата[2]); 
				Текст = Дата(Год, МассивДата[1], МассивДата[0], 01, 01, 01);
			Иначе
				массивДата1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст,":");
				Если МассивДата1.Количество() = 3 Тогда
					Год = ?(СтрДлина(МассивДата1[2]) = 2, "20" + СокрЛП(МассивДата1[2]), МассивДата1[2]); 
					Текст = Дата(Год, МассивДата1[1], МассивДата1[0], 01, 01, 01);
				ИначеЕсли ИмяКолонки = "СрокМедДопуска" И Текст = "" Тогда
					Текст = ДокументСоревнование.УчебныйГод.ДатаОкончания;	
				Иначе
					Текст = Дата(1,1,1);
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли ИмяКолонки = "Пол" Тогда
			Если ВРег(Текст) = "LADIES" ИЛИ ВРег(Текст) = "ДЕВУШКИ" ИЛИ ВРег(Текст) = "Ж" ИЛИ ВРег(Текст) = "ЖЕНЩИНЫ" Тогда
				Текст = Перечисления.ПолФизическогоЛица.Женский;
			ИначеЕсли ВРег(Текст) = "MENS" ИЛИ ВРег(Текст) = "ЮНОШИ" ИЛИ ВРег(Текст) = "М" ИЛИ ВРег(Текст) = "МУЖЧИНЫ" Тогда
				Текст = Перечисления.ПолФизическогоЛица.Мужской;
			КонецЕсли;
		ИначеЕсли ИмяКолонки = "ГодРождения" Тогда
			Текст = СтрЗаменить(Текст," ","");	
		ИначеЕсли ИмяКолонки = "Допуск" Тогда
			Текст = ?(ВРег(Текст) = "ДА", Истина, Ложь);
		КонецЕсли;	
		строкаТЧ[ИмяКолонки] = Текст;
	Исключение
		// {Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ПрочитатьЯчейкуТабличногоДокумента()'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// }Рарус adilas #1.0.0.2 -SonarQube 2021.04.23
	КонецПопытки;	
КонецПроцедуры	

&НаСервере
Функция СформироватьСписокКолонок()
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить(Код          , "Код");
	СписокКолонок.Добавить(Фамилия      , "Фамилия");
	СписокКолонок.Добавить(Имя          , "Имя");
	СписокКолонок.Добавить(Пол          , "Пол");
	СписокКолонок.Добавить(ДатаРождения , "ДатаРождения");
	СписокКолонок.Добавить(Команда      , "Команда");
	Если НЕ ВыгрузкаФайла Тогда
		СписокКолонок.Добавить(Команда                , "Группа");
		СписокКолонок.Добавить(Тренер                 , "Тренер");
		СписокКолонок.Добавить(СпортивноеУчреждение   , "СпортивноеУчреждение");
	КонецЕсли;	
	Для Каждого строкаНеобязательнаяКолонка Из ТаблицаНеобязательныхКолонок Цикл
		Если НЕ строкаНеобязательнаяКолонка.Использовать Тогда
			Продолжить;
		КонецЕсли;	
		СписокКолонок.Добавить(строкаНеобязательнаяКолонка.Позиция , строкаНеобязательнаяКолонка.Наименование);
	КонецЦикла;	
	СписокКолонок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокКолонок
	
Конецфункции	

&НаСервере
Функция ПолучитьАдресВременногоХранилища()
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДанныхЗагрузка.Выгрузить(),ЭтаФорма.УникальныйИдентификатор)
КонецФункции	

#КонецОбласти