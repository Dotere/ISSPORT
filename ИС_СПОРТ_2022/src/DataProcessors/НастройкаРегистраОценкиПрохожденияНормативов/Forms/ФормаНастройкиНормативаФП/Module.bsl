#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Норматив") Тогда
		Норматив = Параметры.Норматив;
		Элементы.Норматив.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация")Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидСпорта") Тогда
		ВидСпорта = Параметры.ВидСпорта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидСпорта) И ЗначениеЗаполнено(Организация) Тогда
		ЗаполнитьВидСпортаПоОрганизации();
	КонецЕсли;	
	
	ЗаблокироватьРегистрСведений("ОценкиПрохожденияНормативов", Новый Структура("Норматив, Организация, ВидСпорта"));
	ЗаблокироватьРегистрСведений("ОценкиПрохожденияНаЭтап", Новый Структура("Норматив, Организация, ВидСпорта"));
		
	ЗаполнитьСписокВозрастныхГруппИзСправочника();
	ЗаполнитьШкалуОценокНормативов(); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПерезаполнятьФорму = Ложь;
	Если ИсточникВыбора.ИмяФормы = "Справочник.Нормативы.ФормаВыбора" Тогда
		ПерезаполнятьФорму = Истина;	
		ИзменитьТипРеквизитовНаФорме();
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Организации.ФормаВыбора" Тогда
		ПерезаполнятьФорму = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыСпорта.ФормаВыбора" Тогда
		ПерезаполнятьФорму = Истина;	
	КонецЕсли;
	
	Если ПерезаполнятьФорму Тогда                   
		УстановитьВидимостьДоступность();
		ЗаполнитьШкалуОценокНормативов(); 
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура НормативПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	ИзменитьТипРеквизитовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура НормативНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТаблицаНабораДанных.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ВызватьПроцедуруДиалогаСПользователем("Нормативы");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТаблицаНабораДанных.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ВызватьПроцедуруДиалогаСПользователем("Организации");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСпортаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	ЗаполнитьШкалуОценокНормативов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСпортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТаблицаНабораДанных.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ВызватьПроцедуруДиалогаСПользователем("ВидыСпорта");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныйЧасти

&НаКлиенте
Процедура РезультатЧислоПриИзменение(Элемент)
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Записать(Команда)
	
	Отказ = Ложь;
	ЗаписатьНаКлиенте(Отказ);
	
	Если НЕ Отказ Тогда
		Оповестить("ДобавлениеНастройкиВРегистрОценкиПрохожденияНормативов",Новый Структура("Организация, ВидСпорта", Организация, ВидСпорта)); 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	ЗаписатьНаКлиенте(Отказ);
	
	Если НЕ Отказ Тогда
		ЭтаФорма.Закрыть(Новый Структура("Организация, ВидСпорта", Организация, ВидСпорта));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНастройкиИзДругогоНорматива(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьНастройкиИзДругогоНормативаЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ТипРезультата", ОпределитьТипРезультата(Норматив));
	ОткрытьФорму("Справочник.Нормативы.ФормаВыбора", 
	   ПараметрыФормы, 
	   ЭтаФорма,,,,
	   Оповещение,
	   РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПрограммныхРеквизитовНаФорме

&НаСервере
Процедура ЗаполнитьСписокВозрастныхГруппИзСправочника()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МеждународныеВозрастныеГруппы.Ссылка КАК Ссылка,
	               |	МеждународныеВозрастныеГруппы.ВозрастОт КАК ВозрастОт,
	               |	МеждународныеВозрастныеГруппы.ВозрастДо КАК ВозрастДо
	               |ИЗ
	               |	Справочник.МеждународныеВозрастныеГруппы КАК МеждународныеВозрастныеГруппы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВозрастОт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НовыеРеквизиты = Новый Массив;
	
	Если Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Время Тогда
	    ВидимостьВремя = Истина;
	ИначеЕсли Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Булево Тогда
		ВидимостьБулево = Истина;
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		
		строкаТаблицаВозрастныхГрупп = ТаблицаВозрастныхГрупп.Добавить();
		ЗаполнитьЗначенияСвойств(строкаТаблицаВозрастныхГрупп, Выборка);
		строкаТаблицаВозрастныхГрупп.МеждународнаяВозрастнаяГруппа = Выборка.Ссылка;
		строкаТаблицаВозрастныхГрупп.УникальныйИдентификатор = СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор()),"-","_");
		
		гуид = строкаТаблицаВозрастныхГрупп.УникальныйИдентификатор;
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("МеждународнаяВозрастнаяГруппа_" + гуид , Новый ОписаниеТипов("СправочникСсылка.МеждународныеВозрастныеГруппы")    , "ТаблицаНабораДанных"      , СокрЛП(Выборка.Ссылка), Истина));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПолВремяЖ_" + гуид                     , Новый ОписаниеТипов("Строка")                                            , "ТаблицаНабораДанных"      , "Ж"                   , Истина));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПолВремяМ_" + гуид                     , Новый ОписаниеТипов("Строка")                                            , "ТаблицаНабораДанных"      , "М"                   , Истина));
		
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПолБулевоЖ_" + гуид                    , Новый ОписаниеТипов("Строка")                                            , "ТаблицаНабораДанных"      , "Ж"                   , Истина));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПолБулевоМ_" + гуид                    , Новый ОписаниеТипов("Строка")                                            , "ТаблицаНабораДанных"      , "М"                   , Истина));
		
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПолЧислоЖ_" + гуид                     , Новый ОписаниеТипов("Число")                                             , "ТаблицаНабораДанных"      , "Ж"                   , Истина));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПолЧислоМ_" + гуид                     , Новый ОписаниеТипов("Число")                                             , "ТаблицаНабораДанных"      , "М"                   , Истина));
		
	КонецЦикла;	
	
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	Для Каждого строкаТаблицаВозрастныхГрупп Из ТаблицаВозрастныхГрупп Цикл
		
		ВыделятьЦветом = НЕ ВыделятьЦветом;
		
		гуид = строкаТаблицаВозрастныхГрупп.УникальныйИдентификатор;
		
		ГруппаВозГрупп                          = Элементы.Добавить("Группа" + гуид, Тип("ГруппаФормы"), Элементы.МеждународныеВозрастныеГруппы);	
        ГруппаВозГрупп.Заголовок                = СокрЛП(строкаТаблицаВозрастныхГрупп.МеждународнаяВозрастнаяГруппа) + " (" + СокрЛП(строкаТаблицаВозрастныхГрупп.ВозрастОт) + "-" + СокрЛП(строкаТаблицаВозрастныхГрупп.ВозрастДо) + ") лет";
		ГруппаВозГрупп.ОтображатьВШапке         = Истина;
		ГруппаВозГрупп.Вид                      = ВидГруппыФормы.ГруппаКолонок;
		ГруппаВозГрупп.Группировка              = ГруппировкаКолонок.Горизонтальная;
		// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		// Было Новый Шрифт(,13);
		ГруппаВозГрупп.ШрифтЗаголовка           = ШрифтыСтиля.КрупныйШрифтТекста;
		// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		
		НовыйЭлементПолВремяЖ                   = Элементы.Добавить("ТаблицаНабораДанныхПолВремяЖ_" + гуид, Тип("ПолеФормы"), Элементы["Группа"+гуид]); 
        НовыйЭлементПолВремяЖ.Вид               = ВидПоляФормы.ПолеВвода; 
        НовыйЭлементПолВремяЖ.ПутьКДанным       = "ТаблицаНабораДанных." + "ПолВремяЖ_" + гуид;
		НовыйЭлементПолВремяЖ.Видимость         = ВидимостьВремя;
		НовыйЭлементПолВремяЖ.Маска             = "99:99:99:999";
				
		НовыйЭлементПолВремяМ                   = Элементы.Добавить("ТаблицаНабораДанныхПолВремяМ_" + гуид, Тип("ПолеФормы"), Элементы["Группа"+гуид]); 
        НовыйЭлементПолВремяМ.Вид               = ВидПоляФормы.ПолеВвода; 
        НовыйЭлементПолВремяМ.ПутьКДанным       = "ТаблицаНабораДанных." + "ПолВремяМ_" + гуид;
		НовыйЭлементПолВремяМ.Видимость         = ВидимостьВремя;
		НовыйЭлементПолВремяМ.Маска             = "99:99:99:999";
		
		Если ВыделятьЦветом Тогда
			// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
			НовыйЭлементПолВремяЖ.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
			НовыйЭлементПолВремяЖ.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
			
			НовыйЭлементПолВремяМ.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
			НовыйЭлементПолВремяМ.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
			// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		КонецЕсли;
		
		НовыйЭлементПолБулевоЖ                     = Элементы.Добавить("ТаблицаНабораДанныхПолБулевоЖ_" + гуид, Тип("ПолеФормы"), Элементы["Группа"+гуид]); 
        НовыйЭлементПолБулевоЖ.Вид                 = ВидПоляФормы.ПолеВвода; 
        НовыйЭлементПолБулевоЖ.ПутьКДанным         = "ТаблицаНабораДанных." + "ПолБулевоЖ_" + гуид;
		НовыйЭлементПолБулевоЖ.Видимость           = ВидимостьБулево;
		НовыйЭлементПолБулевоЖ.РежимВыбораИзСписка = Истина;
		НовыйЭлементПолБулевоЖ.СписокВыбора.Добавить("Выполнил");
		НовыйЭлементПолБулевоЖ.СписокВыбора.Добавить("Не выполнил");
		
		НовыйЭлементПолБулевоМ                     = Элементы.Добавить("ТаблицаНабораДанныхПолБулевоМ_" + гуид, Тип("ПолеФормы"), Элементы["Группа"+гуид]); 
        НовыйЭлементПолБулевоМ.Вид                 = ВидПоляФормы.ПолеВвода; 
        НовыйЭлементПолБулевоМ.ПутьКДанным         = "ТаблицаНабораДанных." + "ПолБулевоМ_" + гуид;
		НовыйЭлементПолБулевоМ.Видимость           = ВидимостьБулево;
		НовыйЭлементПолБулевоМ.РежимВыбораИзСписка = Истина;
		НовыйЭлементПолБулевоМ.СписокВыбора.Добавить("Выполнил");
		НовыйЭлементПолБулевоМ.СписокВыбора.Добавить("Не выполнил");
		
		Если ВыделятьЦветом Тогда
			// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
			НовыйЭлементПолБулевоЖ.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
			НовыйЭлементПолБулевоЖ.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
			
			НовыйЭлементПолБулевоМ.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
			НовыйЭлементПолБулевоМ.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
			// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		КонецЕсли;
		
		НовыйЭлементПолЧислоЖ                   = Элементы.Добавить("ТаблицаНабораДанныхПолЧислоЖ_" + гуид, Тип("ПолеФормы"), Элементы["Группа"+гуид]); 
        НовыйЭлементПолЧислоЖ.Вид               = ВидПоляФормы.ПолеВвода; 
        НовыйЭлементПолЧислоЖ.ПутьКДанным       = "ТаблицаНабораДанных." + "ПолЧислоЖ_" + гуид;
		НовыйЭлементПолЧислоЖ.Видимость         = НЕ ВидимостьВремя И НЕ ВидимостьБулево;
		НовыйЭлементПолЧислоЖ.Формат            = "ЧН=0";
		НовыйЭлементПолЧислоЖ.УстановитьДействие("ПриИзменении", "РезультатЧислоПриИзменение");
		
		НовыйЭлементПолЧислоМ                   = Элементы.Добавить("ТаблицаНабораДанныхПолЧислоМ_" + гуид, Тип("ПолеФормы"), Элементы["Группа"+гуид]); 
        НовыйЭлементПолЧислоМ.Вид               = ВидПоляФормы.ПолеВвода; 
        НовыйЭлементПолЧислоМ.ПутьКДанным       = "ТаблицаНабораДанных." + "ПолЧислоМ_" + гуид;
		НовыйЭлементПолЧислоМ.Видимость         = НЕ ВидимостьВремя И НЕ ВидимостьБулево;
		НовыйЭлементПолЧислоМ.Формат            = "ЧН=0";
		НовыйЭлементПолЧислоМ.УстановитьДействие("ПриИзменении", "РезультатЧислоПриИзменение");
		
		Если ВыделятьЦветом Тогда
			// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
			НовыйЭлементПолЧислоЖ.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
			НовыйЭлементПолЧислоЖ.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
			
			НовыйЭлементПолЧислоМ.ЦветФонаЗаголовка    = ЦветаСтиля.НедоступныеДанныеЦвет;
			НовыйЭлементПолЧислоМ.ЦветФона             = ЦветаСтиля.НедоступныеДанныеЦвет;
			// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
		КонецЕсли;
				
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьШкалуОценокНормативов(СкопированныйНорматив = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Норматив", ?(СкопированныйНорматив = Неопределено, Норматив, СкопированныйНорматив));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидСпорта", ВидСпорта);
	Запрос.УстановитьПараметр("ТаблицаВозрастныхГрупп", ТаблицаВозрастныхГрупп.Выгрузить());
	
	ТекстОбщий = "";
	// {Рарус adilas #- -Sonar 2021.06.29
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
		  ТекстОбщий,
		  Новый Структура("МеждународнаяВозрастнаяГруппа,УникальныйИдентификатор"),
		  "ВТ_ТаблицаВозрастныхГрупп",
		  "ТаблицаВозрастныхГрупп");
	
	Запрос.Текст = ТекстОбщий +"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ВТ_ТаблицаВозрастныхГрупп.УникальныйИдентификатор КАК СТРОКА(36)) КАК УникальныйИдентификатор,
	               |	ОценкиПрохожденияНормативов.Пол КАК Пол,
	               |	ОценкиПрохожденияНормативов.Балл КАК Балл,
	               |	ОценкиПрохожденияНормативов.РезультатЧисло КАК РезультатЧисло,
	               |	ОценкиПрохожденияНормативов.РезультатБулево КАК РезультатБулево,
				   |	ОценкиПрохожденияНормативов.ТипПодсчетаРезультата КАК ТипПодсчетаРезультата,
				   |	ВЫБОР 
				   |      КОГДА ОценкиПрохожденияНормативов.КоличествоПопыток = 0 Тогда
				   |         1 
				   |    ИНАЧЕ 
				   |      ОценкиПрохожденияНормативов.КоличествоПопыток 
				   |    КОНЕЦ КАК КоличествоПопыток
	               |ИЗ
	               |	ВТ_ТаблицаВозрастныхГрупп КАК ВТ_ТаблицаВозрастныхГрупп
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиПрохожденияНормативов КАК ОценкиПрохожденияНормативов
	               |		ПО ВТ_ТаблицаВозрастныхГрупп.МеждународнаяВозрастнаяГруппа = ОценкиПрохожденияНормативов.МеждународнаяВозрастнаяГруппа
	               |ГДЕ
	               |	ОценкиПрохожденияНормативов.Организация = &Организация
	               |	И ОценкиПрохожденияНормативов.ВидСпорта = &ВидСпорта
	               |	И ОценкиПрохожденияНормативов.Норматив = &Норматив
				   |УПОРЯДОЧИТЬ ПО
	               |    Балл
	               |ИТОГИ ПО
	               |	УникальныйИдентификатор";
	
	ВыборкаГуид = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПересчетВМилСек = Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Время;
	ПересчетВБулево = Норматив.ТипРезультата = Перечисления.ТипыРезультатов.Булево;
	
	Пока ВыборкаГуид.Следующий() Цикл
		
		Гуид = ВыборкаГуид.УникальныйИдентификатор;
		
		Выборка = ВыборкаГуид.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТипПодсчетаРезультата = Выборка.ТипПодсчетаРезультата;
			КоличествоПопыток     = Выборка.КоличествоПопыток;
			
			строкиПоиска = ТаблицаНабораДанных.НайтиСтроки(Новый Структура("УровеньОценки", Выборка.Балл));
			Если строкиПоиска.Количество() = 0 Тогда
				строкаЗаполнения = ТаблицаНабораДанных.Добавить();
				строкаЗаполнения.УровеньОценки = Выборка.Балл;
			Иначе
				строкаЗаполнения = строкиПоиска[0];
			КонецЕсли;
			
			Если ПересчетВМилСек Тогда
				ИмяПоля = "Время";
				Результат = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяВМиллесекундахВСтроку(Выборка.РезультатЧисло);
			ИначеЕсли ПересчетВБулево Тогда
				ИмяПоля = "Булево";
				Результат = ?(Выборка.РезультатБулево, "Выполнил", "Не выполнил");
			Иначе
				ИмяПоля = "Число";
				Результат = Выборка.РезультатЧисло;
			КонецЕсли;	
			
			Если Выборка.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				строкаЗаполнения["Пол" + ИмяПоля + "М_" + гуид] = Результат;
			ИначеЕсли Выборка.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				строкаЗаполнения["Пол" + ИмяПоля + "Ж_" + гуид] = Результат;
			Иначе
				Продолжить;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТипПодсчетаРезультата) Тогда
		ТипПодсчетаРезультата = Перечисления.ТипПодсчетаРезультата.МинимальноеЗначение;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипРезультата(Норматив)
	Возврат Норматив.ТипРезультата
КонецФункции	

&НаКлиенте
Процедура ИзменитьТипРеквизитовНаФорме()
	
	ТипРезультатаНорматива = ОпределитьТипРезультата(Норматив);
		
	Если ТипРезультатаНорматива = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Булево") Тогда
		ВидимостьБулево = Истина;
		ВидимостьВремя  = Ложь;
	ИначеЕсли ТипРезультатаНорматива = ПредопределенноеЗначение("Перечисление.ТипыРезультатов.Время") Тогда
		ВидимостьБулево = Ложь;
		ВидимостьВремя  = Истина;
	Иначе
		ВидимостьБулево = Ложь;
		ВидимостьВремя  = Ложь;
	КонецЕсли;	
	
	Для Каждого строкаТаблицаВозрастныхГрупп Из ТаблицаВозрастныхГрупп Цикл
		гуид = строкаТаблицаВозрастныхГрупп.УникальныйИдентификатор;                        
		Элементы["ТаблицаНабораДанныхПолБулевоЖ_" + гуид].Видимость = ВидимостьБулево;
		Элементы["ТаблицаНабораДанныхПолБулевоМ_" + гуид].Видимость = ВидимостьБулево;
		
		Элементы["ТаблицаНабораДанныхПолВремяЖ_" + гуид].Видимость = ВидимостьВремя;
		Элементы["ТаблицаНабораДанныхПолВремяМ_" + гуид].Видимость = ВидимостьВремя;
		
		Элементы["ТаблицаНабораДанныхПолЧислоЖ_" + гуид].Видимость = НЕ ВидимостьВремя И НЕ ВидимостьБулево;
		Элементы["ТаблицаНабораДанныхПолЧислоМ_" + гуид].Видимость = НЕ ВидимостьВремя И НЕ ВидимостьБулево;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПриИзменениеРеквизитовШапки

&НаСервере
Процедура ЗаполнитьВидСпортаПоОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ВидыСпорта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыСпорта КАК ВидыСпорта
	               |ГДЕ
	               |	ВидыСпорта.Владелец = &Владелец";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	Иначе
		ВидСпорта = Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ТаблицаНабораДанных.ИзменятьСоставСтрок = ЗначениеЗаполнено(Норматив) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ВидСпорта);
		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьПроцедуруДиалогаСПользователем(ИмяСправочника)
	
	Оповещение = Новый ОписаниеОповещения("ВызватьПроцедуруДиалогаСПользователемЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяСправочника",ИмяСправочника));	
		
		ПоказатьВопрос(Оповещение,
		"Настройки в табличной части будут очищены.
		|Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВызватьПроцедуруДиалогаСПользователемЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТаблицаНабораДанных.Очистить();
		ОткрытьФорму("Справочник." + ДопПараметры.ИмяСправочника + ".ФормаВыбора",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Возврат
	КонецЕсли;	
	
КонецПроцедуры	

#Область КопированиеНастроекСНорматива

&НаКлиенте
Процедура СкопироватьНастройкиИзДругогоНормативаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		
		ЗаполнитьШкалуОценокНормативов(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область ЗаписатьНаборВБазу

&НаКлиенте
Процедура ЗаписатьНаКлиенте(Отказ)
	
	ПроверитьЗаполнениеНаФорме(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаборОценкиПрохожденияНормативовНаСервере(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьРегистрСведений(ИмяРегистра, СтруктураБлокировки)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ОбъектМетаданных  = "РегистрСведений." + ИмяРегистра;
	ЭлементБлокировки = БлокировкаДанных.Добавить(ОбъектМетаданных);
	Для Каждого КлючИЗначение Из СтруктураБлокировки Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект[КлючИЗначение.Ключ]) Тогда
			ЭлементБлокировки.УстановитьЗначение(КлючИЗначение.Ключ, ЭтотОбъект[КлючИЗначение.Ключ]);
		КонецЕсли;
	КонецЦикла;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	// {Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	Попытка
		БлокировкаДанных.Заблокировать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	// }Рарус adilas #1.0.0.2 -Исправления по SonarQube 2021.04.23
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьЗаполнениеНаФорме(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Норматив) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен норматив!",,,"Норматив");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена организация!",,,"Организация");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидСпорта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид спорта!",,,"ВидСпорта");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьНаборОценкиПрохожденияНормативовНаСервере(Отказ)
	
	ТаблицаНаформе = ПроведениеСоревнованийФормыСервер.ПроиндексироватьТаблицуДокумента(ЭтотОбъект, "ТаблицаНабораДанных");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНаформе", ТаблицаНаформе);
	
	Текст  = "";
	// {Рарус adilas #- -Sonar 2021.06.29	
	УчетСпортсменовВызовСервера.ВвестиСтруктуруВоВременнуюТаблицу(
	  Текст,
	  Новый Структура("Индекс,УровеньОценки"),
	  "ВТ_ТаблицаНаформе",
	  "ТаблицаНаформе");
	
	Запрос.Текст = Текст + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаНаформе.Индекс КАК Индекс,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаНаформе.УровеньОценки) КАК КоличестовРазличныхОценок
	               |ПОМЕСТИТЬ ВТ_КоличествоРазличныхОценокНаФорме
	               |ИЗ
	               |	ВТ_ТаблицаНаформе КАК ВТ_ТаблицаНаформе
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТаблицаНаформе.Индекс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КоличествоРазличныхОценокНаФорме.Индекс КАК Индекс
	               |ИЗ
	               |	ВТ_КоличествоРазличныхОценокНаФорме КАК ВТ_КоличествоРазличныхОценокНаФорме
	               |ГДЕ
	               |	ВТ_КоличествоРазличныхОценокНаФорме.КоличестовРазличныхОценок > 1";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке %1 обнаружены дубли значений в колонке Балл! 
					      |Необходимо исправить.'"),
					Выборка.Индекс+1);
					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
		КонецЦикла;
		
		Отказ = Истина;
		
		Возврат
		
	Иначе
		
		Если ВидимостьБулево Тогда
			ИмяПоляПоТипуНорматива = "Булево";
		ИначеЕсли ВидимостьВремя Тогда
			ИмяПоляПоТипуНорматива = "Время";
		Иначе
			ИмяПоляПоТипуНорматива = "Число";
		КонецЕсли;	
		
		Для Каждого СтрокаТаблицаНабораДанных Из ТаблицаНабораДанных Цикл
			
			Для Каждого СтрокаТаблицаВозрастныхГрупп Из ТаблицаВозрастныхГрупп Цикл
				
				гуид = СтрокаТаблицаВозрастныхГрупп.УникальныйИдентификатор;
				
				Если ЗначениеЗаполнено(СтрокаТаблицаНабораДанных["Пол" + ИмяПоляПоТипуНорматива + "Ж_" + гуид])Тогда
					 
					 РезультатБулево = ?(СтрокаТаблицаНабораДанных["ПолБулевоЖ_" + гуид]= "Выполнил", Истина, Ложь);
					 Если ВидимостьВремя Тогда
					     РезультатЧисло = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(СтрокаТаблицаНабораДанных["Пол" + ИмяПоляПоТипуНорматива + "Ж_" + гуид]);
					 Иначе
						 РезультатЧисло = СтрокаТаблицаНабораДанных["ПолЧислоЖ_" + гуид];
					 КонецЕсли;	 
					 СформироватьИЗаписатьНаборЗаписейОценкиПрохожденияНормативов(Новый Структура("Пол, Балл, МеждународнаяВозрастнаяГруппа, РезультатБулево, РезультатЧисло", 
					    Перечисления.ПолФизическогоЛица.Женский, СтрокаТаблицаНабораДанных.УровеньОценки, СтрокаТаблицаВозрастныхГрупп.МеждународнаяВозрастнаяГруппа, РезультатБулево, РезультатЧисло)); 
					 
				КонецЕсли;
					
				Если ЗначениеЗаполнено(СтрокаТаблицаНабораДанных["Пол" + ИмяПоляПоТипуНорматива + "М_" + гуид]) Тогда
					 
					 РезультатБулево = ?(СтрокаТаблицаНабораДанных["ПолБулевоМ_" + гуид] = "Выполнил", Истина, Ложь);
					 Если ВидимостьВремя Тогда
					     РезультатЧисло = УчетСпортсменовОбщегоНазначенияКлиентСервер.ПересчитатьВремяИзСтрокиВМиллесекунды(СтрокаТаблицаНабораДанных["Пол" + ИмяПоляПоТипуНорматива + "М_" + гуид]);
					 Иначе
						 РезультатЧисло = СтрокаТаблицаНабораДанных["ПолЧислоМ_" + гуид];
					 КонецЕсли;	 
					 СформироватьИЗаписатьНаборЗаписейОценкиПрохожденияНормативов(Новый Структура("Пол, Балл, МеждународнаяВозрастнаяГруппа, РезультатБулево, РезультатЧисло", 
					    Перечисления.ПолФизическогоЛица.Мужской, СтрокаТаблицаНабораДанных.УровеньОценки, СтрокаТаблицаВозрастныхГрупп.МеждународнаяВозрастнаяГруппа, РезультатБулево, РезультатЧисло)); 
					 
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИЗаписатьНаборЗаписейОценкиПрохожденияНаЭтап(СтруктураДанных)
	
	НаборЗаписей = РегистрыСведений.ОценкиПрохожденияНаЭтап.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ВидСпорта.Установить(ВидСпорта);
	НаборЗаписей.Отбор.Норматив.Установить(Норматив);
	НаборЗаписей.Отбор.Пол.Установить(СтруктураДанных.Пол);
	НаборЗаписей.Отбор.Этап.Установить(СтруктураДанных.Этап);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись_ = НаборЗаписей.Добавить();
	Запись_.ВидСпорта = ВидСпорта;
	Запись_.Норматив = Норматив;
	Запись_.Организация = Организация;
	ЗаполнитьЗначенияСвойств(Запись_,СтруктураДанных);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать данные по этапу %1 пол %2 по причине: 
			      |%3.'"),
			СтруктураДанных.Этап,
			СтруктураДанных.Пол,
			ОписаниеОшибки());
					
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;	
		
КонецПроцедуры	

&НаСервере
Процедура СформироватьИЗаписатьНаборЗаписейОценкиПрохожденияНормативов(СтруктураДанных)
	
	НаборЗаписей = РегистрыСведений.ОценкиПрохожденияНормативов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ВидСпорта.Установить(ВидСпорта);
	НаборЗаписей.Отбор.Норматив.Установить(Норматив);
	НаборЗаписей.Отбор.Пол.Установить(СтруктураДанных.Пол);
	НаборЗаписей.Отбор.Балл.Установить(СтруктураДанных.Балл);
	НаборЗаписей.Отбор.МеждународнаяВозрастнаяГруппа.Установить(СтруктураДанных.МеждународнаяВозрастнаяГруппа);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись_ = НаборЗаписей.Добавить();
	Запись_.ВидСпорта = ВидСпорта;
	Запись_.Норматив = Норматив;
	Запись_.Организация = Организация;
	ЗаполнитьЗначенияСвойств(Запись_,СтруктураДанных);
	Запись_.ТипПодсчетаРезультата = ТипПодсчетаРезультата;
	Запись_.КоличествоПопыток = КоличествоПопыток;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать данные по международной группе %1 пол %2 балл %3 по причине: 
			      |%4.'"),
			СтруктураДанных.МеждународнаяВозрастнаяГруппа,
			СтруктураДанных.Пол,
			СтруктураДанных.Балл,
			ОписаниеОшибки());
					
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти